// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package kpuManager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IKPUManagerKPUKota is an auto generated low-level Go binding around an user-defined struct.
type IKPUManagerKPUKota struct {
	Name     string
	Address  common.Address
	IsActive bool
	Region   string
}

// IKPUManagerKPUProvinsi is an auto generated low-level Go binding around an user-defined struct.
type IKPUManagerKPUProvinsi struct {
	Name     string
	Address  common.Address
	IsActive bool
	Region   string
}

// KpuManagerMetaData contains all meta data concerning the KpuManager contract.
var KpuManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"trustedForwarders\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"KPUKotaAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KPUKotaNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KPUNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KPUProvinsiAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KPUProvinsiNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyKpuKota\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyKpuProvinsi\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"}],\"name\":\"KPUKotaDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"KPUKotaRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"KPUKotaUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"}],\"name\":\"KPUProvinsiDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"KPUProvinsiRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"KPUProvinsiUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"TrustedForwarderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"TrustedForwarderRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"addTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"contractIVotechainBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"}],\"name\":\"deactivateKPUKota\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"}],\"name\":\"deactivateKPUProvinsi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllKPUKota\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"internalType\":\"structIKPUManager.KPUKota[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllKPUProvinsi\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"internalType\":\"structIKPUManager.KPUProvinsi[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"}],\"name\":\"getKpuKotaByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"internalType\":\"structIKPUManager.KPUKota\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kpuAddress\",\"type\":\"address\"}],\"name\":\"getKpuKotaRegion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"}],\"name\":\"getKpuProvinsiByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"internalType\":\"structIKPUManager.KPUProvinsi\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kpuAddress\",\"type\":\"address\"}],\"name\":\"isKPUKota\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kpuAddress\",\"type\":\"address\"}],\"name\":\"isKPUProvinsi\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"kpuKota\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"internalType\":\"structIKPUManager.KPUKota\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kpuKotaAddressesArray\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"kpuProvinsi\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"internalType\":\"structIKPUManager.KPUProvinsi\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kpuProvinsiAddressesArray\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"registerKPUKota\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"registerKPUProvinsi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"removeTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"updateKPUKota\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"updateKPUProvinsi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f5ffd5b506040516140ef3803806140ef833981810160405281019061003191906103c2565b805f5f90505b8151811015610076576100698282815181106100565761005561041c565b5b60200260200101516100bf60201b60201c565b8080600101915050610037565b50508160025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610449565b5f5f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166102045760015f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550600181908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f3ef8564460ada92419608d823c014975d98f8104d7d1e68c222967ac6814cd9760405160405180910390a25b50565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61024182610218565b9050919050565b61025181610237565b811461025b575f5ffd5b50565b5f8151905061026c81610248565b92915050565b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6102bc82610276565b810181811067ffffffffffffffff821117156102db576102da610286565b5b80604052505050565b5f6102ed610207565b90506102f982826102b3565b919050565b5f67ffffffffffffffff82111561031857610317610286565b5b602082029050602081019050919050565b5f5ffd5b5f61033f61033a846102fe565b6102e4565b9050808382526020820190506020840283018581111561036257610361610329565b5b835b8181101561038b5780610377888261025e565b845260208401935050602081019050610364565b5050509392505050565b5f82601f8301126103a9576103a8610272565b5b81516103b984826020860161032d565b91505092915050565b5f5f604083850312156103d8576103d7610210565b5b5f6103e58582860161025e565b925050602083015167ffffffffffffffff81111561040657610405610214565b5b61041285828601610395565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b613c99806104565f395ff3fe608060405234801561000f575f5ffd5b5060043610610140575f3560e01c8063631a4438116100b65780639424ab901161007a5780639424ab901461039a578063b7a3418e146103ca578063cea41469146103e8578063df3aae0b14610404578063f9cdd55614610434578063ff7196c81461046457610140565b8063631a4438146102bb5780636fee7d58146102ee57806374c803801461031e57806375a4352f1461034e578063924238151461037e57610140565b80633751d89c116101085780633751d89c146101e45780634bcb1b0f146102005780634da1b97a146102335780635001f3b51461024f57806356d35b511461026d578063572b6c051461028b57610140565b806302819b9914610144578063147d559b1461016057806326d00668146101905780632db33a2f146101ac578063356b0480146101c8575b5f5ffd5b61015e60048036038101906101599190612fbf565b610482565b005b61017a60048036038101906101759190613050565b61078a565b604051610187919061317b565b60405180910390f35b6101aa60048036038101906101a59190613050565b610970565b005b6101c660048036038101906101c19190612fbf565b610a75565b005b6101e260048036038101906101dd9190613050565b610e9e565b005b6101fe60048036038101906101f99190613050565b6110b9565b005b61021a600480360381019061021591906131ce565b6111be565b60405161022a949392919061325f565b60405180910390f35b61024d60048036038101906102489190612fbf565b611331565b005b610257611639565b604051610264919061330b565b60405180910390f35b61027561165e565b6040516102829190613446565b60405180910390f35b6102a560048036038101906102a09190613050565b611849565b6040516102b29190613466565b60405180910390f35b6102d560048036038101906102d091906131ce565b61189a565b6040516102e5949392919061325f565b60405180910390f35b61030860048036038101906103039190613050565b611a0d565b604051610315919061317b565b60405180910390f35b61033860048036038101906103339190613050565b611c77565b604051610345919061347f565b60405180910390f35b61036860048036038101906103639190613050565b611d47565b6040516103759190613466565b60405180910390f35b61039860048036038101906103939190612fbf565b611d9d565b005b6103b460048036038101906103af9190613050565b612158565b6040516103c19190613506565b60405180910390f35b6103d26123c2565b6040516103df9190613648565b60405180910390f35b61040260048036038101906103fd9190613050565b6125ad565b005b61041e60048036038101906104199190613050565b6127c8565b60405161042b9190613466565b60405180910390f35b61044e60048036038101906104499190613050565b61281e565b60405161045b9190613506565b60405180910390f35b61046c612a04565b6040516104799190613710565b60405180910390f35b60035f61048d612a8f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff1661050d576040517ff75c676f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60035f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff16610591576040517f27b434e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838360035f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f0191826105df92919061395b565b50818160035f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600201918261062f92919061395b565b505f5f90505b60058054905081101561072e578573ffffffffffffffffffffffffffffffffffffffff166005828154811061066d5761066c613a28565b5b905f5260205f2090600302016001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610721578484600583815481106106cd576106cc613a28565b5b905f5260205f2090600302015f0191826106e892919061395b565b508282600583815481106106ff576106fe613a28565b5b905f5260205f209060030201600201918261071b92919061395b565b5061072e565b8080600101915050610635565b508473ffffffffffffffffffffffffffffffffffffffff167f12fbd96f82516b91ab18004905e324016dd38b631fed5d3884ef88ebe3ae20e58585858560405161077b9493929190613a8f565b60405180910390a25050505050565b610792612e80565b60045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f820180546107e990613794565b80601f016020809104026020016040519081016040528092919081815260200182805461081590613794565b80156108605780601f1061083757610100808354040283529160200191610860565b820191905f5260205f20905b81548152906001019060200180831161084357829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff161515151581526020016002820180546108e990613794565b80601f016020809104026020016040519081016040528092919081815260200182805461091590613794565b80156109605780601f1061093757610100808354040283529160200191610960565b820191905f5260205f20905b81548152906001019060200180831161094357829003601f168201915b5050505050815250509050919050565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb4ab1646040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109da573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109fe9190613adc565b73ffffffffffffffffffffffffffffffffffffffff16610a1c612a8f565b73ffffffffffffffffffffffffffffffffffffffff1614610a69576040517ff75c676f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a7281612a9d565b50565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb4ab1646040518163ffffffff1660e01b8152600401602060405180830381865afa158015610adf573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b039190613adc565b73ffffffffffffffffffffffffffffffffffffffff16610b21612a8f565b73ffffffffffffffffffffffffffffffffffffffff1614610b6e576040517ff75c676f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60035f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff1615610bf3576040517f6fed5b9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f604051806080016040528086868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081526020018773ffffffffffffffffffffffffffffffffffffffff16815260200160011515815260200184848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081525090508060035f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f019081610d079190613b07565b506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff0219169083151502179055506060820151816002019081610d839190613b07565b50905050600581908060018154018082558091505060019003905f5260205f2090600302015f909190919091505f820151815f019081610dc39190613b07565b506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff0219169083151502179055506060820151816002019081610e3f9190613b07565b5050508573ffffffffffffffffffffffffffffffffffffffff167fe253ed8255fe5723a22412bf5804ee9034911e408cdbfe8547438f23ef23103586868686604051610e8e9493929190613a8f565b60405180910390a2505050505050565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb4ab1646040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f08573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f2c9190613adc565b73ffffffffffffffffffffffffffffffffffffffff16610f4a612a8f565b73ffffffffffffffffffffffffffffffffffffffff1614610f97576040517ff75c676f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60035f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff1661101b576040517f27b434e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160146101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f9821f051eb616938dcfef57fac817566f3954f1ed18aa52b2916921cb2bacc6960405160405180910390a250565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb4ab1646040518163ffffffff1660e01b8152600401602060405180830381865afa158015611123573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111479190613adc565b73ffffffffffffffffffffffffffffffffffffffff16611165612a8f565b73ffffffffffffffffffffffffffffffffffffffff16146111b2576040517ff75c676f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111bb81612be5565b50565b600681815481106111cd575f80fd5b905f5260205f2090600302015f91509050805f0180546111ec90613794565b80601f016020809104026020016040519081016040528092919081815260200182805461121890613794565b80156112635780601f1061123a57610100808354040283529160200191611263565b820191905f5260205f20905b81548152906001019060200180831161124657829003601f168201915b505050505090806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16908060020180546112b090613794565b80601f01602080910402602001604051908101604052809291908181526020018280546112dc90613794565b80156113275780601f106112fe57610100808354040283529160200191611327565b820191905f5260205f20905b81548152906001019060200180831161130a57829003601f168201915b5050505050905084565b60045f61133c612a8f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff166113bc576040517f3f148bdd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60045f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff16611440576040517f8789d78900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838360045f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f01918261148e92919061395b565b50818160045f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060020191826114de92919061395b565b505f5f90505b6006805490508110156115dd578573ffffffffffffffffffffffffffffffffffffffff166006828154811061151c5761151b613a28565b5b905f5260205f2090600302016001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036115d05784846006838154811061157c5761157b613a28565b5b905f5260205f2090600302015f01918261159792919061395b565b508282600683815481106115ae576115ad613a28565b5b905f5260205f20906003020160020191826115ca92919061395b565b506115dd565b80806001019150506114e4565b508473ffffffffffffffffffffffffffffffffffffffff167f0966d5f4d49182394f8f66be9e93db3b0305879db3a22cce2895c3ead22ed7538585858560405161162a9493929190613a8f565b60405180910390a25050505050565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606005805480602002602001604051908101604052809291908181526020015f905b82821015611840578382905f5260205f2090600302016040518060800160405290815f820180546116b190613794565b80601f01602080910402602001604051908101604052809291908181526020018280546116dd90613794565b80156117285780601f106116ff57610100808354040283529160200191611728565b820191905f5260205f20905b81548152906001019060200180831161170b57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff161515151581526020016002820180546117b190613794565b80601f01602080910402602001604051908101604052809291908181526020018280546117dd90613794565b80156118285780601f106117ff57610100808354040283529160200191611828565b820191905f5260205f20905b81548152906001019060200180831161180b57829003601f168201915b50505050508152505081526020019060010190611681565b50505050905090565b5f5f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff169050919050565b600581815481106118a9575f80fd5b905f5260205f2090600302015f91509050805f0180546118c890613794565b80601f01602080910402602001604051908101604052809291908181526020018280546118f490613794565b801561193f5780601f106119165761010080835404028352916020019161193f565b820191905f5260205f20905b81548152906001019060200180831161192257829003601f168201915b505050505090806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff169080600201805461198c90613794565b80601f01602080910402602001604051908101604052809291908181526020018280546119b890613794565b8015611a035780601f106119da57610100808354040283529160200191611a03565b820191905f5260205f20905b8154815290600101906020018083116119e657829003601f168201915b5050505050905084565b611a15612e80565b60045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff16611a99576040517f8789d78900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f82018054611af090613794565b80601f0160208091040260200160405190810160405280929190818152602001828054611b1c90613794565b8015611b675780601f10611b3e57610100808354040283529160200191611b67565b820191905f5260205f20905b815481529060010190602001808311611b4a57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff16151515158152602001600282018054611bf090613794565b80601f0160208091040260200160405190810160405280929190818152602001828054611c1c90613794565b8015611c675780601f10611c3e57610100808354040283529160200191611c67565b820191905f5260205f20905b815481529060010190602001808311611c4a57829003601f168201915b5050505050815250509050919050565b606060045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206002018054611cc490613794565b80601f0160208091040260200160405190810160405280929190818152602001828054611cf090613794565b8015611d3b5780601f10611d1257610100808354040283529160200191611d3b565b820191905f5260205f20905b815481529060010190602001808311611d1e57829003601f168201915b50505050509050919050565b5f60045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff169050919050565b60035f611da8612a8f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff16611e28576040517ff75c676f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60045f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff1615611ead576040517f4f576a3200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f604051806080016040528086868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081526020018773ffffffffffffffffffffffffffffffffffffffff16815260200160011515815260200184848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081525090508060045f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f019081611fc19190613b07565b506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff021916908315150217905550606082015181600201908161203d9190613b07565b50905050600681908060018154018082558091505060019003905f5260205f2090600302015f909190919091505f820151815f01908161207d9190613b07565b506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff02191690831515021790555060608201518160020190816120f99190613b07565b5050508573ffffffffffffffffffffffffffffffffffffffff167f9c6f19aa0cf3f6a0d4fdbd9269f4a794835bf59c3c7561af88f025740ef3cb77868686866040516121489493929190613a8f565b60405180910390a2505050505050565b612160612ebe565b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff166121e4576040517f27b434e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f8201805461223b90613794565b80601f016020809104026020016040519081016040528092919081815260200182805461226790613794565b80156122b25780601f10612289576101008083540402835291602001916122b2565b820191905f5260205f20905b81548152906001019060200180831161229557829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff1615151515815260200160028201805461233b90613794565b80601f016020809104026020016040519081016040528092919081815260200182805461236790613794565b80156123b25780601f10612389576101008083540402835291602001916123b2565b820191905f5260205f20905b81548152906001019060200180831161239557829003601f168201915b5050505050815250509050919050565b60606006805480602002602001604051908101604052809291908181526020015f905b828210156125a4578382905f5260205f2090600302016040518060800160405290815f8201805461241590613794565b80601f016020809104026020016040519081016040528092919081815260200182805461244190613794565b801561248c5780601f106124635761010080835404028352916020019161248c565b820191905f5260205f20905b81548152906001019060200180831161246f57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff1615151515815260200160028201805461251590613794565b80601f016020809104026020016040519081016040528092919081815260200182805461254190613794565b801561258c5780601f106125635761010080835404028352916020019161258c565b820191905f5260205f20905b81548152906001019060200180831161256f57829003601f168201915b505050505081525050815260200190600101906123e5565b50505050905090565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb4ab1646040518163ffffffff1660e01b8152600401602060405180830381865afa158015612617573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061263b9190613adc565b73ffffffffffffffffffffffffffffffffffffffff16612659612a8f565b73ffffffffffffffffffffffffffffffffffffffff16146126a6576040517ff75c676f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60045f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff1661272a576040517f8789d78900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160146101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f4287f31e2e9e49d47750bbe8bcdc9848644c0566e597ce529738d63b27b7b99260405160405180910390a250565b5f60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff169050919050565b612826612ebe565b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f8201805461287d90613794565b80601f01602080910402602001604051908101604052809291908181526020018280546128a990613794565b80156128f45780601f106128cb576101008083540402835291602001916128f4565b820191905f5260205f20905b8154815290600101906020018083116128d757829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff1615151515815260200160028201805461297d90613794565b80601f01602080910402602001604051908101604052809291908181526020018280546129a990613794565b80156129f45780601f106129cb576101008083540402835291602001916129f4565b820191905f5260205f20905b8154815290600101906020018083116129d757829003601f168201915b5050505050815250509050919050565b60606001805480602002602001604051908101604052809291908181526020018280548015612a8557602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612a3c575b5050505050905090565b5f612a98612e48565b905090565b5f5f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16612be25760015f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550600181908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f3ef8564460ada92419608d823c014975d98f8104d7d1e68c222967ac6814cd9760405160405180910390a25b50565b5f5f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615612e45575f5f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055505f5f90505b600180549050811015612e00578173ffffffffffffffffffffffffffffffffffffffff1660018281548110612cc357612cc2613a28565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612df3576001808080549050612d189190613c03565b81548110612d2957612d28613a28565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660018281548110612d6557612d64613a28565b5b905f5260205f20015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001805480612dbc57612dbb613c36565b5b600190038181905f5260205f20015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055612e00565b8080600101915050612c8b565b508073ffffffffffffffffffffffffffffffffffffffff167fd2d636efcad0cea42e170256f4c5d8b1cd81e47b855557edaf44014e6cc4cee660405160405180910390a25b50565b5f612e5233611849565b15612e6657601436033560601c9050612e75565b612e6e612e79565b9050612e76565b5b90565b5f33905090565b6040518060800160405280606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f15158152602001606081525090565b6040518060800160405280606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f15158152602001606081525090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f612f2d82612f04565b9050919050565b612f3d81612f23565b8114612f47575f5ffd5b50565b5f81359050612f5881612f34565b92915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f840112612f7f57612f7e612f5e565b5b8235905067ffffffffffffffff811115612f9c57612f9b612f62565b5b602083019150836001820283011115612fb857612fb7612f66565b5b9250929050565b5f5f5f5f5f60608688031215612fd857612fd7612efc565b5b5f612fe588828901612f4a565b955050602086013567ffffffffffffffff81111561300657613005612f00565b5b61301288828901612f6a565b9450945050604086013567ffffffffffffffff81111561303557613034612f00565b5b61304188828901612f6a565b92509250509295509295909350565b5f6020828403121561306557613064612efc565b5b5f61307284828501612f4a565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6130bd8261307b565b6130c78185613085565b93506130d7818560208601613095565b6130e0816130a3565b840191505092915050565b6130f481612f23565b82525050565b5f8115159050919050565b61310e816130fa565b82525050565b5f608083015f8301518482035f86015261312e82826130b3565b915050602083015161314360208601826130eb565b5060408301516131566040860182613105565b506060830151848203606086015261316e82826130b3565b9150508091505092915050565b5f6020820190508181035f8301526131938184613114565b905092915050565b5f819050919050565b6131ad8161319b565b81146131b7575f5ffd5b50565b5f813590506131c8816131a4565b92915050565b5f602082840312156131e3576131e2612efc565b5b5f6131f0848285016131ba565b91505092915050565b5f82825260208201905092915050565b5f6132138261307b565b61321d81856131f9565b935061322d818560208601613095565b613236816130a3565b840191505092915050565b61324a81612f23565b82525050565b613259816130fa565b82525050565b5f6080820190508181035f8301526132778187613209565b90506132866020830186613241565b6132936040830185613250565b81810360608301526132a58184613209565b905095945050505050565b5f819050919050565b5f6132d36132ce6132c984612f04565b6132b0565b612f04565b9050919050565b5f6132e4826132b9565b9050919050565b5f6132f5826132da565b9050919050565b613305816132eb565b82525050565b5f60208201905061331e5f8301846132fc565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f608083015f8301518482035f86015261336782826130b3565b915050602083015161337c60208601826130eb565b50604083015161338f6040860182613105565b50606083015184820360608601526133a782826130b3565b9150508091505092915050565b5f6133bf838361334d565b905092915050565b5f602082019050919050565b5f6133dd82613324565b6133e7818561332e565b9350836020820285016133f98561333e565b805f5b85811015613434578484038952815161341585826133b4565b9450613420836133c7565b925060208a019950506001810190506133fc565b50829750879550505050505092915050565b5f6020820190508181035f83015261345e81846133d3565b905092915050565b5f6020820190506134795f830184613250565b92915050565b5f6020820190508181035f8301526134978184613209565b905092915050565b5f608083015f8301518482035f8601526134b982826130b3565b91505060208301516134ce60208601826130eb565b5060408301516134e16040860182613105565b50606083015184820360608601526134f982826130b3565b9150508091505092915050565b5f6020820190508181035f83015261351e818461349f565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f608083015f8301518482035f86015261356982826130b3565b915050602083015161357e60208601826130eb565b5060408301516135916040860182613105565b50606083015184820360608601526135a982826130b3565b9150508091505092915050565b5f6135c1838361354f565b905092915050565b5f602082019050919050565b5f6135df82613526565b6135e98185613530565b9350836020820285016135fb85613540565b805f5b85811015613636578484038952815161361785826135b6565b9450613622836135c9565b925060208a019950506001810190506135fe565b50829750879550505050505092915050565b5f6020820190508181035f83015261366081846135d5565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f61369c83836130eb565b60208301905092915050565b5f602082019050919050565b5f6136be82613668565b6136c88185613672565b93506136d383613682565b805f5b838110156137035781516136ea8882613691565b97506136f5836136a8565b9250506001810190506136d6565b5085935050505092915050565b5f6020820190508181035f83015261372881846136b4565b905092915050565b5f82905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806137ab57607f821691505b6020821081036137be576137bd613767565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026138207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826137e5565b61382a86836137e5565b95508019841693508086168417925050509392505050565b5f61385c6138576138528461319b565b6132b0565b61319b565b9050919050565b5f819050919050565b61387583613842565b61388961388182613863565b8484546137f1565b825550505050565b5f5f905090565b6138a0613891565b6138ab81848461386c565b505050565b5b818110156138ce576138c35f82613898565b6001810190506138b1565b5050565b601f821115613913576138e4816137c4565b6138ed846137d6565b810160208510156138fc578190505b613910613908856137d6565b8301826138b0565b50505b505050565b5f82821c905092915050565b5f6139335f1984600802613918565b1980831691505092915050565b5f61394b8383613924565b9150826002028217905092915050565b6139658383613730565b67ffffffffffffffff81111561397e5761397d61373a565b5b6139888254613794565b6139938282856138d2565b5f601f8311600181146139c0575f84156139ae578287013590505b6139b88582613940565b865550613a1f565b601f1984166139ce866137c4565b5f5b828110156139f5578489013582556001820191506020850194506020810190506139d0565b86831015613a125784890135613a0e601f891682613924565b8355505b6001600288020188555050505b50505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b828183375f83830152505050565b5f613a6e83856131f9565b9350613a7b838584613a55565b613a84836130a3565b840190509392505050565b5f6040820190508181035f830152613aa8818688613a63565b90508181036020830152613abd818486613a63565b905095945050505050565b5f81519050613ad681612f34565b92915050565b5f60208284031215613af157613af0612efc565b5b5f613afe84828501613ac8565b91505092915050565b613b108261307b565b67ffffffffffffffff811115613b2957613b2861373a565b5b613b338254613794565b613b3e8282856138d2565b5f60209050601f831160018114613b6f575f8415613b5d578287015190505b613b678582613940565b865550613bce565b601f198416613b7d866137c4565b5f5b82811015613ba457848901518255600182019150602085019450602081019050613b7f565b86831015613bc15784890151613bbd601f891682613924565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613c0d8261319b565b9150613c188361319b565b9250828203905081811115613c3057613c2f613bd6565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffdfea264697066735822122008ca8a6de6fde0adb7b39100c01cac7c07b0d14db3d41c1f0aaafac4280a425264736f6c634300081c0033",
}

// KpuManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use KpuManagerMetaData.ABI instead.
var KpuManagerABI = KpuManagerMetaData.ABI

// KpuManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use KpuManagerMetaData.Bin instead.
var KpuManagerBin = KpuManagerMetaData.Bin

// DeployKpuManager deploys a new Ethereum contract, binding an instance of KpuManager to it.
func DeployKpuManager(auth *bind.TransactOpts, backend bind.ContractBackend, _baseAddress common.Address, trustedForwarders []common.Address) (common.Address, *types.Transaction, *KpuManager, error) {
	parsed, err := KpuManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(KpuManagerBin), backend, _baseAddress, trustedForwarders)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &KpuManager{KpuManagerCaller: KpuManagerCaller{contract: contract}, KpuManagerTransactor: KpuManagerTransactor{contract: contract}, KpuManagerFilterer: KpuManagerFilterer{contract: contract}}, nil
}

// KpuManager is an auto generated Go binding around an Ethereum contract.
type KpuManager struct {
	KpuManagerCaller     // Read-only binding to the contract
	KpuManagerTransactor // Write-only binding to the contract
	KpuManagerFilterer   // Log filterer for contract events
}

// KpuManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type KpuManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KpuManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type KpuManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KpuManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KpuManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KpuManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type KpuManagerSession struct {
	Contract     *KpuManager       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KpuManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type KpuManagerCallerSession struct {
	Contract *KpuManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// KpuManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type KpuManagerTransactorSession struct {
	Contract     *KpuManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// KpuManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type KpuManagerRaw struct {
	Contract *KpuManager // Generic contract binding to access the raw methods on
}

// KpuManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type KpuManagerCallerRaw struct {
	Contract *KpuManagerCaller // Generic read-only contract binding to access the raw methods on
}

// KpuManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type KpuManagerTransactorRaw struct {
	Contract *KpuManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewKpuManager creates a new instance of KpuManager, bound to a specific deployed contract.
func NewKpuManager(address common.Address, backend bind.ContractBackend) (*KpuManager, error) {
	contract, err := bindKpuManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &KpuManager{KpuManagerCaller: KpuManagerCaller{contract: contract}, KpuManagerTransactor: KpuManagerTransactor{contract: contract}, KpuManagerFilterer: KpuManagerFilterer{contract: contract}}, nil
}

// NewKpuManagerCaller creates a new read-only instance of KpuManager, bound to a specific deployed contract.
func NewKpuManagerCaller(address common.Address, caller bind.ContractCaller) (*KpuManagerCaller, error) {
	contract, err := bindKpuManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KpuManagerCaller{contract: contract}, nil
}

// NewKpuManagerTransactor creates a new write-only instance of KpuManager, bound to a specific deployed contract.
func NewKpuManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*KpuManagerTransactor, error) {
	contract, err := bindKpuManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KpuManagerTransactor{contract: contract}, nil
}

// NewKpuManagerFilterer creates a new log filterer instance of KpuManager, bound to a specific deployed contract.
func NewKpuManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*KpuManagerFilterer, error) {
	contract, err := bindKpuManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KpuManagerFilterer{contract: contract}, nil
}

// bindKpuManager binds a generic wrapper to an already deployed contract.
func bindKpuManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := KpuManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KpuManager *KpuManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KpuManager.Contract.KpuManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KpuManager *KpuManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KpuManager.Contract.KpuManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KpuManager *KpuManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KpuManager.Contract.KpuManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KpuManager *KpuManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KpuManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KpuManager *KpuManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KpuManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KpuManager *KpuManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KpuManager.Contract.contract.Transact(opts, method, params...)
}

// Base is a free data retrieval call binding the contract method 0x5001f3b5.
//
// Solidity: function base() view returns(address)
func (_KpuManager *KpuManagerCaller) Base(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "base")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Base is a free data retrieval call binding the contract method 0x5001f3b5.
//
// Solidity: function base() view returns(address)
func (_KpuManager *KpuManagerSession) Base() (common.Address, error) {
	return _KpuManager.Contract.Base(&_KpuManager.CallOpts)
}

// Base is a free data retrieval call binding the contract method 0x5001f3b5.
//
// Solidity: function base() view returns(address)
func (_KpuManager *KpuManagerCallerSession) Base() (common.Address, error) {
	return _KpuManager.Contract.Base(&_KpuManager.CallOpts)
}

// GetAllKPUKota is a free data retrieval call binding the contract method 0xb7a3418e.
//
// Solidity: function getAllKPUKota() view returns((string,address,bool,string)[])
func (_KpuManager *KpuManagerCaller) GetAllKPUKota(opts *bind.CallOpts) ([]IKPUManagerKPUKota, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "getAllKPUKota")

	if err != nil {
		return *new([]IKPUManagerKPUKota), err
	}

	out0 := *abi.ConvertType(out[0], new([]IKPUManagerKPUKota)).(*[]IKPUManagerKPUKota)

	return out0, err

}

// GetAllKPUKota is a free data retrieval call binding the contract method 0xb7a3418e.
//
// Solidity: function getAllKPUKota() view returns((string,address,bool,string)[])
func (_KpuManager *KpuManagerSession) GetAllKPUKota() ([]IKPUManagerKPUKota, error) {
	return _KpuManager.Contract.GetAllKPUKota(&_KpuManager.CallOpts)
}

// GetAllKPUKota is a free data retrieval call binding the contract method 0xb7a3418e.
//
// Solidity: function getAllKPUKota() view returns((string,address,bool,string)[])
func (_KpuManager *KpuManagerCallerSession) GetAllKPUKota() ([]IKPUManagerKPUKota, error) {
	return _KpuManager.Contract.GetAllKPUKota(&_KpuManager.CallOpts)
}

// GetAllKPUProvinsi is a free data retrieval call binding the contract method 0x56d35b51.
//
// Solidity: function getAllKPUProvinsi() view returns((string,address,bool,string)[])
func (_KpuManager *KpuManagerCaller) GetAllKPUProvinsi(opts *bind.CallOpts) ([]IKPUManagerKPUProvinsi, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "getAllKPUProvinsi")

	if err != nil {
		return *new([]IKPUManagerKPUProvinsi), err
	}

	out0 := *abi.ConvertType(out[0], new([]IKPUManagerKPUProvinsi)).(*[]IKPUManagerKPUProvinsi)

	return out0, err

}

// GetAllKPUProvinsi is a free data retrieval call binding the contract method 0x56d35b51.
//
// Solidity: function getAllKPUProvinsi() view returns((string,address,bool,string)[])
func (_KpuManager *KpuManagerSession) GetAllKPUProvinsi() ([]IKPUManagerKPUProvinsi, error) {
	return _KpuManager.Contract.GetAllKPUProvinsi(&_KpuManager.CallOpts)
}

// GetAllKPUProvinsi is a free data retrieval call binding the contract method 0x56d35b51.
//
// Solidity: function getAllKPUProvinsi() view returns((string,address,bool,string)[])
func (_KpuManager *KpuManagerCallerSession) GetAllKPUProvinsi() ([]IKPUManagerKPUProvinsi, error) {
	return _KpuManager.Contract.GetAllKPUProvinsi(&_KpuManager.CallOpts)
}

// GetKpuKotaByAddress is a free data retrieval call binding the contract method 0x6fee7d58.
//
// Solidity: function getKpuKotaByAddress(address Address) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerCaller) GetKpuKotaByAddress(opts *bind.CallOpts, Address common.Address) (IKPUManagerKPUKota, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "getKpuKotaByAddress", Address)

	if err != nil {
		return *new(IKPUManagerKPUKota), err
	}

	out0 := *abi.ConvertType(out[0], new(IKPUManagerKPUKota)).(*IKPUManagerKPUKota)

	return out0, err

}

// GetKpuKotaByAddress is a free data retrieval call binding the contract method 0x6fee7d58.
//
// Solidity: function getKpuKotaByAddress(address Address) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerSession) GetKpuKotaByAddress(Address common.Address) (IKPUManagerKPUKota, error) {
	return _KpuManager.Contract.GetKpuKotaByAddress(&_KpuManager.CallOpts, Address)
}

// GetKpuKotaByAddress is a free data retrieval call binding the contract method 0x6fee7d58.
//
// Solidity: function getKpuKotaByAddress(address Address) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerCallerSession) GetKpuKotaByAddress(Address common.Address) (IKPUManagerKPUKota, error) {
	return _KpuManager.Contract.GetKpuKotaByAddress(&_KpuManager.CallOpts, Address)
}

// GetKpuKotaRegion is a free data retrieval call binding the contract method 0x74c80380.
//
// Solidity: function getKpuKotaRegion(address kpuAddress) view returns(string)
func (_KpuManager *KpuManagerCaller) GetKpuKotaRegion(opts *bind.CallOpts, kpuAddress common.Address) (string, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "getKpuKotaRegion", kpuAddress)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetKpuKotaRegion is a free data retrieval call binding the contract method 0x74c80380.
//
// Solidity: function getKpuKotaRegion(address kpuAddress) view returns(string)
func (_KpuManager *KpuManagerSession) GetKpuKotaRegion(kpuAddress common.Address) (string, error) {
	return _KpuManager.Contract.GetKpuKotaRegion(&_KpuManager.CallOpts, kpuAddress)
}

// GetKpuKotaRegion is a free data retrieval call binding the contract method 0x74c80380.
//
// Solidity: function getKpuKotaRegion(address kpuAddress) view returns(string)
func (_KpuManager *KpuManagerCallerSession) GetKpuKotaRegion(kpuAddress common.Address) (string, error) {
	return _KpuManager.Contract.GetKpuKotaRegion(&_KpuManager.CallOpts, kpuAddress)
}

// GetKpuProvinsiByAddress is a free data retrieval call binding the contract method 0x9424ab90.
//
// Solidity: function getKpuProvinsiByAddress(address Address) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerCaller) GetKpuProvinsiByAddress(opts *bind.CallOpts, Address common.Address) (IKPUManagerKPUProvinsi, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "getKpuProvinsiByAddress", Address)

	if err != nil {
		return *new(IKPUManagerKPUProvinsi), err
	}

	out0 := *abi.ConvertType(out[0], new(IKPUManagerKPUProvinsi)).(*IKPUManagerKPUProvinsi)

	return out0, err

}

// GetKpuProvinsiByAddress is a free data retrieval call binding the contract method 0x9424ab90.
//
// Solidity: function getKpuProvinsiByAddress(address Address) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerSession) GetKpuProvinsiByAddress(Address common.Address) (IKPUManagerKPUProvinsi, error) {
	return _KpuManager.Contract.GetKpuProvinsiByAddress(&_KpuManager.CallOpts, Address)
}

// GetKpuProvinsiByAddress is a free data retrieval call binding the contract method 0x9424ab90.
//
// Solidity: function getKpuProvinsiByAddress(address Address) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerCallerSession) GetKpuProvinsiByAddress(Address common.Address) (IKPUManagerKPUProvinsi, error) {
	return _KpuManager.Contract.GetKpuProvinsiByAddress(&_KpuManager.CallOpts, Address)
}

// GetTrustedForwarders is a free data retrieval call binding the contract method 0xff7196c8.
//
// Solidity: function getTrustedForwarders() view returns(address[])
func (_KpuManager *KpuManagerCaller) GetTrustedForwarders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "getTrustedForwarders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetTrustedForwarders is a free data retrieval call binding the contract method 0xff7196c8.
//
// Solidity: function getTrustedForwarders() view returns(address[])
func (_KpuManager *KpuManagerSession) GetTrustedForwarders() ([]common.Address, error) {
	return _KpuManager.Contract.GetTrustedForwarders(&_KpuManager.CallOpts)
}

// GetTrustedForwarders is a free data retrieval call binding the contract method 0xff7196c8.
//
// Solidity: function getTrustedForwarders() view returns(address[])
func (_KpuManager *KpuManagerCallerSession) GetTrustedForwarders() ([]common.Address, error) {
	return _KpuManager.Contract.GetTrustedForwarders(&_KpuManager.CallOpts)
}

// IsKPUKota is a free data retrieval call binding the contract method 0x75a4352f.
//
// Solidity: function isKPUKota(address kpuAddress) view returns(bool)
func (_KpuManager *KpuManagerCaller) IsKPUKota(opts *bind.CallOpts, kpuAddress common.Address) (bool, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "isKPUKota", kpuAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsKPUKota is a free data retrieval call binding the contract method 0x75a4352f.
//
// Solidity: function isKPUKota(address kpuAddress) view returns(bool)
func (_KpuManager *KpuManagerSession) IsKPUKota(kpuAddress common.Address) (bool, error) {
	return _KpuManager.Contract.IsKPUKota(&_KpuManager.CallOpts, kpuAddress)
}

// IsKPUKota is a free data retrieval call binding the contract method 0x75a4352f.
//
// Solidity: function isKPUKota(address kpuAddress) view returns(bool)
func (_KpuManager *KpuManagerCallerSession) IsKPUKota(kpuAddress common.Address) (bool, error) {
	return _KpuManager.Contract.IsKPUKota(&_KpuManager.CallOpts, kpuAddress)
}

// IsKPUProvinsi is a free data retrieval call binding the contract method 0xdf3aae0b.
//
// Solidity: function isKPUProvinsi(address kpuAddress) view returns(bool)
func (_KpuManager *KpuManagerCaller) IsKPUProvinsi(opts *bind.CallOpts, kpuAddress common.Address) (bool, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "isKPUProvinsi", kpuAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsKPUProvinsi is a free data retrieval call binding the contract method 0xdf3aae0b.
//
// Solidity: function isKPUProvinsi(address kpuAddress) view returns(bool)
func (_KpuManager *KpuManagerSession) IsKPUProvinsi(kpuAddress common.Address) (bool, error) {
	return _KpuManager.Contract.IsKPUProvinsi(&_KpuManager.CallOpts, kpuAddress)
}

// IsKPUProvinsi is a free data retrieval call binding the contract method 0xdf3aae0b.
//
// Solidity: function isKPUProvinsi(address kpuAddress) view returns(bool)
func (_KpuManager *KpuManagerCallerSession) IsKPUProvinsi(kpuAddress common.Address) (bool, error) {
	return _KpuManager.Contract.IsKPUProvinsi(&_KpuManager.CallOpts, kpuAddress)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_KpuManager *KpuManagerCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_KpuManager *KpuManagerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _KpuManager.Contract.IsTrustedForwarder(&_KpuManager.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_KpuManager *KpuManagerCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _KpuManager.Contract.IsTrustedForwarder(&_KpuManager.CallOpts, forwarder)
}

// KpuKota is a free data retrieval call binding the contract method 0x147d559b.
//
// Solidity: function kpuKota(address addr) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerCaller) KpuKota(opts *bind.CallOpts, addr common.Address) (IKPUManagerKPUKota, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "kpuKota", addr)

	if err != nil {
		return *new(IKPUManagerKPUKota), err
	}

	out0 := *abi.ConvertType(out[0], new(IKPUManagerKPUKota)).(*IKPUManagerKPUKota)

	return out0, err

}

// KpuKota is a free data retrieval call binding the contract method 0x147d559b.
//
// Solidity: function kpuKota(address addr) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerSession) KpuKota(addr common.Address) (IKPUManagerKPUKota, error) {
	return _KpuManager.Contract.KpuKota(&_KpuManager.CallOpts, addr)
}

// KpuKota is a free data retrieval call binding the contract method 0x147d559b.
//
// Solidity: function kpuKota(address addr) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerCallerSession) KpuKota(addr common.Address) (IKPUManagerKPUKota, error) {
	return _KpuManager.Contract.KpuKota(&_KpuManager.CallOpts, addr)
}

// KpuKotaAddressesArray is a free data retrieval call binding the contract method 0x4bcb1b0f.
//
// Solidity: function kpuKotaAddressesArray(uint256 ) view returns(string name, address Address, bool isActive, string region)
func (_KpuManager *KpuManagerCaller) KpuKotaAddressesArray(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Name     string
	Address  common.Address
	IsActive bool
	Region   string
}, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "kpuKotaAddressesArray", arg0)

	outstruct := new(struct {
		Name     string
		Address  common.Address
		IsActive bool
		Region   string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Name = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Address = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.IsActive = *abi.ConvertType(out[2], new(bool)).(*bool)
	outstruct.Region = *abi.ConvertType(out[3], new(string)).(*string)

	return *outstruct, err

}

// KpuKotaAddressesArray is a free data retrieval call binding the contract method 0x4bcb1b0f.
//
// Solidity: function kpuKotaAddressesArray(uint256 ) view returns(string name, address Address, bool isActive, string region)
func (_KpuManager *KpuManagerSession) KpuKotaAddressesArray(arg0 *big.Int) (struct {
	Name     string
	Address  common.Address
	IsActive bool
	Region   string
}, error) {
	return _KpuManager.Contract.KpuKotaAddressesArray(&_KpuManager.CallOpts, arg0)
}

// KpuKotaAddressesArray is a free data retrieval call binding the contract method 0x4bcb1b0f.
//
// Solidity: function kpuKotaAddressesArray(uint256 ) view returns(string name, address Address, bool isActive, string region)
func (_KpuManager *KpuManagerCallerSession) KpuKotaAddressesArray(arg0 *big.Int) (struct {
	Name     string
	Address  common.Address
	IsActive bool
	Region   string
}, error) {
	return _KpuManager.Contract.KpuKotaAddressesArray(&_KpuManager.CallOpts, arg0)
}

// KpuProvinsi is a free data retrieval call binding the contract method 0xf9cdd556.
//
// Solidity: function kpuProvinsi(address addr) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerCaller) KpuProvinsi(opts *bind.CallOpts, addr common.Address) (IKPUManagerKPUProvinsi, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "kpuProvinsi", addr)

	if err != nil {
		return *new(IKPUManagerKPUProvinsi), err
	}

	out0 := *abi.ConvertType(out[0], new(IKPUManagerKPUProvinsi)).(*IKPUManagerKPUProvinsi)

	return out0, err

}

// KpuProvinsi is a free data retrieval call binding the contract method 0xf9cdd556.
//
// Solidity: function kpuProvinsi(address addr) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerSession) KpuProvinsi(addr common.Address) (IKPUManagerKPUProvinsi, error) {
	return _KpuManager.Contract.KpuProvinsi(&_KpuManager.CallOpts, addr)
}

// KpuProvinsi is a free data retrieval call binding the contract method 0xf9cdd556.
//
// Solidity: function kpuProvinsi(address addr) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerCallerSession) KpuProvinsi(addr common.Address) (IKPUManagerKPUProvinsi, error) {
	return _KpuManager.Contract.KpuProvinsi(&_KpuManager.CallOpts, addr)
}

// KpuProvinsiAddressesArray is a free data retrieval call binding the contract method 0x631a4438.
//
// Solidity: function kpuProvinsiAddressesArray(uint256 ) view returns(string name, address Address, bool isActive, string region)
func (_KpuManager *KpuManagerCaller) KpuProvinsiAddressesArray(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Name     string
	Address  common.Address
	IsActive bool
	Region   string
}, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "kpuProvinsiAddressesArray", arg0)

	outstruct := new(struct {
		Name     string
		Address  common.Address
		IsActive bool
		Region   string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Name = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Address = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.IsActive = *abi.ConvertType(out[2], new(bool)).(*bool)
	outstruct.Region = *abi.ConvertType(out[3], new(string)).(*string)

	return *outstruct, err

}

// KpuProvinsiAddressesArray is a free data retrieval call binding the contract method 0x631a4438.
//
// Solidity: function kpuProvinsiAddressesArray(uint256 ) view returns(string name, address Address, bool isActive, string region)
func (_KpuManager *KpuManagerSession) KpuProvinsiAddressesArray(arg0 *big.Int) (struct {
	Name     string
	Address  common.Address
	IsActive bool
	Region   string
}, error) {
	return _KpuManager.Contract.KpuProvinsiAddressesArray(&_KpuManager.CallOpts, arg0)
}

// KpuProvinsiAddressesArray is a free data retrieval call binding the contract method 0x631a4438.
//
// Solidity: function kpuProvinsiAddressesArray(uint256 ) view returns(string name, address Address, bool isActive, string region)
func (_KpuManager *KpuManagerCallerSession) KpuProvinsiAddressesArray(arg0 *big.Int) (struct {
	Name     string
	Address  common.Address
	IsActive bool
	Region   string
}, error) {
	return _KpuManager.Contract.KpuProvinsiAddressesArray(&_KpuManager.CallOpts, arg0)
}

// AddTrustedForwarder is a paid mutator transaction binding the contract method 0x26d00668.
//
// Solidity: function addTrustedForwarder(address forwarder) returns()
func (_KpuManager *KpuManagerTransactor) AddTrustedForwarder(opts *bind.TransactOpts, forwarder common.Address) (*types.Transaction, error) {
	return _KpuManager.contract.Transact(opts, "addTrustedForwarder", forwarder)
}

// AddTrustedForwarder is a paid mutator transaction binding the contract method 0x26d00668.
//
// Solidity: function addTrustedForwarder(address forwarder) returns()
func (_KpuManager *KpuManagerSession) AddTrustedForwarder(forwarder common.Address) (*types.Transaction, error) {
	return _KpuManager.Contract.AddTrustedForwarder(&_KpuManager.TransactOpts, forwarder)
}

// AddTrustedForwarder is a paid mutator transaction binding the contract method 0x26d00668.
//
// Solidity: function addTrustedForwarder(address forwarder) returns()
func (_KpuManager *KpuManagerTransactorSession) AddTrustedForwarder(forwarder common.Address) (*types.Transaction, error) {
	return _KpuManager.Contract.AddTrustedForwarder(&_KpuManager.TransactOpts, forwarder)
}

// DeactivateKPUKota is a paid mutator transaction binding the contract method 0xcea41469.
//
// Solidity: function deactivateKPUKota(address Address) returns()
func (_KpuManager *KpuManagerTransactor) DeactivateKPUKota(opts *bind.TransactOpts, Address common.Address) (*types.Transaction, error) {
	return _KpuManager.contract.Transact(opts, "deactivateKPUKota", Address)
}

// DeactivateKPUKota is a paid mutator transaction binding the contract method 0xcea41469.
//
// Solidity: function deactivateKPUKota(address Address) returns()
func (_KpuManager *KpuManagerSession) DeactivateKPUKota(Address common.Address) (*types.Transaction, error) {
	return _KpuManager.Contract.DeactivateKPUKota(&_KpuManager.TransactOpts, Address)
}

// DeactivateKPUKota is a paid mutator transaction binding the contract method 0xcea41469.
//
// Solidity: function deactivateKPUKota(address Address) returns()
func (_KpuManager *KpuManagerTransactorSession) DeactivateKPUKota(Address common.Address) (*types.Transaction, error) {
	return _KpuManager.Contract.DeactivateKPUKota(&_KpuManager.TransactOpts, Address)
}

// DeactivateKPUProvinsi is a paid mutator transaction binding the contract method 0x356b0480.
//
// Solidity: function deactivateKPUProvinsi(address Address) returns()
func (_KpuManager *KpuManagerTransactor) DeactivateKPUProvinsi(opts *bind.TransactOpts, Address common.Address) (*types.Transaction, error) {
	return _KpuManager.contract.Transact(opts, "deactivateKPUProvinsi", Address)
}

// DeactivateKPUProvinsi is a paid mutator transaction binding the contract method 0x356b0480.
//
// Solidity: function deactivateKPUProvinsi(address Address) returns()
func (_KpuManager *KpuManagerSession) DeactivateKPUProvinsi(Address common.Address) (*types.Transaction, error) {
	return _KpuManager.Contract.DeactivateKPUProvinsi(&_KpuManager.TransactOpts, Address)
}

// DeactivateKPUProvinsi is a paid mutator transaction binding the contract method 0x356b0480.
//
// Solidity: function deactivateKPUProvinsi(address Address) returns()
func (_KpuManager *KpuManagerTransactorSession) DeactivateKPUProvinsi(Address common.Address) (*types.Transaction, error) {
	return _KpuManager.Contract.DeactivateKPUProvinsi(&_KpuManager.TransactOpts, Address)
}

// RegisterKPUKota is a paid mutator transaction binding the contract method 0x92423815.
//
// Solidity: function registerKPUKota(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerTransactor) RegisterKPUKota(opts *bind.TransactOpts, Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.contract.Transact(opts, "registerKPUKota", Address, name, region)
}

// RegisterKPUKota is a paid mutator transaction binding the contract method 0x92423815.
//
// Solidity: function registerKPUKota(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerSession) RegisterKPUKota(Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.Contract.RegisterKPUKota(&_KpuManager.TransactOpts, Address, name, region)
}

// RegisterKPUKota is a paid mutator transaction binding the contract method 0x92423815.
//
// Solidity: function registerKPUKota(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerTransactorSession) RegisterKPUKota(Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.Contract.RegisterKPUKota(&_KpuManager.TransactOpts, Address, name, region)
}

// RegisterKPUProvinsi is a paid mutator transaction binding the contract method 0x2db33a2f.
//
// Solidity: function registerKPUProvinsi(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerTransactor) RegisterKPUProvinsi(opts *bind.TransactOpts, Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.contract.Transact(opts, "registerKPUProvinsi", Address, name, region)
}

// RegisterKPUProvinsi is a paid mutator transaction binding the contract method 0x2db33a2f.
//
// Solidity: function registerKPUProvinsi(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerSession) RegisterKPUProvinsi(Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.Contract.RegisterKPUProvinsi(&_KpuManager.TransactOpts, Address, name, region)
}

// RegisterKPUProvinsi is a paid mutator transaction binding the contract method 0x2db33a2f.
//
// Solidity: function registerKPUProvinsi(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerTransactorSession) RegisterKPUProvinsi(Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.Contract.RegisterKPUProvinsi(&_KpuManager.TransactOpts, Address, name, region)
}

// RemoveTrustedForwarder is a paid mutator transaction binding the contract method 0x3751d89c.
//
// Solidity: function removeTrustedForwarder(address forwarder) returns()
func (_KpuManager *KpuManagerTransactor) RemoveTrustedForwarder(opts *bind.TransactOpts, forwarder common.Address) (*types.Transaction, error) {
	return _KpuManager.contract.Transact(opts, "removeTrustedForwarder", forwarder)
}

// RemoveTrustedForwarder is a paid mutator transaction binding the contract method 0x3751d89c.
//
// Solidity: function removeTrustedForwarder(address forwarder) returns()
func (_KpuManager *KpuManagerSession) RemoveTrustedForwarder(forwarder common.Address) (*types.Transaction, error) {
	return _KpuManager.Contract.RemoveTrustedForwarder(&_KpuManager.TransactOpts, forwarder)
}

// RemoveTrustedForwarder is a paid mutator transaction binding the contract method 0x3751d89c.
//
// Solidity: function removeTrustedForwarder(address forwarder) returns()
func (_KpuManager *KpuManagerTransactorSession) RemoveTrustedForwarder(forwarder common.Address) (*types.Transaction, error) {
	return _KpuManager.Contract.RemoveTrustedForwarder(&_KpuManager.TransactOpts, forwarder)
}

// UpdateKPUKota is a paid mutator transaction binding the contract method 0x4da1b97a.
//
// Solidity: function updateKPUKota(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerTransactor) UpdateKPUKota(opts *bind.TransactOpts, Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.contract.Transact(opts, "updateKPUKota", Address, name, region)
}

// UpdateKPUKota is a paid mutator transaction binding the contract method 0x4da1b97a.
//
// Solidity: function updateKPUKota(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerSession) UpdateKPUKota(Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.Contract.UpdateKPUKota(&_KpuManager.TransactOpts, Address, name, region)
}

// UpdateKPUKota is a paid mutator transaction binding the contract method 0x4da1b97a.
//
// Solidity: function updateKPUKota(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerTransactorSession) UpdateKPUKota(Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.Contract.UpdateKPUKota(&_KpuManager.TransactOpts, Address, name, region)
}

// UpdateKPUProvinsi is a paid mutator transaction binding the contract method 0x02819b99.
//
// Solidity: function updateKPUProvinsi(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerTransactor) UpdateKPUProvinsi(opts *bind.TransactOpts, Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.contract.Transact(opts, "updateKPUProvinsi", Address, name, region)
}

// UpdateKPUProvinsi is a paid mutator transaction binding the contract method 0x02819b99.
//
// Solidity: function updateKPUProvinsi(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerSession) UpdateKPUProvinsi(Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.Contract.UpdateKPUProvinsi(&_KpuManager.TransactOpts, Address, name, region)
}

// UpdateKPUProvinsi is a paid mutator transaction binding the contract method 0x02819b99.
//
// Solidity: function updateKPUProvinsi(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerTransactorSession) UpdateKPUProvinsi(Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.Contract.UpdateKPUProvinsi(&_KpuManager.TransactOpts, Address, name, region)
}

// KpuManagerKPUKotaDeactivatedIterator is returned from FilterKPUKotaDeactivated and is used to iterate over the raw logs and unpacked data for KPUKotaDeactivated events raised by the KpuManager contract.
type KpuManagerKPUKotaDeactivatedIterator struct {
	Event *KpuManagerKPUKotaDeactivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KpuManagerKPUKotaDeactivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KpuManagerKPUKotaDeactivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KpuManagerKPUKotaDeactivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KpuManagerKPUKotaDeactivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KpuManagerKPUKotaDeactivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KpuManagerKPUKotaDeactivated represents a KPUKotaDeactivated event raised by the KpuManager contract.
type KpuManagerKPUKotaDeactivated struct {
	Address common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterKPUKotaDeactivated is a free log retrieval operation binding the contract event 0x4287f31e2e9e49d47750bbe8bcdc9848644c0566e597ce529738d63b27b7b992.
//
// Solidity: event KPUKotaDeactivated(address indexed Address)
func (_KpuManager *KpuManagerFilterer) FilterKPUKotaDeactivated(opts *bind.FilterOpts, Address []common.Address) (*KpuManagerKPUKotaDeactivatedIterator, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.FilterLogs(opts, "KPUKotaDeactivated", AddressRule)
	if err != nil {
		return nil, err
	}
	return &KpuManagerKPUKotaDeactivatedIterator{contract: _KpuManager.contract, event: "KPUKotaDeactivated", logs: logs, sub: sub}, nil
}

// WatchKPUKotaDeactivated is a free log subscription operation binding the contract event 0x4287f31e2e9e49d47750bbe8bcdc9848644c0566e597ce529738d63b27b7b992.
//
// Solidity: event KPUKotaDeactivated(address indexed Address)
func (_KpuManager *KpuManagerFilterer) WatchKPUKotaDeactivated(opts *bind.WatchOpts, sink chan<- *KpuManagerKPUKotaDeactivated, Address []common.Address) (event.Subscription, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.WatchLogs(opts, "KPUKotaDeactivated", AddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KpuManagerKPUKotaDeactivated)
				if err := _KpuManager.contract.UnpackLog(event, "KPUKotaDeactivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKPUKotaDeactivated is a log parse operation binding the contract event 0x4287f31e2e9e49d47750bbe8bcdc9848644c0566e597ce529738d63b27b7b992.
//
// Solidity: event KPUKotaDeactivated(address indexed Address)
func (_KpuManager *KpuManagerFilterer) ParseKPUKotaDeactivated(log types.Log) (*KpuManagerKPUKotaDeactivated, error) {
	event := new(KpuManagerKPUKotaDeactivated)
	if err := _KpuManager.contract.UnpackLog(event, "KPUKotaDeactivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KpuManagerKPUKotaRegisteredIterator is returned from FilterKPUKotaRegistered and is used to iterate over the raw logs and unpacked data for KPUKotaRegistered events raised by the KpuManager contract.
type KpuManagerKPUKotaRegisteredIterator struct {
	Event *KpuManagerKPUKotaRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KpuManagerKPUKotaRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KpuManagerKPUKotaRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KpuManagerKPUKotaRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KpuManagerKPUKotaRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KpuManagerKPUKotaRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KpuManagerKPUKotaRegistered represents a KPUKotaRegistered event raised by the KpuManager contract.
type KpuManagerKPUKotaRegistered struct {
	Address common.Address
	Name    string
	Region  string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterKPUKotaRegistered is a free log retrieval operation binding the contract event 0x9c6f19aa0cf3f6a0d4fdbd9269f4a794835bf59c3c7561af88f025740ef3cb77.
//
// Solidity: event KPUKotaRegistered(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) FilterKPUKotaRegistered(opts *bind.FilterOpts, Address []common.Address) (*KpuManagerKPUKotaRegisteredIterator, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.FilterLogs(opts, "KPUKotaRegistered", AddressRule)
	if err != nil {
		return nil, err
	}
	return &KpuManagerKPUKotaRegisteredIterator{contract: _KpuManager.contract, event: "KPUKotaRegistered", logs: logs, sub: sub}, nil
}

// WatchKPUKotaRegistered is a free log subscription operation binding the contract event 0x9c6f19aa0cf3f6a0d4fdbd9269f4a794835bf59c3c7561af88f025740ef3cb77.
//
// Solidity: event KPUKotaRegistered(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) WatchKPUKotaRegistered(opts *bind.WatchOpts, sink chan<- *KpuManagerKPUKotaRegistered, Address []common.Address) (event.Subscription, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.WatchLogs(opts, "KPUKotaRegistered", AddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KpuManagerKPUKotaRegistered)
				if err := _KpuManager.contract.UnpackLog(event, "KPUKotaRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKPUKotaRegistered is a log parse operation binding the contract event 0x9c6f19aa0cf3f6a0d4fdbd9269f4a794835bf59c3c7561af88f025740ef3cb77.
//
// Solidity: event KPUKotaRegistered(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) ParseKPUKotaRegistered(log types.Log) (*KpuManagerKPUKotaRegistered, error) {
	event := new(KpuManagerKPUKotaRegistered)
	if err := _KpuManager.contract.UnpackLog(event, "KPUKotaRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KpuManagerKPUKotaUpdatedIterator is returned from FilterKPUKotaUpdated and is used to iterate over the raw logs and unpacked data for KPUKotaUpdated events raised by the KpuManager contract.
type KpuManagerKPUKotaUpdatedIterator struct {
	Event *KpuManagerKPUKotaUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KpuManagerKPUKotaUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KpuManagerKPUKotaUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KpuManagerKPUKotaUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KpuManagerKPUKotaUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KpuManagerKPUKotaUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KpuManagerKPUKotaUpdated represents a KPUKotaUpdated event raised by the KpuManager contract.
type KpuManagerKPUKotaUpdated struct {
	Address common.Address
	Name    string
	Region  string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterKPUKotaUpdated is a free log retrieval operation binding the contract event 0x0966d5f4d49182394f8f66be9e93db3b0305879db3a22cce2895c3ead22ed753.
//
// Solidity: event KPUKotaUpdated(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) FilterKPUKotaUpdated(opts *bind.FilterOpts, Address []common.Address) (*KpuManagerKPUKotaUpdatedIterator, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.FilterLogs(opts, "KPUKotaUpdated", AddressRule)
	if err != nil {
		return nil, err
	}
	return &KpuManagerKPUKotaUpdatedIterator{contract: _KpuManager.contract, event: "KPUKotaUpdated", logs: logs, sub: sub}, nil
}

// WatchKPUKotaUpdated is a free log subscription operation binding the contract event 0x0966d5f4d49182394f8f66be9e93db3b0305879db3a22cce2895c3ead22ed753.
//
// Solidity: event KPUKotaUpdated(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) WatchKPUKotaUpdated(opts *bind.WatchOpts, sink chan<- *KpuManagerKPUKotaUpdated, Address []common.Address) (event.Subscription, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.WatchLogs(opts, "KPUKotaUpdated", AddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KpuManagerKPUKotaUpdated)
				if err := _KpuManager.contract.UnpackLog(event, "KPUKotaUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKPUKotaUpdated is a log parse operation binding the contract event 0x0966d5f4d49182394f8f66be9e93db3b0305879db3a22cce2895c3ead22ed753.
//
// Solidity: event KPUKotaUpdated(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) ParseKPUKotaUpdated(log types.Log) (*KpuManagerKPUKotaUpdated, error) {
	event := new(KpuManagerKPUKotaUpdated)
	if err := _KpuManager.contract.UnpackLog(event, "KPUKotaUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KpuManagerKPUProvinsiDeactivatedIterator is returned from FilterKPUProvinsiDeactivated and is used to iterate over the raw logs and unpacked data for KPUProvinsiDeactivated events raised by the KpuManager contract.
type KpuManagerKPUProvinsiDeactivatedIterator struct {
	Event *KpuManagerKPUProvinsiDeactivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KpuManagerKPUProvinsiDeactivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KpuManagerKPUProvinsiDeactivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KpuManagerKPUProvinsiDeactivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KpuManagerKPUProvinsiDeactivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KpuManagerKPUProvinsiDeactivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KpuManagerKPUProvinsiDeactivated represents a KPUProvinsiDeactivated event raised by the KpuManager contract.
type KpuManagerKPUProvinsiDeactivated struct {
	Address common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterKPUProvinsiDeactivated is a free log retrieval operation binding the contract event 0x9821f051eb616938dcfef57fac817566f3954f1ed18aa52b2916921cb2bacc69.
//
// Solidity: event KPUProvinsiDeactivated(address indexed Address)
func (_KpuManager *KpuManagerFilterer) FilterKPUProvinsiDeactivated(opts *bind.FilterOpts, Address []common.Address) (*KpuManagerKPUProvinsiDeactivatedIterator, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.FilterLogs(opts, "KPUProvinsiDeactivated", AddressRule)
	if err != nil {
		return nil, err
	}
	return &KpuManagerKPUProvinsiDeactivatedIterator{contract: _KpuManager.contract, event: "KPUProvinsiDeactivated", logs: logs, sub: sub}, nil
}

// WatchKPUProvinsiDeactivated is a free log subscription operation binding the contract event 0x9821f051eb616938dcfef57fac817566f3954f1ed18aa52b2916921cb2bacc69.
//
// Solidity: event KPUProvinsiDeactivated(address indexed Address)
func (_KpuManager *KpuManagerFilterer) WatchKPUProvinsiDeactivated(opts *bind.WatchOpts, sink chan<- *KpuManagerKPUProvinsiDeactivated, Address []common.Address) (event.Subscription, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.WatchLogs(opts, "KPUProvinsiDeactivated", AddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KpuManagerKPUProvinsiDeactivated)
				if err := _KpuManager.contract.UnpackLog(event, "KPUProvinsiDeactivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKPUProvinsiDeactivated is a log parse operation binding the contract event 0x9821f051eb616938dcfef57fac817566f3954f1ed18aa52b2916921cb2bacc69.
//
// Solidity: event KPUProvinsiDeactivated(address indexed Address)
func (_KpuManager *KpuManagerFilterer) ParseKPUProvinsiDeactivated(log types.Log) (*KpuManagerKPUProvinsiDeactivated, error) {
	event := new(KpuManagerKPUProvinsiDeactivated)
	if err := _KpuManager.contract.UnpackLog(event, "KPUProvinsiDeactivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KpuManagerKPUProvinsiRegisteredIterator is returned from FilterKPUProvinsiRegistered and is used to iterate over the raw logs and unpacked data for KPUProvinsiRegistered events raised by the KpuManager contract.
type KpuManagerKPUProvinsiRegisteredIterator struct {
	Event *KpuManagerKPUProvinsiRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KpuManagerKPUProvinsiRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KpuManagerKPUProvinsiRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KpuManagerKPUProvinsiRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KpuManagerKPUProvinsiRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KpuManagerKPUProvinsiRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KpuManagerKPUProvinsiRegistered represents a KPUProvinsiRegistered event raised by the KpuManager contract.
type KpuManagerKPUProvinsiRegistered struct {
	Address common.Address
	Name    string
	Region  string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterKPUProvinsiRegistered is a free log retrieval operation binding the contract event 0xe253ed8255fe5723a22412bf5804ee9034911e408cdbfe8547438f23ef231035.
//
// Solidity: event KPUProvinsiRegistered(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) FilterKPUProvinsiRegistered(opts *bind.FilterOpts, Address []common.Address) (*KpuManagerKPUProvinsiRegisteredIterator, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.FilterLogs(opts, "KPUProvinsiRegistered", AddressRule)
	if err != nil {
		return nil, err
	}
	return &KpuManagerKPUProvinsiRegisteredIterator{contract: _KpuManager.contract, event: "KPUProvinsiRegistered", logs: logs, sub: sub}, nil
}

// WatchKPUProvinsiRegistered is a free log subscription operation binding the contract event 0xe253ed8255fe5723a22412bf5804ee9034911e408cdbfe8547438f23ef231035.
//
// Solidity: event KPUProvinsiRegistered(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) WatchKPUProvinsiRegistered(opts *bind.WatchOpts, sink chan<- *KpuManagerKPUProvinsiRegistered, Address []common.Address) (event.Subscription, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.WatchLogs(opts, "KPUProvinsiRegistered", AddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KpuManagerKPUProvinsiRegistered)
				if err := _KpuManager.contract.UnpackLog(event, "KPUProvinsiRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKPUProvinsiRegistered is a log parse operation binding the contract event 0xe253ed8255fe5723a22412bf5804ee9034911e408cdbfe8547438f23ef231035.
//
// Solidity: event KPUProvinsiRegistered(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) ParseKPUProvinsiRegistered(log types.Log) (*KpuManagerKPUProvinsiRegistered, error) {
	event := new(KpuManagerKPUProvinsiRegistered)
	if err := _KpuManager.contract.UnpackLog(event, "KPUProvinsiRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KpuManagerKPUProvinsiUpdatedIterator is returned from FilterKPUProvinsiUpdated and is used to iterate over the raw logs and unpacked data for KPUProvinsiUpdated events raised by the KpuManager contract.
type KpuManagerKPUProvinsiUpdatedIterator struct {
	Event *KpuManagerKPUProvinsiUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KpuManagerKPUProvinsiUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KpuManagerKPUProvinsiUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KpuManagerKPUProvinsiUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KpuManagerKPUProvinsiUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KpuManagerKPUProvinsiUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KpuManagerKPUProvinsiUpdated represents a KPUProvinsiUpdated event raised by the KpuManager contract.
type KpuManagerKPUProvinsiUpdated struct {
	Address common.Address
	Name    string
	Region  string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterKPUProvinsiUpdated is a free log retrieval operation binding the contract event 0x12fbd96f82516b91ab18004905e324016dd38b631fed5d3884ef88ebe3ae20e5.
//
// Solidity: event KPUProvinsiUpdated(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) FilterKPUProvinsiUpdated(opts *bind.FilterOpts, Address []common.Address) (*KpuManagerKPUProvinsiUpdatedIterator, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.FilterLogs(opts, "KPUProvinsiUpdated", AddressRule)
	if err != nil {
		return nil, err
	}
	return &KpuManagerKPUProvinsiUpdatedIterator{contract: _KpuManager.contract, event: "KPUProvinsiUpdated", logs: logs, sub: sub}, nil
}

// WatchKPUProvinsiUpdated is a free log subscription operation binding the contract event 0x12fbd96f82516b91ab18004905e324016dd38b631fed5d3884ef88ebe3ae20e5.
//
// Solidity: event KPUProvinsiUpdated(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) WatchKPUProvinsiUpdated(opts *bind.WatchOpts, sink chan<- *KpuManagerKPUProvinsiUpdated, Address []common.Address) (event.Subscription, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.WatchLogs(opts, "KPUProvinsiUpdated", AddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KpuManagerKPUProvinsiUpdated)
				if err := _KpuManager.contract.UnpackLog(event, "KPUProvinsiUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKPUProvinsiUpdated is a log parse operation binding the contract event 0x12fbd96f82516b91ab18004905e324016dd38b631fed5d3884ef88ebe3ae20e5.
//
// Solidity: event KPUProvinsiUpdated(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) ParseKPUProvinsiUpdated(log types.Log) (*KpuManagerKPUProvinsiUpdated, error) {
	event := new(KpuManagerKPUProvinsiUpdated)
	if err := _KpuManager.contract.UnpackLog(event, "KPUProvinsiUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KpuManagerTrustedForwarderAddedIterator is returned from FilterTrustedForwarderAdded and is used to iterate over the raw logs and unpacked data for TrustedForwarderAdded events raised by the KpuManager contract.
type KpuManagerTrustedForwarderAddedIterator struct {
	Event *KpuManagerTrustedForwarderAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KpuManagerTrustedForwarderAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KpuManagerTrustedForwarderAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KpuManagerTrustedForwarderAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KpuManagerTrustedForwarderAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KpuManagerTrustedForwarderAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KpuManagerTrustedForwarderAdded represents a TrustedForwarderAdded event raised by the KpuManager contract.
type KpuManagerTrustedForwarderAdded struct {
	Forwarder common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterTrustedForwarderAdded is a free log retrieval operation binding the contract event 0x3ef8564460ada92419608d823c014975d98f8104d7d1e68c222967ac6814cd97.
//
// Solidity: event TrustedForwarderAdded(address indexed forwarder)
func (_KpuManager *KpuManagerFilterer) FilterTrustedForwarderAdded(opts *bind.FilterOpts, forwarder []common.Address) (*KpuManagerTrustedForwarderAddedIterator, error) {

	var forwarderRule []interface{}
	for _, forwarderItem := range forwarder {
		forwarderRule = append(forwarderRule, forwarderItem)
	}

	logs, sub, err := _KpuManager.contract.FilterLogs(opts, "TrustedForwarderAdded", forwarderRule)
	if err != nil {
		return nil, err
	}
	return &KpuManagerTrustedForwarderAddedIterator{contract: _KpuManager.contract, event: "TrustedForwarderAdded", logs: logs, sub: sub}, nil
}

// WatchTrustedForwarderAdded is a free log subscription operation binding the contract event 0x3ef8564460ada92419608d823c014975d98f8104d7d1e68c222967ac6814cd97.
//
// Solidity: event TrustedForwarderAdded(address indexed forwarder)
func (_KpuManager *KpuManagerFilterer) WatchTrustedForwarderAdded(opts *bind.WatchOpts, sink chan<- *KpuManagerTrustedForwarderAdded, forwarder []common.Address) (event.Subscription, error) {

	var forwarderRule []interface{}
	for _, forwarderItem := range forwarder {
		forwarderRule = append(forwarderRule, forwarderItem)
	}

	logs, sub, err := _KpuManager.contract.WatchLogs(opts, "TrustedForwarderAdded", forwarderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KpuManagerTrustedForwarderAdded)
				if err := _KpuManager.contract.UnpackLog(event, "TrustedForwarderAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTrustedForwarderAdded is a log parse operation binding the contract event 0x3ef8564460ada92419608d823c014975d98f8104d7d1e68c222967ac6814cd97.
//
// Solidity: event TrustedForwarderAdded(address indexed forwarder)
func (_KpuManager *KpuManagerFilterer) ParseTrustedForwarderAdded(log types.Log) (*KpuManagerTrustedForwarderAdded, error) {
	event := new(KpuManagerTrustedForwarderAdded)
	if err := _KpuManager.contract.UnpackLog(event, "TrustedForwarderAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KpuManagerTrustedForwarderRemovedIterator is returned from FilterTrustedForwarderRemoved and is used to iterate over the raw logs and unpacked data for TrustedForwarderRemoved events raised by the KpuManager contract.
type KpuManagerTrustedForwarderRemovedIterator struct {
	Event *KpuManagerTrustedForwarderRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KpuManagerTrustedForwarderRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KpuManagerTrustedForwarderRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KpuManagerTrustedForwarderRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KpuManagerTrustedForwarderRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KpuManagerTrustedForwarderRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KpuManagerTrustedForwarderRemoved represents a TrustedForwarderRemoved event raised by the KpuManager contract.
type KpuManagerTrustedForwarderRemoved struct {
	Forwarder common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterTrustedForwarderRemoved is a free log retrieval operation binding the contract event 0xd2d636efcad0cea42e170256f4c5d8b1cd81e47b855557edaf44014e6cc4cee6.
//
// Solidity: event TrustedForwarderRemoved(address indexed forwarder)
func (_KpuManager *KpuManagerFilterer) FilterTrustedForwarderRemoved(opts *bind.FilterOpts, forwarder []common.Address) (*KpuManagerTrustedForwarderRemovedIterator, error) {

	var forwarderRule []interface{}
	for _, forwarderItem := range forwarder {
		forwarderRule = append(forwarderRule, forwarderItem)
	}

	logs, sub, err := _KpuManager.contract.FilterLogs(opts, "TrustedForwarderRemoved", forwarderRule)
	if err != nil {
		return nil, err
	}
	return &KpuManagerTrustedForwarderRemovedIterator{contract: _KpuManager.contract, event: "TrustedForwarderRemoved", logs: logs, sub: sub}, nil
}

// WatchTrustedForwarderRemoved is a free log subscription operation binding the contract event 0xd2d636efcad0cea42e170256f4c5d8b1cd81e47b855557edaf44014e6cc4cee6.
//
// Solidity: event TrustedForwarderRemoved(address indexed forwarder)
func (_KpuManager *KpuManagerFilterer) WatchTrustedForwarderRemoved(opts *bind.WatchOpts, sink chan<- *KpuManagerTrustedForwarderRemoved, forwarder []common.Address) (event.Subscription, error) {

	var forwarderRule []interface{}
	for _, forwarderItem := range forwarder {
		forwarderRule = append(forwarderRule, forwarderItem)
	}

	logs, sub, err := _KpuManager.contract.WatchLogs(opts, "TrustedForwarderRemoved", forwarderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KpuManagerTrustedForwarderRemoved)
				if err := _KpuManager.contract.UnpackLog(event, "TrustedForwarderRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTrustedForwarderRemoved is a log parse operation binding the contract event 0xd2d636efcad0cea42e170256f4c5d8b1cd81e47b855557edaf44014e6cc4cee6.
//
// Solidity: event TrustedForwarderRemoved(address indexed forwarder)
func (_KpuManager *KpuManagerFilterer) ParseTrustedForwarderRemoved(log types.Log) (*KpuManagerTrustedForwarderRemoved, error) {
	event := new(KpuManagerTrustedForwarderRemoved)
	if err := _KpuManager.contract.UnpackLog(event, "TrustedForwarderRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
