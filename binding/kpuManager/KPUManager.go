// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package kpuManager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IKPUManagerKPUKota is an auto generated low-level Go binding around an user-defined struct.
type IKPUManagerKPUKota struct {
	Name     string
	Address  common.Address
	IsActive bool
	Region   string
}

// IKPUManagerKPUProvinsi is an auto generated low-level Go binding around an user-defined struct.
type IKPUManagerKPUProvinsi struct {
	Name     string
	Address  common.Address
	IsActive bool
	Region   string
}

// KpuManagerMetaData contains all meta data concerning the KpuManager contract.
var KpuManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"KPUKotaAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KPUKotaNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KPUNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KPUProvinsiAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KPUProvinsiNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyKpuKota\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyKpuProvinsi\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"}],\"name\":\"KPUKotaDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"KPUKotaRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"KPUKotaUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"}],\"name\":\"KPUProvinsiDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"KPUProvinsiRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"KPUProvinsiUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"contractIVotechainBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"}],\"name\":\"deactivateKPUKota\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"}],\"name\":\"deactivateKPUProvinsi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllKPUKota\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"internalType\":\"structIKPUManager.KPUKota[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllKPUProvinsi\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"internalType\":\"structIKPUManager.KPUProvinsi[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"}],\"name\":\"getKpuKotaByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"internalType\":\"structIKPUManager.KPUKota\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kpuAddress\",\"type\":\"address\"}],\"name\":\"getKpuKotaRegion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"}],\"name\":\"getKpuProvinsiByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"internalType\":\"structIKPUManager.KPUProvinsi\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kpuAddress\",\"type\":\"address\"}],\"name\":\"isKPUKota\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kpuAddress\",\"type\":\"address\"}],\"name\":\"isKPUProvinsi\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"kpuKota\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"internalType\":\"structIKPUManager.KPUKota\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kpuKotaAddressesArray\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"kpuProvinsi\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"internalType\":\"structIKPUManager.KPUProvinsi\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kpuProvinsiAddressesArray\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"registerKPUKota\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"registerKPUProvinsi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"updateKPUKota\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"updateKPUProvinsi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f5ffd5b50604051613499380380613499833981810160405281019061003191906100d4565b805f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100ff565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100a38261007a565b9050919050565b6100b381610099565b81146100bd575f5ffd5b50565b5f815190506100ce816100aa565b92915050565b5f602082840312156100e9576100e8610076565b5b5f6100f6848285016100c0565b91505092915050565b61338d8061010c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610114575f3560e01c80636fee7d58116100a05780639424ab901161006f5780639424ab9014610306578063b7a3418e14610336578063cea4146914610354578063df3aae0b14610370578063f9cdd556146103a057610114565b80636fee7d581461025a57806374c803801461028a57806375a4352f146102ba57806392423815146102ea57610114565b80634bcb1b0f116100e75780634bcb1b0f1461019c5780634da1b97a146101cf5780635001f3b5146101eb57806356d35b5114610209578063631a44381461022757610114565b806302819b9914610118578063147d559b146101345780632db33a2f14610164578063356b048014610180575b5f5ffd5b610132600480360381019061012d9190612808565b6103d0565b005b61014e60048036038101906101499190612899565b6106d1565b60405161015b91906129c4565b60405180910390f35b61017e60048036038101906101799190612808565b6108b7565b005b61019a60048036038101906101959190612899565b610cd8565b005b6101b660048036038101906101b19190612a17565b610eeb565b6040516101c69493929190612aa8565b60405180910390f35b6101e960048036038101906101e49190612808565b61105e565b005b6101f361135f565b6040516102009190612b54565b60405180910390f35b610211611383565b60405161021e9190612c8f565b60405180910390f35b610241600480360381019061023c9190612a17565b61156e565b6040516102519493929190612aa8565b60405180910390f35b610274600480360381019061026f9190612899565b6116e1565b60405161028191906129c4565b60405180910390f35b6102a4600480360381019061029f9190612899565b61194b565b6040516102b19190612caf565b60405180910390f35b6102d460048036038101906102cf9190612899565b611a1b565b6040516102e19190612ccf565b60405180910390f35b61030460048036038101906102ff9190612808565b611a71565b005b610320600480360381019061031b9190612899565b611e25565b60405161032d9190612d4f565b60405180910390f35b61033e61208f565b60405161034b9190612e91565b60405180910390f35b61036e60048036038101906103699190612899565b61227a565b005b61038a60048036038101906103859190612899565b61248d565b6040516103979190612ccf565b60405180910390f35b6103ba60048036038101906103b59190612899565b6124e3565b6040516103c79190612d4f565b60405180910390f35b60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff16610454576040517ff75c676f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff166104d8576040517f27b434e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838360015f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f0191826105269291906130dc565b50818160015f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060020191826105769291906130dc565b505f5f90505b600380549050811015610675578573ffffffffffffffffffffffffffffffffffffffff16600382815481106105b4576105b36131a9565b5b905f5260205f2090600302016001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361066857848460038381548110610614576106136131a9565b5b905f5260205f2090600302015f01918261062f9291906130dc565b50828260038381548110610646576106456131a9565b5b905f5260205f20906003020160020191826106629291906130dc565b50610675565b808060010191505061057c565b508473ffffffffffffffffffffffffffffffffffffffff167f12fbd96f82516b91ab18004905e324016dd38b631fed5d3884ef88ebe3ae20e5858585856040516106c29493929190613210565b60405180910390a25050505050565b6106d96126c9565b60025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f8201805461073090612f15565b80601f016020809104026020016040519081016040528092919081815260200182805461075c90612f15565b80156107a75780601f1061077e576101008083540402835291602001916107a7565b820191905f5260205f20905b81548152906001019060200180831161078a57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff1615151515815260200160028201805461083090612f15565b80601f016020809104026020016040519081016040528092919081815260200182805461085c90612f15565b80156108a75780601f1061087e576101008083540402835291602001916108a7565b820191905f5260205f20905b81548152906001019060200180831161088a57829003601f168201915b5050505050815250509050919050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb4ab1646040518163ffffffff1660e01b8152600401602060405180830381865afa158015610920573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610944919061325d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109a8576040517ff75c676f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff1615610a2d576040517f6fed5b9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f604051806080016040528086868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081526020018773ffffffffffffffffffffffffffffffffffffffff16815260200160011515815260200184848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081525090508060015f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f019081610b419190613288565b506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff0219169083151502179055506060820151816002019081610bbd9190613288565b50905050600381908060018154018082558091505060019003905f5260205f2090600302015f909190919091505f820151815f019081610bfd9190613288565b506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff0219169083151502179055506060820151816002019081610c799190613288565b5050508573ffffffffffffffffffffffffffffffffffffffff167fe253ed8255fe5723a22412bf5804ee9034911e408cdbfe8547438f23ef23103586868686604051610cc89493929190613210565b60405180910390a2505050505050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb4ab1646040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d41573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d65919061325d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dc9576040517ff75c676f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff16610e4d576040517f27b434e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160146101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f9821f051eb616938dcfef57fac817566f3954f1ed18aa52b2916921cb2bacc6960405160405180910390a250565b60048181548110610efa575f80fd5b905f5260205f2090600302015f91509050805f018054610f1990612f15565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4590612f15565b8015610f905780601f10610f6757610100808354040283529160200191610f90565b820191905f5260205f20905b815481529060010190602001808311610f7357829003601f168201915b505050505090806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff1690806002018054610fdd90612f15565b80601f016020809104026020016040519081016040528092919081815260200182805461100990612f15565b80156110545780601f1061102b57610100808354040283529160200191611054565b820191905f5260205f20905b81548152906001019060200180831161103757829003601f168201915b5050505050905084565b60025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff166110e2576040517f3f148bdd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff16611166576040517f8789d78900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838360025f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f0191826111b49291906130dc565b50818160025f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060020191826112049291906130dc565b505f5f90505b600480549050811015611303578573ffffffffffffffffffffffffffffffffffffffff1660048281548110611242576112416131a9565b5b905f5260205f2090600302016001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036112f6578484600483815481106112a2576112a16131a9565b5b905f5260205f2090600302015f0191826112bd9291906130dc565b508282600483815481106112d4576112d36131a9565b5b905f5260205f20906003020160020191826112f09291906130dc565b50611303565b808060010191505061120a565b508473ffffffffffffffffffffffffffffffffffffffff167f0966d5f4d49182394f8f66be9e93db3b0305879db3a22cce2895c3ead22ed753858585856040516113509493929190613210565b60405180910390a25050505050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606003805480602002602001604051908101604052809291908181526020015f905b82821015611565578382905f5260205f2090600302016040518060800160405290815f820180546113d690612f15565b80601f016020809104026020016040519081016040528092919081815260200182805461140290612f15565b801561144d5780601f106114245761010080835404028352916020019161144d565b820191905f5260205f20905b81548152906001019060200180831161143057829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff161515151581526020016002820180546114d690612f15565b80601f016020809104026020016040519081016040528092919081815260200182805461150290612f15565b801561154d5780601f106115245761010080835404028352916020019161154d565b820191905f5260205f20905b81548152906001019060200180831161153057829003601f168201915b505050505081525050815260200190600101906113a6565b50505050905090565b6003818154811061157d575f80fd5b905f5260205f2090600302015f91509050805f01805461159c90612f15565b80601f01602080910402602001604051908101604052809291908181526020018280546115c890612f15565b80156116135780601f106115ea57610100808354040283529160200191611613565b820191905f5260205f20905b8154815290600101906020018083116115f657829003601f168201915b505050505090806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff169080600201805461166090612f15565b80601f016020809104026020016040519081016040528092919081815260200182805461168c90612f15565b80156116d75780601f106116ae576101008083540402835291602001916116d7565b820191905f5260205f20905b8154815290600101906020018083116116ba57829003601f168201915b5050505050905084565b6116e96126c9565b60025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff1661176d576040517f8789d78900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f820180546117c490612f15565b80601f01602080910402602001604051908101604052809291908181526020018280546117f090612f15565b801561183b5780601f106118125761010080835404028352916020019161183b565b820191905f5260205f20905b81548152906001019060200180831161181e57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff161515151581526020016002820180546118c490612f15565b80601f01602080910402602001604051908101604052809291908181526020018280546118f090612f15565b801561193b5780601f106119125761010080835404028352916020019161193b565b820191905f5260205f20905b81548152906001019060200180831161191e57829003601f168201915b5050505050815250509050919050565b606060025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600201805461199890612f15565b80601f01602080910402602001604051908101604052809291908181526020018280546119c490612f15565b8015611a0f5780601f106119e657610100808354040283529160200191611a0f565b820191905f5260205f20905b8154815290600101906020018083116119f257829003601f168201915b50505050509050919050565b5f60025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff169050919050565b60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff16611af5576040517ff75c676f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff1615611b7a576040517f4f576a3200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f604051806080016040528086868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081526020018773ffffffffffffffffffffffffffffffffffffffff16815260200160011515815260200184848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081525090508060025f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f019081611c8e9190613288565b506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff0219169083151502179055506060820151816002019081611d0a9190613288565b50905050600481908060018154018082558091505060019003905f5260205f2090600302015f909190919091505f820151815f019081611d4a9190613288565b506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff0219169083151502179055506060820151816002019081611dc69190613288565b5050508573ffffffffffffffffffffffffffffffffffffffff167f9c6f19aa0cf3f6a0d4fdbd9269f4a794835bf59c3c7561af88f025740ef3cb7786868686604051611e159493929190613210565b60405180910390a2505050505050565b611e2d612707565b60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff16611eb1576040517f27b434e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f82018054611f0890612f15565b80601f0160208091040260200160405190810160405280929190818152602001828054611f3490612f15565b8015611f7f5780601f10611f5657610100808354040283529160200191611f7f565b820191905f5260205f20905b815481529060010190602001808311611f6257829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff1615151515815260200160028201805461200890612f15565b80601f016020809104026020016040519081016040528092919081815260200182805461203490612f15565b801561207f5780601f106120565761010080835404028352916020019161207f565b820191905f5260205f20905b81548152906001019060200180831161206257829003601f168201915b5050505050815250509050919050565b60606004805480602002602001604051908101604052809291908181526020015f905b82821015612271578382905f5260205f2090600302016040518060800160405290815f820180546120e290612f15565b80601f016020809104026020016040519081016040528092919081815260200182805461210e90612f15565b80156121595780601f1061213057610100808354040283529160200191612159565b820191905f5260205f20905b81548152906001019060200180831161213c57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff161515151581526020016002820180546121e290612f15565b80601f016020809104026020016040519081016040528092919081815260200182805461220e90612f15565b80156122595780601f1061223057610100808354040283529160200191612259565b820191905f5260205f20905b81548152906001019060200180831161223c57829003601f168201915b505050505081525050815260200190600101906120b2565b50505050905090565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb4ab1646040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122e3573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612307919061325d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461236b576040517ff75c676f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff166123ef576040517f8789d78900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160146101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f4287f31e2e9e49d47750bbe8bcdc9848644c0566e597ce529738d63b27b7b99260405160405180910390a250565b5f60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010160149054906101000a900460ff169050919050565b6124eb612707565b60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f8201805461254290612f15565b80601f016020809104026020016040519081016040528092919081815260200182805461256e90612f15565b80156125b95780601f10612590576101008083540402835291602001916125b9565b820191905f5260205f20905b81548152906001019060200180831161259c57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff1615151515815260200160028201805461264290612f15565b80601f016020809104026020016040519081016040528092919081815260200182805461266e90612f15565b80156126b95780601f10612690576101008083540402835291602001916126b9565b820191905f5260205f20905b81548152906001019060200180831161269c57829003601f168201915b5050505050815250509050919050565b6040518060800160405280606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f15158152602001606081525090565b6040518060800160405280606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f15158152602001606081525090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6127768261274d565b9050919050565b6127868161276c565b8114612790575f5ffd5b50565b5f813590506127a18161277d565b92915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f8401126127c8576127c76127a7565b5b8235905067ffffffffffffffff8111156127e5576127e46127ab565b5b602083019150836001820283011115612801576128006127af565b5b9250929050565b5f5f5f5f5f6060868803121561282157612820612745565b5b5f61282e88828901612793565b955050602086013567ffffffffffffffff81111561284f5761284e612749565b5b61285b888289016127b3565b9450945050604086013567ffffffffffffffff81111561287e5761287d612749565b5b61288a888289016127b3565b92509250509295509295909350565b5f602082840312156128ae576128ad612745565b5b5f6128bb84828501612793565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f612906826128c4565b61291081856128ce565b93506129208185602086016128de565b612929816128ec565b840191505092915050565b61293d8161276c565b82525050565b5f8115159050919050565b61295781612943565b82525050565b5f608083015f8301518482035f86015261297782826128fc565b915050602083015161298c6020860182612934565b50604083015161299f604086018261294e565b50606083015184820360608601526129b782826128fc565b9150508091505092915050565b5f6020820190508181035f8301526129dc818461295d565b905092915050565b5f819050919050565b6129f6816129e4565b8114612a00575f5ffd5b50565b5f81359050612a11816129ed565b92915050565b5f60208284031215612a2c57612a2b612745565b5b5f612a3984828501612a03565b91505092915050565b5f82825260208201905092915050565b5f612a5c826128c4565b612a668185612a42565b9350612a768185602086016128de565b612a7f816128ec565b840191505092915050565b612a938161276c565b82525050565b612aa281612943565b82525050565b5f6080820190508181035f830152612ac08187612a52565b9050612acf6020830186612a8a565b612adc6040830185612a99565b8181036060830152612aee8184612a52565b905095945050505050565b5f819050919050565b5f612b1c612b17612b128461274d565b612af9565b61274d565b9050919050565b5f612b2d82612b02565b9050919050565b5f612b3e82612b23565b9050919050565b612b4e81612b34565b82525050565b5f602082019050612b675f830184612b45565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f608083015f8301518482035f860152612bb082826128fc565b9150506020830151612bc56020860182612934565b506040830151612bd8604086018261294e565b5060608301518482036060860152612bf082826128fc565b9150508091505092915050565b5f612c088383612b96565b905092915050565b5f602082019050919050565b5f612c2682612b6d565b612c308185612b77565b935083602082028501612c4285612b87565b805f5b85811015612c7d5784840389528151612c5e8582612bfd565b9450612c6983612c10565b925060208a01995050600181019050612c45565b50829750879550505050505092915050565b5f6020820190508181035f830152612ca78184612c1c565b905092915050565b5f6020820190508181035f830152612cc78184612a52565b905092915050565b5f602082019050612ce25f830184612a99565b92915050565b5f608083015f8301518482035f860152612d0282826128fc565b9150506020830151612d176020860182612934565b506040830151612d2a604086018261294e565b5060608301518482036060860152612d4282826128fc565b9150508091505092915050565b5f6020820190508181035f830152612d678184612ce8565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f608083015f8301518482035f860152612db282826128fc565b9150506020830151612dc76020860182612934565b506040830151612dda604086018261294e565b5060608301518482036060860152612df282826128fc565b9150508091505092915050565b5f612e0a8383612d98565b905092915050565b5f602082019050919050565b5f612e2882612d6f565b612e328185612d79565b935083602082028501612e4485612d89565b805f5b85811015612e7f5784840389528151612e608582612dff565b9450612e6b83612e12565b925060208a01995050600181019050612e47565b50829750879550505050505092915050565b5f6020820190508181035f830152612ea98184612e1e565b905092915050565b5f82905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680612f2c57607f821691505b602082108103612f3f57612f3e612ee8565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302612fa17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612f66565b612fab8683612f66565b95508019841693508086168417925050509392505050565b5f612fdd612fd8612fd3846129e4565b612af9565b6129e4565b9050919050565b5f819050919050565b612ff683612fc3565b61300a61300282612fe4565b848454612f72565b825550505050565b5f5f905090565b613021613012565b61302c818484612fed565b505050565b5b8181101561304f576130445f82613019565b600181019050613032565b5050565b601f8211156130945761306581612f45565b61306e84612f57565b8101602085101561307d578190505b61309161308985612f57565b830182613031565b50505b505050565b5f82821c905092915050565b5f6130b45f1984600802613099565b1980831691505092915050565b5f6130cc83836130a5565b9150826002028217905092915050565b6130e68383612eb1565b67ffffffffffffffff8111156130ff576130fe612ebb565b5b6131098254612f15565b613114828285613053565b5f601f831160018114613141575f841561312f578287013590505b61313985826130c1565b8655506131a0565b601f19841661314f86612f45565b5f5b8281101561317657848901358255600182019150602085019450602081019050613151565b86831015613193578489013561318f601f8916826130a5565b8355505b6001600288020188555050505b50505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b828183375f83830152505050565b5f6131ef8385612a42565b93506131fc8385846131d6565b613205836128ec565b840190509392505050565b5f6040820190508181035f8301526132298186886131e4565b9050818103602083015261323e8184866131e4565b905095945050505050565b5f815190506132578161277d565b92915050565b5f6020828403121561327257613271612745565b5b5f61327f84828501613249565b91505092915050565b613291826128c4565b67ffffffffffffffff8111156132aa576132a9612ebb565b5b6132b48254612f15565b6132bf828285613053565b5f60209050601f8311600181146132f0575f84156132de578287015190505b6132e885826130c1565b86555061334f565b601f1984166132fe86612f45565b5f5b8281101561332557848901518255600182019150602085019450602081019050613300565b86831015613342578489015161333e601f8916826130a5565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220a9d25affa58f0c48672b3f0ef67e62e874574a4919f86cc6614f65973357b80264736f6c634300081c0033",
}

// KpuManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use KpuManagerMetaData.ABI instead.
var KpuManagerABI = KpuManagerMetaData.ABI

// KpuManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use KpuManagerMetaData.Bin instead.
var KpuManagerBin = KpuManagerMetaData.Bin

// DeployKpuManager deploys a new Ethereum contract, binding an instance of KpuManager to it.
func DeployKpuManager(auth *bind.TransactOpts, backend bind.ContractBackend, _baseAddress common.Address) (common.Address, *types.Transaction, *KpuManager, error) {
	parsed, err := KpuManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(KpuManagerBin), backend, _baseAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &KpuManager{KpuManagerCaller: KpuManagerCaller{contract: contract}, KpuManagerTransactor: KpuManagerTransactor{contract: contract}, KpuManagerFilterer: KpuManagerFilterer{contract: contract}}, nil
}

// KpuManager is an auto generated Go binding around an Ethereum contract.
type KpuManager struct {
	KpuManagerCaller     // Read-only binding to the contract
	KpuManagerTransactor // Write-only binding to the contract
	KpuManagerFilterer   // Log filterer for contract events
}

// KpuManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type KpuManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KpuManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type KpuManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KpuManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KpuManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KpuManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type KpuManagerSession struct {
	Contract     *KpuManager       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// KpuManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type KpuManagerCallerSession struct {
	Contract *KpuManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// KpuManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type KpuManagerTransactorSession struct {
	Contract     *KpuManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// KpuManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type KpuManagerRaw struct {
	Contract *KpuManager // Generic contract binding to access the raw methods on
}

// KpuManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type KpuManagerCallerRaw struct {
	Contract *KpuManagerCaller // Generic read-only contract binding to access the raw methods on
}

// KpuManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type KpuManagerTransactorRaw struct {
	Contract *KpuManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewKpuManager creates a new instance of KpuManager, bound to a specific deployed contract.
func NewKpuManager(address common.Address, backend bind.ContractBackend) (*KpuManager, error) {
	contract, err := bindKpuManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &KpuManager{KpuManagerCaller: KpuManagerCaller{contract: contract}, KpuManagerTransactor: KpuManagerTransactor{contract: contract}, KpuManagerFilterer: KpuManagerFilterer{contract: contract}}, nil
}

// NewKpuManagerCaller creates a new read-only instance of KpuManager, bound to a specific deployed contract.
func NewKpuManagerCaller(address common.Address, caller bind.ContractCaller) (*KpuManagerCaller, error) {
	contract, err := bindKpuManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KpuManagerCaller{contract: contract}, nil
}

// NewKpuManagerTransactor creates a new write-only instance of KpuManager, bound to a specific deployed contract.
func NewKpuManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*KpuManagerTransactor, error) {
	contract, err := bindKpuManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KpuManagerTransactor{contract: contract}, nil
}

// NewKpuManagerFilterer creates a new log filterer instance of KpuManager, bound to a specific deployed contract.
func NewKpuManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*KpuManagerFilterer, error) {
	contract, err := bindKpuManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KpuManagerFilterer{contract: contract}, nil
}

// bindKpuManager binds a generic wrapper to an already deployed contract.
func bindKpuManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := KpuManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KpuManager *KpuManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KpuManager.Contract.KpuManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KpuManager *KpuManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KpuManager.Contract.KpuManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KpuManager *KpuManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KpuManager.Contract.KpuManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KpuManager *KpuManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KpuManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KpuManager *KpuManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KpuManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KpuManager *KpuManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KpuManager.Contract.contract.Transact(opts, method, params...)
}

// Base is a free data retrieval call binding the contract method 0x5001f3b5.
//
// Solidity: function base() view returns(address)
func (_KpuManager *KpuManagerCaller) Base(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "base")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Base is a free data retrieval call binding the contract method 0x5001f3b5.
//
// Solidity: function base() view returns(address)
func (_KpuManager *KpuManagerSession) Base() (common.Address, error) {
	return _KpuManager.Contract.Base(&_KpuManager.CallOpts)
}

// Base is a free data retrieval call binding the contract method 0x5001f3b5.
//
// Solidity: function base() view returns(address)
func (_KpuManager *KpuManagerCallerSession) Base() (common.Address, error) {
	return _KpuManager.Contract.Base(&_KpuManager.CallOpts)
}

// GetAllKPUKota is a free data retrieval call binding the contract method 0xb7a3418e.
//
// Solidity: function getAllKPUKota() view returns((string,address,bool,string)[])
func (_KpuManager *KpuManagerCaller) GetAllKPUKota(opts *bind.CallOpts) ([]IKPUManagerKPUKota, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "getAllKPUKota")

	if err != nil {
		return *new([]IKPUManagerKPUKota), err
	}

	out0 := *abi.ConvertType(out[0], new([]IKPUManagerKPUKota)).(*[]IKPUManagerKPUKota)

	return out0, err

}

// GetAllKPUKota is a free data retrieval call binding the contract method 0xb7a3418e.
//
// Solidity: function getAllKPUKota() view returns((string,address,bool,string)[])
func (_KpuManager *KpuManagerSession) GetAllKPUKota() ([]IKPUManagerKPUKota, error) {
	return _KpuManager.Contract.GetAllKPUKota(&_KpuManager.CallOpts)
}

// GetAllKPUKota is a free data retrieval call binding the contract method 0xb7a3418e.
//
// Solidity: function getAllKPUKota() view returns((string,address,bool,string)[])
func (_KpuManager *KpuManagerCallerSession) GetAllKPUKota() ([]IKPUManagerKPUKota, error) {
	return _KpuManager.Contract.GetAllKPUKota(&_KpuManager.CallOpts)
}

// GetAllKPUProvinsi is a free data retrieval call binding the contract method 0x56d35b51.
//
// Solidity: function getAllKPUProvinsi() view returns((string,address,bool,string)[])
func (_KpuManager *KpuManagerCaller) GetAllKPUProvinsi(opts *bind.CallOpts) ([]IKPUManagerKPUProvinsi, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "getAllKPUProvinsi")

	if err != nil {
		return *new([]IKPUManagerKPUProvinsi), err
	}

	out0 := *abi.ConvertType(out[0], new([]IKPUManagerKPUProvinsi)).(*[]IKPUManagerKPUProvinsi)

	return out0, err

}

// GetAllKPUProvinsi is a free data retrieval call binding the contract method 0x56d35b51.
//
// Solidity: function getAllKPUProvinsi() view returns((string,address,bool,string)[])
func (_KpuManager *KpuManagerSession) GetAllKPUProvinsi() ([]IKPUManagerKPUProvinsi, error) {
	return _KpuManager.Contract.GetAllKPUProvinsi(&_KpuManager.CallOpts)
}

// GetAllKPUProvinsi is a free data retrieval call binding the contract method 0x56d35b51.
//
// Solidity: function getAllKPUProvinsi() view returns((string,address,bool,string)[])
func (_KpuManager *KpuManagerCallerSession) GetAllKPUProvinsi() ([]IKPUManagerKPUProvinsi, error) {
	return _KpuManager.Contract.GetAllKPUProvinsi(&_KpuManager.CallOpts)
}

// GetKpuKotaByAddress is a free data retrieval call binding the contract method 0x6fee7d58.
//
// Solidity: function getKpuKotaByAddress(address Address) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerCaller) GetKpuKotaByAddress(opts *bind.CallOpts, Address common.Address) (IKPUManagerKPUKota, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "getKpuKotaByAddress", Address)

	if err != nil {
		return *new(IKPUManagerKPUKota), err
	}

	out0 := *abi.ConvertType(out[0], new(IKPUManagerKPUKota)).(*IKPUManagerKPUKota)

	return out0, err

}

// GetKpuKotaByAddress is a free data retrieval call binding the contract method 0x6fee7d58.
//
// Solidity: function getKpuKotaByAddress(address Address) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerSession) GetKpuKotaByAddress(Address common.Address) (IKPUManagerKPUKota, error) {
	return _KpuManager.Contract.GetKpuKotaByAddress(&_KpuManager.CallOpts, Address)
}

// GetKpuKotaByAddress is a free data retrieval call binding the contract method 0x6fee7d58.
//
// Solidity: function getKpuKotaByAddress(address Address) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerCallerSession) GetKpuKotaByAddress(Address common.Address) (IKPUManagerKPUKota, error) {
	return _KpuManager.Contract.GetKpuKotaByAddress(&_KpuManager.CallOpts, Address)
}

// GetKpuKotaRegion is a free data retrieval call binding the contract method 0x74c80380.
//
// Solidity: function getKpuKotaRegion(address kpuAddress) view returns(string)
func (_KpuManager *KpuManagerCaller) GetKpuKotaRegion(opts *bind.CallOpts, kpuAddress common.Address) (string, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "getKpuKotaRegion", kpuAddress)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetKpuKotaRegion is a free data retrieval call binding the contract method 0x74c80380.
//
// Solidity: function getKpuKotaRegion(address kpuAddress) view returns(string)
func (_KpuManager *KpuManagerSession) GetKpuKotaRegion(kpuAddress common.Address) (string, error) {
	return _KpuManager.Contract.GetKpuKotaRegion(&_KpuManager.CallOpts, kpuAddress)
}

// GetKpuKotaRegion is a free data retrieval call binding the contract method 0x74c80380.
//
// Solidity: function getKpuKotaRegion(address kpuAddress) view returns(string)
func (_KpuManager *KpuManagerCallerSession) GetKpuKotaRegion(kpuAddress common.Address) (string, error) {
	return _KpuManager.Contract.GetKpuKotaRegion(&_KpuManager.CallOpts, kpuAddress)
}

// GetKpuProvinsiByAddress is a free data retrieval call binding the contract method 0x9424ab90.
//
// Solidity: function getKpuProvinsiByAddress(address Address) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerCaller) GetKpuProvinsiByAddress(opts *bind.CallOpts, Address common.Address) (IKPUManagerKPUProvinsi, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "getKpuProvinsiByAddress", Address)

	if err != nil {
		return *new(IKPUManagerKPUProvinsi), err
	}

	out0 := *abi.ConvertType(out[0], new(IKPUManagerKPUProvinsi)).(*IKPUManagerKPUProvinsi)

	return out0, err

}

// GetKpuProvinsiByAddress is a free data retrieval call binding the contract method 0x9424ab90.
//
// Solidity: function getKpuProvinsiByAddress(address Address) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerSession) GetKpuProvinsiByAddress(Address common.Address) (IKPUManagerKPUProvinsi, error) {
	return _KpuManager.Contract.GetKpuProvinsiByAddress(&_KpuManager.CallOpts, Address)
}

// GetKpuProvinsiByAddress is a free data retrieval call binding the contract method 0x9424ab90.
//
// Solidity: function getKpuProvinsiByAddress(address Address) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerCallerSession) GetKpuProvinsiByAddress(Address common.Address) (IKPUManagerKPUProvinsi, error) {
	return _KpuManager.Contract.GetKpuProvinsiByAddress(&_KpuManager.CallOpts, Address)
}

// IsKPUKota is a free data retrieval call binding the contract method 0x75a4352f.
//
// Solidity: function isKPUKota(address kpuAddress) view returns(bool)
func (_KpuManager *KpuManagerCaller) IsKPUKota(opts *bind.CallOpts, kpuAddress common.Address) (bool, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "isKPUKota", kpuAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsKPUKota is a free data retrieval call binding the contract method 0x75a4352f.
//
// Solidity: function isKPUKota(address kpuAddress) view returns(bool)
func (_KpuManager *KpuManagerSession) IsKPUKota(kpuAddress common.Address) (bool, error) {
	return _KpuManager.Contract.IsKPUKota(&_KpuManager.CallOpts, kpuAddress)
}

// IsKPUKota is a free data retrieval call binding the contract method 0x75a4352f.
//
// Solidity: function isKPUKota(address kpuAddress) view returns(bool)
func (_KpuManager *KpuManagerCallerSession) IsKPUKota(kpuAddress common.Address) (bool, error) {
	return _KpuManager.Contract.IsKPUKota(&_KpuManager.CallOpts, kpuAddress)
}

// IsKPUProvinsi is a free data retrieval call binding the contract method 0xdf3aae0b.
//
// Solidity: function isKPUProvinsi(address kpuAddress) view returns(bool)
func (_KpuManager *KpuManagerCaller) IsKPUProvinsi(opts *bind.CallOpts, kpuAddress common.Address) (bool, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "isKPUProvinsi", kpuAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsKPUProvinsi is a free data retrieval call binding the contract method 0xdf3aae0b.
//
// Solidity: function isKPUProvinsi(address kpuAddress) view returns(bool)
func (_KpuManager *KpuManagerSession) IsKPUProvinsi(kpuAddress common.Address) (bool, error) {
	return _KpuManager.Contract.IsKPUProvinsi(&_KpuManager.CallOpts, kpuAddress)
}

// IsKPUProvinsi is a free data retrieval call binding the contract method 0xdf3aae0b.
//
// Solidity: function isKPUProvinsi(address kpuAddress) view returns(bool)
func (_KpuManager *KpuManagerCallerSession) IsKPUProvinsi(kpuAddress common.Address) (bool, error) {
	return _KpuManager.Contract.IsKPUProvinsi(&_KpuManager.CallOpts, kpuAddress)
}

// KpuKota is a free data retrieval call binding the contract method 0x147d559b.
//
// Solidity: function kpuKota(address addr) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerCaller) KpuKota(opts *bind.CallOpts, addr common.Address) (IKPUManagerKPUKota, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "kpuKota", addr)

	if err != nil {
		return *new(IKPUManagerKPUKota), err
	}

	out0 := *abi.ConvertType(out[0], new(IKPUManagerKPUKota)).(*IKPUManagerKPUKota)

	return out0, err

}

// KpuKota is a free data retrieval call binding the contract method 0x147d559b.
//
// Solidity: function kpuKota(address addr) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerSession) KpuKota(addr common.Address) (IKPUManagerKPUKota, error) {
	return _KpuManager.Contract.KpuKota(&_KpuManager.CallOpts, addr)
}

// KpuKota is a free data retrieval call binding the contract method 0x147d559b.
//
// Solidity: function kpuKota(address addr) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerCallerSession) KpuKota(addr common.Address) (IKPUManagerKPUKota, error) {
	return _KpuManager.Contract.KpuKota(&_KpuManager.CallOpts, addr)
}

// KpuKotaAddressesArray is a free data retrieval call binding the contract method 0x4bcb1b0f.
//
// Solidity: function kpuKotaAddressesArray(uint256 ) view returns(string name, address Address, bool isActive, string region)
func (_KpuManager *KpuManagerCaller) KpuKotaAddressesArray(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Name     string
	Address  common.Address
	IsActive bool
	Region   string
}, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "kpuKotaAddressesArray", arg0)

	outstruct := new(struct {
		Name     string
		Address  common.Address
		IsActive bool
		Region   string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Name = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Address = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.IsActive = *abi.ConvertType(out[2], new(bool)).(*bool)
	outstruct.Region = *abi.ConvertType(out[3], new(string)).(*string)

	return *outstruct, err

}

// KpuKotaAddressesArray is a free data retrieval call binding the contract method 0x4bcb1b0f.
//
// Solidity: function kpuKotaAddressesArray(uint256 ) view returns(string name, address Address, bool isActive, string region)
func (_KpuManager *KpuManagerSession) KpuKotaAddressesArray(arg0 *big.Int) (struct {
	Name     string
	Address  common.Address
	IsActive bool
	Region   string
}, error) {
	return _KpuManager.Contract.KpuKotaAddressesArray(&_KpuManager.CallOpts, arg0)
}

// KpuKotaAddressesArray is a free data retrieval call binding the contract method 0x4bcb1b0f.
//
// Solidity: function kpuKotaAddressesArray(uint256 ) view returns(string name, address Address, bool isActive, string region)
func (_KpuManager *KpuManagerCallerSession) KpuKotaAddressesArray(arg0 *big.Int) (struct {
	Name     string
	Address  common.Address
	IsActive bool
	Region   string
}, error) {
	return _KpuManager.Contract.KpuKotaAddressesArray(&_KpuManager.CallOpts, arg0)
}

// KpuProvinsi is a free data retrieval call binding the contract method 0xf9cdd556.
//
// Solidity: function kpuProvinsi(address addr) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerCaller) KpuProvinsi(opts *bind.CallOpts, addr common.Address) (IKPUManagerKPUProvinsi, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "kpuProvinsi", addr)

	if err != nil {
		return *new(IKPUManagerKPUProvinsi), err
	}

	out0 := *abi.ConvertType(out[0], new(IKPUManagerKPUProvinsi)).(*IKPUManagerKPUProvinsi)

	return out0, err

}

// KpuProvinsi is a free data retrieval call binding the contract method 0xf9cdd556.
//
// Solidity: function kpuProvinsi(address addr) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerSession) KpuProvinsi(addr common.Address) (IKPUManagerKPUProvinsi, error) {
	return _KpuManager.Contract.KpuProvinsi(&_KpuManager.CallOpts, addr)
}

// KpuProvinsi is a free data retrieval call binding the contract method 0xf9cdd556.
//
// Solidity: function kpuProvinsi(address addr) view returns((string,address,bool,string))
func (_KpuManager *KpuManagerCallerSession) KpuProvinsi(addr common.Address) (IKPUManagerKPUProvinsi, error) {
	return _KpuManager.Contract.KpuProvinsi(&_KpuManager.CallOpts, addr)
}

// KpuProvinsiAddressesArray is a free data retrieval call binding the contract method 0x631a4438.
//
// Solidity: function kpuProvinsiAddressesArray(uint256 ) view returns(string name, address Address, bool isActive, string region)
func (_KpuManager *KpuManagerCaller) KpuProvinsiAddressesArray(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Name     string
	Address  common.Address
	IsActive bool
	Region   string
}, error) {
	var out []interface{}
	err := _KpuManager.contract.Call(opts, &out, "kpuProvinsiAddressesArray", arg0)

	outstruct := new(struct {
		Name     string
		Address  common.Address
		IsActive bool
		Region   string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Name = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Address = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.IsActive = *abi.ConvertType(out[2], new(bool)).(*bool)
	outstruct.Region = *abi.ConvertType(out[3], new(string)).(*string)

	return *outstruct, err

}

// KpuProvinsiAddressesArray is a free data retrieval call binding the contract method 0x631a4438.
//
// Solidity: function kpuProvinsiAddressesArray(uint256 ) view returns(string name, address Address, bool isActive, string region)
func (_KpuManager *KpuManagerSession) KpuProvinsiAddressesArray(arg0 *big.Int) (struct {
	Name     string
	Address  common.Address
	IsActive bool
	Region   string
}, error) {
	return _KpuManager.Contract.KpuProvinsiAddressesArray(&_KpuManager.CallOpts, arg0)
}

// KpuProvinsiAddressesArray is a free data retrieval call binding the contract method 0x631a4438.
//
// Solidity: function kpuProvinsiAddressesArray(uint256 ) view returns(string name, address Address, bool isActive, string region)
func (_KpuManager *KpuManagerCallerSession) KpuProvinsiAddressesArray(arg0 *big.Int) (struct {
	Name     string
	Address  common.Address
	IsActive bool
	Region   string
}, error) {
	return _KpuManager.Contract.KpuProvinsiAddressesArray(&_KpuManager.CallOpts, arg0)
}

// DeactivateKPUKota is a paid mutator transaction binding the contract method 0xcea41469.
//
// Solidity: function deactivateKPUKota(address Address) returns()
func (_KpuManager *KpuManagerTransactor) DeactivateKPUKota(opts *bind.TransactOpts, Address common.Address) (*types.Transaction, error) {
	return _KpuManager.contract.Transact(opts, "deactivateKPUKota", Address)
}

// DeactivateKPUKota is a paid mutator transaction binding the contract method 0xcea41469.
//
// Solidity: function deactivateKPUKota(address Address) returns()
func (_KpuManager *KpuManagerSession) DeactivateKPUKota(Address common.Address) (*types.Transaction, error) {
	return _KpuManager.Contract.DeactivateKPUKota(&_KpuManager.TransactOpts, Address)
}

// DeactivateKPUKota is a paid mutator transaction binding the contract method 0xcea41469.
//
// Solidity: function deactivateKPUKota(address Address) returns()
func (_KpuManager *KpuManagerTransactorSession) DeactivateKPUKota(Address common.Address) (*types.Transaction, error) {
	return _KpuManager.Contract.DeactivateKPUKota(&_KpuManager.TransactOpts, Address)
}

// DeactivateKPUProvinsi is a paid mutator transaction binding the contract method 0x356b0480.
//
// Solidity: function deactivateKPUProvinsi(address Address) returns()
func (_KpuManager *KpuManagerTransactor) DeactivateKPUProvinsi(opts *bind.TransactOpts, Address common.Address) (*types.Transaction, error) {
	return _KpuManager.contract.Transact(opts, "deactivateKPUProvinsi", Address)
}

// DeactivateKPUProvinsi is a paid mutator transaction binding the contract method 0x356b0480.
//
// Solidity: function deactivateKPUProvinsi(address Address) returns()
func (_KpuManager *KpuManagerSession) DeactivateKPUProvinsi(Address common.Address) (*types.Transaction, error) {
	return _KpuManager.Contract.DeactivateKPUProvinsi(&_KpuManager.TransactOpts, Address)
}

// DeactivateKPUProvinsi is a paid mutator transaction binding the contract method 0x356b0480.
//
// Solidity: function deactivateKPUProvinsi(address Address) returns()
func (_KpuManager *KpuManagerTransactorSession) DeactivateKPUProvinsi(Address common.Address) (*types.Transaction, error) {
	return _KpuManager.Contract.DeactivateKPUProvinsi(&_KpuManager.TransactOpts, Address)
}

// RegisterKPUKota is a paid mutator transaction binding the contract method 0x92423815.
//
// Solidity: function registerKPUKota(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerTransactor) RegisterKPUKota(opts *bind.TransactOpts, Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.contract.Transact(opts, "registerKPUKota", Address, name, region)
}

// RegisterKPUKota is a paid mutator transaction binding the contract method 0x92423815.
//
// Solidity: function registerKPUKota(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerSession) RegisterKPUKota(Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.Contract.RegisterKPUKota(&_KpuManager.TransactOpts, Address, name, region)
}

// RegisterKPUKota is a paid mutator transaction binding the contract method 0x92423815.
//
// Solidity: function registerKPUKota(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerTransactorSession) RegisterKPUKota(Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.Contract.RegisterKPUKota(&_KpuManager.TransactOpts, Address, name, region)
}

// RegisterKPUProvinsi is a paid mutator transaction binding the contract method 0x2db33a2f.
//
// Solidity: function registerKPUProvinsi(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerTransactor) RegisterKPUProvinsi(opts *bind.TransactOpts, Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.contract.Transact(opts, "registerKPUProvinsi", Address, name, region)
}

// RegisterKPUProvinsi is a paid mutator transaction binding the contract method 0x2db33a2f.
//
// Solidity: function registerKPUProvinsi(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerSession) RegisterKPUProvinsi(Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.Contract.RegisterKPUProvinsi(&_KpuManager.TransactOpts, Address, name, region)
}

// RegisterKPUProvinsi is a paid mutator transaction binding the contract method 0x2db33a2f.
//
// Solidity: function registerKPUProvinsi(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerTransactorSession) RegisterKPUProvinsi(Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.Contract.RegisterKPUProvinsi(&_KpuManager.TransactOpts, Address, name, region)
}

// UpdateKPUKota is a paid mutator transaction binding the contract method 0x4da1b97a.
//
// Solidity: function updateKPUKota(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerTransactor) UpdateKPUKota(opts *bind.TransactOpts, Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.contract.Transact(opts, "updateKPUKota", Address, name, region)
}

// UpdateKPUKota is a paid mutator transaction binding the contract method 0x4da1b97a.
//
// Solidity: function updateKPUKota(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerSession) UpdateKPUKota(Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.Contract.UpdateKPUKota(&_KpuManager.TransactOpts, Address, name, region)
}

// UpdateKPUKota is a paid mutator transaction binding the contract method 0x4da1b97a.
//
// Solidity: function updateKPUKota(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerTransactorSession) UpdateKPUKota(Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.Contract.UpdateKPUKota(&_KpuManager.TransactOpts, Address, name, region)
}

// UpdateKPUProvinsi is a paid mutator transaction binding the contract method 0x02819b99.
//
// Solidity: function updateKPUProvinsi(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerTransactor) UpdateKPUProvinsi(opts *bind.TransactOpts, Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.contract.Transact(opts, "updateKPUProvinsi", Address, name, region)
}

// UpdateKPUProvinsi is a paid mutator transaction binding the contract method 0x02819b99.
//
// Solidity: function updateKPUProvinsi(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerSession) UpdateKPUProvinsi(Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.Contract.UpdateKPUProvinsi(&_KpuManager.TransactOpts, Address, name, region)
}

// UpdateKPUProvinsi is a paid mutator transaction binding the contract method 0x02819b99.
//
// Solidity: function updateKPUProvinsi(address Address, string name, string region) returns()
func (_KpuManager *KpuManagerTransactorSession) UpdateKPUProvinsi(Address common.Address, name string, region string) (*types.Transaction, error) {
	return _KpuManager.Contract.UpdateKPUProvinsi(&_KpuManager.TransactOpts, Address, name, region)
}

// KpuManagerKPUKotaDeactivatedIterator is returned from FilterKPUKotaDeactivated and is used to iterate over the raw logs and unpacked data for KPUKotaDeactivated events raised by the KpuManager contract.
type KpuManagerKPUKotaDeactivatedIterator struct {
	Event *KpuManagerKPUKotaDeactivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KpuManagerKPUKotaDeactivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KpuManagerKPUKotaDeactivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KpuManagerKPUKotaDeactivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KpuManagerKPUKotaDeactivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KpuManagerKPUKotaDeactivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KpuManagerKPUKotaDeactivated represents a KPUKotaDeactivated event raised by the KpuManager contract.
type KpuManagerKPUKotaDeactivated struct {
	Address common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterKPUKotaDeactivated is a free log retrieval operation binding the contract event 0x4287f31e2e9e49d47750bbe8bcdc9848644c0566e597ce529738d63b27b7b992.
//
// Solidity: event KPUKotaDeactivated(address indexed Address)
func (_KpuManager *KpuManagerFilterer) FilterKPUKotaDeactivated(opts *bind.FilterOpts, Address []common.Address) (*KpuManagerKPUKotaDeactivatedIterator, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.FilterLogs(opts, "KPUKotaDeactivated", AddressRule)
	if err != nil {
		return nil, err
	}
	return &KpuManagerKPUKotaDeactivatedIterator{contract: _KpuManager.contract, event: "KPUKotaDeactivated", logs: logs, sub: sub}, nil
}

// WatchKPUKotaDeactivated is a free log subscription operation binding the contract event 0x4287f31e2e9e49d47750bbe8bcdc9848644c0566e597ce529738d63b27b7b992.
//
// Solidity: event KPUKotaDeactivated(address indexed Address)
func (_KpuManager *KpuManagerFilterer) WatchKPUKotaDeactivated(opts *bind.WatchOpts, sink chan<- *KpuManagerKPUKotaDeactivated, Address []common.Address) (event.Subscription, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.WatchLogs(opts, "KPUKotaDeactivated", AddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KpuManagerKPUKotaDeactivated)
				if err := _KpuManager.contract.UnpackLog(event, "KPUKotaDeactivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKPUKotaDeactivated is a log parse operation binding the contract event 0x4287f31e2e9e49d47750bbe8bcdc9848644c0566e597ce529738d63b27b7b992.
//
// Solidity: event KPUKotaDeactivated(address indexed Address)
func (_KpuManager *KpuManagerFilterer) ParseKPUKotaDeactivated(log types.Log) (*KpuManagerKPUKotaDeactivated, error) {
	event := new(KpuManagerKPUKotaDeactivated)
	if err := _KpuManager.contract.UnpackLog(event, "KPUKotaDeactivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KpuManagerKPUKotaRegisteredIterator is returned from FilterKPUKotaRegistered and is used to iterate over the raw logs and unpacked data for KPUKotaRegistered events raised by the KpuManager contract.
type KpuManagerKPUKotaRegisteredIterator struct {
	Event *KpuManagerKPUKotaRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KpuManagerKPUKotaRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KpuManagerKPUKotaRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KpuManagerKPUKotaRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KpuManagerKPUKotaRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KpuManagerKPUKotaRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KpuManagerKPUKotaRegistered represents a KPUKotaRegistered event raised by the KpuManager contract.
type KpuManagerKPUKotaRegistered struct {
	Address common.Address
	Name    string
	Region  string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterKPUKotaRegistered is a free log retrieval operation binding the contract event 0x9c6f19aa0cf3f6a0d4fdbd9269f4a794835bf59c3c7561af88f025740ef3cb77.
//
// Solidity: event KPUKotaRegistered(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) FilterKPUKotaRegistered(opts *bind.FilterOpts, Address []common.Address) (*KpuManagerKPUKotaRegisteredIterator, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.FilterLogs(opts, "KPUKotaRegistered", AddressRule)
	if err != nil {
		return nil, err
	}
	return &KpuManagerKPUKotaRegisteredIterator{contract: _KpuManager.contract, event: "KPUKotaRegistered", logs: logs, sub: sub}, nil
}

// WatchKPUKotaRegistered is a free log subscription operation binding the contract event 0x9c6f19aa0cf3f6a0d4fdbd9269f4a794835bf59c3c7561af88f025740ef3cb77.
//
// Solidity: event KPUKotaRegistered(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) WatchKPUKotaRegistered(opts *bind.WatchOpts, sink chan<- *KpuManagerKPUKotaRegistered, Address []common.Address) (event.Subscription, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.WatchLogs(opts, "KPUKotaRegistered", AddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KpuManagerKPUKotaRegistered)
				if err := _KpuManager.contract.UnpackLog(event, "KPUKotaRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKPUKotaRegistered is a log parse operation binding the contract event 0x9c6f19aa0cf3f6a0d4fdbd9269f4a794835bf59c3c7561af88f025740ef3cb77.
//
// Solidity: event KPUKotaRegistered(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) ParseKPUKotaRegistered(log types.Log) (*KpuManagerKPUKotaRegistered, error) {
	event := new(KpuManagerKPUKotaRegistered)
	if err := _KpuManager.contract.UnpackLog(event, "KPUKotaRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KpuManagerKPUKotaUpdatedIterator is returned from FilterKPUKotaUpdated and is used to iterate over the raw logs and unpacked data for KPUKotaUpdated events raised by the KpuManager contract.
type KpuManagerKPUKotaUpdatedIterator struct {
	Event *KpuManagerKPUKotaUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KpuManagerKPUKotaUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KpuManagerKPUKotaUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KpuManagerKPUKotaUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KpuManagerKPUKotaUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KpuManagerKPUKotaUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KpuManagerKPUKotaUpdated represents a KPUKotaUpdated event raised by the KpuManager contract.
type KpuManagerKPUKotaUpdated struct {
	Address common.Address
	Name    string
	Region  string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterKPUKotaUpdated is a free log retrieval operation binding the contract event 0x0966d5f4d49182394f8f66be9e93db3b0305879db3a22cce2895c3ead22ed753.
//
// Solidity: event KPUKotaUpdated(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) FilterKPUKotaUpdated(opts *bind.FilterOpts, Address []common.Address) (*KpuManagerKPUKotaUpdatedIterator, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.FilterLogs(opts, "KPUKotaUpdated", AddressRule)
	if err != nil {
		return nil, err
	}
	return &KpuManagerKPUKotaUpdatedIterator{contract: _KpuManager.contract, event: "KPUKotaUpdated", logs: logs, sub: sub}, nil
}

// WatchKPUKotaUpdated is a free log subscription operation binding the contract event 0x0966d5f4d49182394f8f66be9e93db3b0305879db3a22cce2895c3ead22ed753.
//
// Solidity: event KPUKotaUpdated(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) WatchKPUKotaUpdated(opts *bind.WatchOpts, sink chan<- *KpuManagerKPUKotaUpdated, Address []common.Address) (event.Subscription, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.WatchLogs(opts, "KPUKotaUpdated", AddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KpuManagerKPUKotaUpdated)
				if err := _KpuManager.contract.UnpackLog(event, "KPUKotaUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKPUKotaUpdated is a log parse operation binding the contract event 0x0966d5f4d49182394f8f66be9e93db3b0305879db3a22cce2895c3ead22ed753.
//
// Solidity: event KPUKotaUpdated(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) ParseKPUKotaUpdated(log types.Log) (*KpuManagerKPUKotaUpdated, error) {
	event := new(KpuManagerKPUKotaUpdated)
	if err := _KpuManager.contract.UnpackLog(event, "KPUKotaUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KpuManagerKPUProvinsiDeactivatedIterator is returned from FilterKPUProvinsiDeactivated and is used to iterate over the raw logs and unpacked data for KPUProvinsiDeactivated events raised by the KpuManager contract.
type KpuManagerKPUProvinsiDeactivatedIterator struct {
	Event *KpuManagerKPUProvinsiDeactivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KpuManagerKPUProvinsiDeactivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KpuManagerKPUProvinsiDeactivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KpuManagerKPUProvinsiDeactivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KpuManagerKPUProvinsiDeactivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KpuManagerKPUProvinsiDeactivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KpuManagerKPUProvinsiDeactivated represents a KPUProvinsiDeactivated event raised by the KpuManager contract.
type KpuManagerKPUProvinsiDeactivated struct {
	Address common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterKPUProvinsiDeactivated is a free log retrieval operation binding the contract event 0x9821f051eb616938dcfef57fac817566f3954f1ed18aa52b2916921cb2bacc69.
//
// Solidity: event KPUProvinsiDeactivated(address indexed Address)
func (_KpuManager *KpuManagerFilterer) FilterKPUProvinsiDeactivated(opts *bind.FilterOpts, Address []common.Address) (*KpuManagerKPUProvinsiDeactivatedIterator, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.FilterLogs(opts, "KPUProvinsiDeactivated", AddressRule)
	if err != nil {
		return nil, err
	}
	return &KpuManagerKPUProvinsiDeactivatedIterator{contract: _KpuManager.contract, event: "KPUProvinsiDeactivated", logs: logs, sub: sub}, nil
}

// WatchKPUProvinsiDeactivated is a free log subscription operation binding the contract event 0x9821f051eb616938dcfef57fac817566f3954f1ed18aa52b2916921cb2bacc69.
//
// Solidity: event KPUProvinsiDeactivated(address indexed Address)
func (_KpuManager *KpuManagerFilterer) WatchKPUProvinsiDeactivated(opts *bind.WatchOpts, sink chan<- *KpuManagerKPUProvinsiDeactivated, Address []common.Address) (event.Subscription, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.WatchLogs(opts, "KPUProvinsiDeactivated", AddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KpuManagerKPUProvinsiDeactivated)
				if err := _KpuManager.contract.UnpackLog(event, "KPUProvinsiDeactivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKPUProvinsiDeactivated is a log parse operation binding the contract event 0x9821f051eb616938dcfef57fac817566f3954f1ed18aa52b2916921cb2bacc69.
//
// Solidity: event KPUProvinsiDeactivated(address indexed Address)
func (_KpuManager *KpuManagerFilterer) ParseKPUProvinsiDeactivated(log types.Log) (*KpuManagerKPUProvinsiDeactivated, error) {
	event := new(KpuManagerKPUProvinsiDeactivated)
	if err := _KpuManager.contract.UnpackLog(event, "KPUProvinsiDeactivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KpuManagerKPUProvinsiRegisteredIterator is returned from FilterKPUProvinsiRegistered and is used to iterate over the raw logs and unpacked data for KPUProvinsiRegistered events raised by the KpuManager contract.
type KpuManagerKPUProvinsiRegisteredIterator struct {
	Event *KpuManagerKPUProvinsiRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KpuManagerKPUProvinsiRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KpuManagerKPUProvinsiRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KpuManagerKPUProvinsiRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KpuManagerKPUProvinsiRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KpuManagerKPUProvinsiRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KpuManagerKPUProvinsiRegistered represents a KPUProvinsiRegistered event raised by the KpuManager contract.
type KpuManagerKPUProvinsiRegistered struct {
	Address common.Address
	Name    string
	Region  string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterKPUProvinsiRegistered is a free log retrieval operation binding the contract event 0xe253ed8255fe5723a22412bf5804ee9034911e408cdbfe8547438f23ef231035.
//
// Solidity: event KPUProvinsiRegistered(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) FilterKPUProvinsiRegistered(opts *bind.FilterOpts, Address []common.Address) (*KpuManagerKPUProvinsiRegisteredIterator, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.FilterLogs(opts, "KPUProvinsiRegistered", AddressRule)
	if err != nil {
		return nil, err
	}
	return &KpuManagerKPUProvinsiRegisteredIterator{contract: _KpuManager.contract, event: "KPUProvinsiRegistered", logs: logs, sub: sub}, nil
}

// WatchKPUProvinsiRegistered is a free log subscription operation binding the contract event 0xe253ed8255fe5723a22412bf5804ee9034911e408cdbfe8547438f23ef231035.
//
// Solidity: event KPUProvinsiRegistered(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) WatchKPUProvinsiRegistered(opts *bind.WatchOpts, sink chan<- *KpuManagerKPUProvinsiRegistered, Address []common.Address) (event.Subscription, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.WatchLogs(opts, "KPUProvinsiRegistered", AddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KpuManagerKPUProvinsiRegistered)
				if err := _KpuManager.contract.UnpackLog(event, "KPUProvinsiRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKPUProvinsiRegistered is a log parse operation binding the contract event 0xe253ed8255fe5723a22412bf5804ee9034911e408cdbfe8547438f23ef231035.
//
// Solidity: event KPUProvinsiRegistered(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) ParseKPUProvinsiRegistered(log types.Log) (*KpuManagerKPUProvinsiRegistered, error) {
	event := new(KpuManagerKPUProvinsiRegistered)
	if err := _KpuManager.contract.UnpackLog(event, "KPUProvinsiRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KpuManagerKPUProvinsiUpdatedIterator is returned from FilterKPUProvinsiUpdated and is used to iterate over the raw logs and unpacked data for KPUProvinsiUpdated events raised by the KpuManager contract.
type KpuManagerKPUProvinsiUpdatedIterator struct {
	Event *KpuManagerKPUProvinsiUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KpuManagerKPUProvinsiUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KpuManagerKPUProvinsiUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KpuManagerKPUProvinsiUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KpuManagerKPUProvinsiUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KpuManagerKPUProvinsiUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KpuManagerKPUProvinsiUpdated represents a KPUProvinsiUpdated event raised by the KpuManager contract.
type KpuManagerKPUProvinsiUpdated struct {
	Address common.Address
	Name    string
	Region  string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterKPUProvinsiUpdated is a free log retrieval operation binding the contract event 0x12fbd96f82516b91ab18004905e324016dd38b631fed5d3884ef88ebe3ae20e5.
//
// Solidity: event KPUProvinsiUpdated(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) FilterKPUProvinsiUpdated(opts *bind.FilterOpts, Address []common.Address) (*KpuManagerKPUProvinsiUpdatedIterator, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.FilterLogs(opts, "KPUProvinsiUpdated", AddressRule)
	if err != nil {
		return nil, err
	}
	return &KpuManagerKPUProvinsiUpdatedIterator{contract: _KpuManager.contract, event: "KPUProvinsiUpdated", logs: logs, sub: sub}, nil
}

// WatchKPUProvinsiUpdated is a free log subscription operation binding the contract event 0x12fbd96f82516b91ab18004905e324016dd38b631fed5d3884ef88ebe3ae20e5.
//
// Solidity: event KPUProvinsiUpdated(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) WatchKPUProvinsiUpdated(opts *bind.WatchOpts, sink chan<- *KpuManagerKPUProvinsiUpdated, Address []common.Address) (event.Subscription, error) {

	var AddressRule []interface{}
	for _, AddressItem := range Address {
		AddressRule = append(AddressRule, AddressItem)
	}

	logs, sub, err := _KpuManager.contract.WatchLogs(opts, "KPUProvinsiUpdated", AddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KpuManagerKPUProvinsiUpdated)
				if err := _KpuManager.contract.UnpackLog(event, "KPUProvinsiUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseKPUProvinsiUpdated is a log parse operation binding the contract event 0x12fbd96f82516b91ab18004905e324016dd38b631fed5d3884ef88ebe3ae20e5.
//
// Solidity: event KPUProvinsiUpdated(address indexed Address, string name, string region)
func (_KpuManager *KpuManagerFilterer) ParseKPUProvinsiUpdated(log types.Log) (*KpuManagerKPUProvinsiUpdated, error) {
	event := new(KpuManagerKPUProvinsiUpdated)
	if err := _KpuManager.contract.UnpackLog(event, "KPUProvinsiUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
