// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package voterManager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IVoterManagerVoter is an auto generated low-level Go binding around an user-defined struct.
type IVoterManagerVoter struct {
	Nik          string
	VoterAddress common.Address
	HasVoted     bool
	Region       string
	IsRegistered bool
}

// VoterManagerMetaData contains all meta data concerning the VoterManager contract.
var VoterManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_kpuManagerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyVoted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedKPU\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VoterAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VoterNotRegistered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"nik\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"VoterRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_voterNIKByAddresses\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"_voterss\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"nik\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"contractIVotechainBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllVoter\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"nik\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"internalType\":\"structIVoterManager.Voter[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"getVoterByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"nik\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"internalType\":\"structIVoterManager.Voter\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nik\",\"type\":\"string\"}],\"name\":\"getVoterByNIK\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"nik\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"internalType\":\"structIVoterManager.Voter\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"getVoterByRegion\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"nik\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"internalType\":\"structIVoterManager.Voter[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"getVoterNikByAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kpuManager\",\"outputs\":[{\"internalType\":\"contractIKPUManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"markVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nik\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"registerVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voterAddressesArray\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"nik\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"voterNIKByAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nik\",\"type\":\"string\"}],\"name\":\"voters\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"nik\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"internalType\":\"structIVoterManager.Voter\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f5ffd5b50604051612cbe380380612cbe83398181016040528101906100319190610115565b815f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610153565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100e4826100bb565b9050919050565b6100f4816100da565b81146100fe575f5ffd5b50565b5f8151905061010f816100eb565b92915050565b5f5f6040838503121561012b5761012a6100b7565b5b5f61013885828601610101565b925050602061014985828601610101565b9150509250929050565b612b5e806101605f395ff3fe608060405234801561000f575f5ffd5b50600436106100e8575f3560e01c806353fa2e641161008a578063a8fd0cfa11610064578063a8fd0cfa1461029c578063e0d5343b146102cc578063f0416e5f146102fc578063f44f4e141461032c576100e8565b806353fa2e641461020857806389c7e39114610238578063950163131461026c576100e8565b80634a075de2116100c65780634a075de21461016e5780634bdd75851461018a5780635001f3b5146101ba5780635130298f146101d8576100e8565b80632a70ecca146100ec57806334d1d2f21461011c578063407947921461013a575b5f5ffd5b61010660048036038101906101019190611d23565b61034a565b6040516101139190611eb1565b60405180910390f35b610124610594565b6040516101319190611f2c565b60405180910390f35b610154600480360381019061014f919061206d565b6105b9565b60405161016595949392919061211a565b60405180910390f35b610188600480360381019061018391906121a3565b610747565b005b6101a4600480360381019061019f9190612200565b610c8d565b6040516101b19190611eb1565b60405180910390f35b6101c2610f70565b6040516101cf919061224b565b60405180910390f35b6101f260048036038101906101ed9190612200565b610f94565b6040516101ff9190612264565b60405180910390f35b610222600480360381019061021d9190611d23565b6110a0565b60405161022f9190611eb1565b60405180910390f35b610252600480360381019061024d91906122b7565b611284565b60405161026395949392919061211a565b60405180910390f35b61028660048036038101906102819190612200565b611409565b6040516102939190612264565b60405180910390f35b6102b660048036038101906102b19190612200565b6114a4565b6040516102c391906122e2565b60405180910390f35b6102e660048036038101906102e19190611d23565b611638565b6040516102f39190612430565b60405180910390f35b61031660048036038101906103119190612200565b611999565b6040516103239190612264565b60405180910390f35b610334611a66565b6040516103419190612430565b60405180910390f35b610352611c6b565b6003838360405161036492919061247e565b90815260200160405180910390206003015f9054906101000a900460ff166103b8576040517f6f08c58700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600383836040516103ca92919061247e565b90815260200160405180910390206040518060a00160405290815f820180546103f2906124c3565b80601f016020809104026020016040519081016040528092919081815260200182805461041e906124c3565b80156104695780601f1061044057610100808354040283529160200191610469565b820191905f5260205f20905b81548152906001019060200180831161044c57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff161515151581526020016002820180546104f2906124c3565b80601f016020809104026020016040519081016040528092919081815260200182805461051e906124c3565b80156105695780601f1061054057610100808354040283529160200191610569565b820191905f5260205f20905b81548152906001019060200180831161054c57829003601f168201915b50505050508152602001600382015f9054906101000a900460ff161515151581525050905092915050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6003818051602081018201805184825260208301602085012081835280955050505050505f91509050805f0180546105f0906124c3565b80601f016020809104026020016040519081016040528092919081815260200182805461061c906124c3565b80156106675780601f1061063e57610100808354040283529160200191610667565b820191905f5260205f20905b81548152906001019060200180831161064a57829003601f168201915b505050505090806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16908060020180546106b4906124c3565b80601f01602080910402602001604051908101604052809291908181526020018280546106e0906124c3565b801561072b5780601f106107025761010080835404028352916020019161072b565b820191905f5260205f20905b81548152906001019060200180831161070e57829003601f168201915b505050505090806003015f9054906101000a900460ff16905085565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375a4352f336040518263ffffffff1660e01b81526004016107a191906124f3565b602060405180830381865afa1580156107bc573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107e09190612536565b610816576040517fd2b9347c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003838360405161082892919061247e565b90815260200160405180910390206003015f9054906101000a900460ff161561087d576040517f59a1ec4700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2080546108c6906124c3565b9050146108ff576040517f2d42c77200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166374c80380336040518263ffffffff1660e01b815260040161095a91906124f3565b5f60405180830381865afa158015610974573d5f5f3e3d5ffd5b505050506040513d5f823e3d601f19601f8201168201806040525081019061099c91906125cf565b90505f6040518060a0016040528086868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081526020018473ffffffffffffffffffffffffffffffffffffffff1681526020015f151581526020018381526020016001151581525090508060038686604051610a3992919061247e565b90815260200160405180910390205f820151815f019081610a5a91906127ad565b506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff0219169083151502179055506060820151816002019081610ad691906127ad565b506080820151816003015f6101000a81548160ff021916908315150217905550905050848460025f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f209182610b45929190612886565b50600481908060018154018082558091505060019003905f5260205f2090600402015f909190919091505f820151815f019081610b8291906127ad565b506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff0219169083151502179055506060820151816002019081610bfe91906127ad565b506080820151816003015f6101000a81548160ff02191690831515021790555050508273ffffffffffffffffffffffffffffffffffffffff168585604051610c4792919061247e565b60405180910390207fe8bf381bec3899d7c4d98d7e52cfd45dfe7254b2ceafbb4d6dca1235ed10624d84604051610c7e9190612264565b60405180910390a35050505050565b610c95611c6b565b5f60025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208054610cde906124c3565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0a906124c3565b8015610d555780601f10610d2c57610100808354040283529160200191610d55565b820191905f5260205f20905b815481529060010190602001808311610d3857829003601f168201915b505050505090505f815103610d96576040517f6f08c58700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600381604051610da69190612983565b90815260200160405180910390206040518060a00160405290815f82018054610dce906124c3565b80601f0160208091040260200160405190810160405280929190818152602001828054610dfa906124c3565b8015610e455780601f10610e1c57610100808354040283529160200191610e45565b820191905f5260205f20905b815481529060010190602001808311610e2857829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff16151515158152602001600282018054610ece906124c3565b80601f0160208091040260200160405190810160405280929190818152602001828054610efa906124c3565b8015610f455780601f10610f1c57610100808354040283529160200191610f45565b820191905f5260205f20905b815481529060010190602001808311610f2857829003601f168201915b50505050508152602001600382015f9054906101000a900460ff161515151581525050915050919050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60605f60025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208054610fdf906124c3565b80601f016020809104026020016040519081016040528092919081815260200182805461100b906124c3565b80156110565780601f1061102d57610100808354040283529160200191611056565b820191905f5260205f20905b81548152906001019060200180831161103957829003601f168201915b505050505090505f815103611097576040517f6f08c58700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b6110a8611c6b565b600383836040516110ba92919061247e565b90815260200160405180910390206040518060a00160405290815f820180546110e2906124c3565b80601f016020809104026020016040519081016040528092919081815260200182805461110e906124c3565b80156111595780601f1061113057610100808354040283529160200191611159565b820191905f5260205f20905b81548152906001019060200180831161113c57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff161515151581526020016002820180546111e2906124c3565b80601f016020809104026020016040519081016040528092919081815260200182805461120e906124c3565b80156112595780601f1061123057610100808354040283529160200191611259565b820191905f5260205f20905b81548152906001019060200180831161123c57829003601f168201915b50505050508152602001600382015f9054906101000a900460ff161515151581525050905092915050565b60048181548110611293575f80fd5b905f5260205f2090600402015f91509050805f0180546112b2906124c3565b80601f01602080910402602001604051908101604052809291908181526020018280546112de906124c3565b80156113295780601f1061130057610100808354040283529160200191611329565b820191905f5260205f20905b81548152906001019060200180831161130c57829003601f168201915b505050505090806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff1690806002018054611376906124c3565b80601f01602080910402602001604051908101604052809291908181526020018280546113a2906124c3565b80156113ed5780601f106113c4576101008083540402835291602001916113ed565b820191905f5260205f20905b8154815290600101906020018083116113d057829003601f168201915b505050505090806003015f9054906101000a900460ff16905085565b6002602052805f5260405f205f915090508054611425906124c3565b80601f0160208091040260200160405190810160405280929190818152602001828054611451906124c3565b801561149c5780601f106114735761010080835404028352916020019161149c565b820191905f5260205f20905b81548152906001019060200180831161147f57829003601f168201915b505050505081565b5f5f60025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2080546114ee906124c3565b80601f016020809104026020016040519081016040528092919081815260200182805461151a906124c3565b80156115655780601f1061153c57610100808354040283529160200191611565565b820191905f5260205f20905b81548152906001019060200180831161154857829003601f168201915b505050505090505f8151036115a6576040517f6f08c58700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6003826040516115b79190612983565b908152602001604051809103902090508060010160149054906101000a900460ff1615611610576040517f7c9a1cf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018160010160146101000a81548160ff021916908315150217905550600192505050919050565b60605f5f5f90505b6004805490508110156116be57848460405161165d9291906129c7565b604051809103902060048281548110611679576116786129df565b5b905f5260205f2090600402016002016040516116959190612a9e565b6040518091039020036116b15781806116ad90612ae1565b9250505b8080600101915050611640565b505f8167ffffffffffffffff8111156116da576116d9611f49565b5b60405190808252806020026020018201604052801561171357816020015b611700611c6b565b8152602001906001900390816116f85790505b5090505f5f5f90505b60048054905081101561198c5786866040516117399291906129c7565b604051809103902060048281548110611755576117546129df565b5b905f5260205f2090600402016002016040516117719190612a9e565b60405180910390200361197f5760048181548110611792576117916129df565b5b905f5260205f2090600402016040518060a00160405290815f820180546117b8906124c3565b80601f01602080910402602001604051908101604052809291908181526020018280546117e4906124c3565b801561182f5780601f106118065761010080835404028352916020019161182f565b820191905f5260205f20905b81548152906001019060200180831161181257829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff161515151581526020016002820180546118b8906124c3565b80601f01602080910402602001604051908101604052809291908181526020018280546118e4906124c3565b801561192f5780601f106119065761010080835404028352916020019161192f565b820191905f5260205f20905b81548152906001019060200180831161191257829003601f168201915b50505050508152602001600382015f9054906101000a900460ff161515151581525050838381518110611965576119646129df565b5b6020026020010181905250818061197b90612ae1565b9250505b808060010191505061171c565b5081935050505092915050565b606060025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2080546119e3906124c3565b80601f0160208091040260200160405190810160405280929190818152602001828054611a0f906124c3565b8015611a5a5780601f10611a3157610100808354040283529160200191611a5a565b820191905f5260205f20905b815481529060010190602001808311611a3d57829003601f168201915b50505050509050919050565b60606004805480602002602001604051908101604052809291908181526020015f905b82821015611c62578382905f5260205f2090600402016040518060a00160405290815f82018054611ab9906124c3565b80601f0160208091040260200160405190810160405280929190818152602001828054611ae5906124c3565b8015611b305780601f10611b0757610100808354040283529160200191611b30565b820191905f5260205f20905b815481529060010190602001808311611b1357829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff16151515158152602001600282018054611bb9906124c3565b80601f0160208091040260200160405190810160405280929190818152602001828054611be5906124c3565b8015611c305780601f10611c0757610100808354040283529160200191611c30565b820191905f5260205f20905b815481529060010190602001808311611c1357829003601f168201915b50505050508152602001600382015f9054906101000a900460ff16151515158152505081526020019060010190611a89565b50505050905090565b6040518060a00160405280606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f15158152602001606081526020015f151581525090565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f840112611ce357611ce2611cc2565b5b8235905067ffffffffffffffff811115611d0057611cff611cc6565b5b602083019150836001820283011115611d1c57611d1b611cca565b5b9250929050565b5f5f60208385031215611d3957611d38611cba565b5b5f83013567ffffffffffffffff811115611d5657611d55611cbe565b5b611d6285828601611cce565b92509250509250929050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f611db082611d6e565b611dba8185611d78565b9350611dca818560208601611d88565b611dd381611d96565b840191505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611e0782611dde565b9050919050565b611e1781611dfd565b82525050565b5f8115159050919050565b611e3181611e1d565b82525050565b5f60a083015f8301518482035f860152611e518282611da6565b9150506020830151611e666020860182611e0e565b506040830151611e796040860182611e28565b5060608301518482036060860152611e918282611da6565b9150506080830151611ea66080860182611e28565b508091505092915050565b5f6020820190508181035f830152611ec98184611e37565b905092915050565b5f819050919050565b5f611ef4611eef611eea84611dde565b611ed1565b611dde565b9050919050565b5f611f0582611eda565b9050919050565b5f611f1682611efb565b9050919050565b611f2681611f0c565b82525050565b5f602082019050611f3f5f830184611f1d565b92915050565b5f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b611f7f82611d96565b810181811067ffffffffffffffff82111715611f9e57611f9d611f49565b5b80604052505050565b5f611fb0611cb1565b9050611fbc8282611f76565b919050565b5f67ffffffffffffffff821115611fdb57611fda611f49565b5b611fe482611d96565b9050602081019050919050565b828183375f83830152505050565b5f61201161200c84611fc1565b611fa7565b90508281526020810184848401111561202d5761202c611f45565b5b612038848285611ff1565b509392505050565b5f82601f83011261205457612053611cc2565b5b8135612064848260208601611fff565b91505092915050565b5f6020828403121561208257612081611cba565b5b5f82013567ffffffffffffffff81111561209f5761209e611cbe565b5b6120ab84828501612040565b91505092915050565b5f82825260208201905092915050565b5f6120ce82611d6e565b6120d881856120b4565b93506120e8818560208601611d88565b6120f181611d96565b840191505092915050565b61210581611dfd565b82525050565b61211481611e1d565b82525050565b5f60a0820190508181035f83015261213281886120c4565b905061214160208301876120fc565b61214e604083018661210b565b818103606083015261216081856120c4565b905061216f608083018461210b565b9695505050505050565b61218281611dfd565b811461218c575f5ffd5b50565b5f8135905061219d81612179565b92915050565b5f5f5f604084860312156121ba576121b9611cba565b5b5f84013567ffffffffffffffff8111156121d7576121d6611cbe565b5b6121e386828701611cce565b935093505060206121f68682870161218f565b9150509250925092565b5f6020828403121561221557612214611cba565b5b5f6122228482850161218f565b91505092915050565b5f61223582611efb565b9050919050565b6122458161222b565b82525050565b5f60208201905061225e5f83018461223c565b92915050565b5f6020820190508181035f83015261227c81846120c4565b905092915050565b5f819050919050565b61229681612284565b81146122a0575f5ffd5b50565b5f813590506122b18161228d565b92915050565b5f602082840312156122cc576122cb611cba565b5b5f6122d9848285016122a3565b91505092915050565b5f6020820190506122f55f83018461210b565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f60a083015f8301518482035f86015261233e8282611da6565b91505060208301516123536020860182611e0e565b5060408301516123666040860182611e28565b506060830151848203606086015261237e8282611da6565b91505060808301516123936080860182611e28565b508091505092915050565b5f6123a98383612324565b905092915050565b5f602082019050919050565b5f6123c7826122fb565b6123d18185612305565b9350836020820285016123e385612315565b805f5b8581101561241e57848403895281516123ff858261239e565b945061240a836123b1565b925060208a019950506001810190506123e6565b50829750879550505050505092915050565b5f6020820190508181035f83015261244881846123bd565b905092915050565b5f81905092915050565b5f6124658385612450565b9350612472838584611ff1565b82840190509392505050565b5f61248a82848661245a565b91508190509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806124da57607f821691505b6020821081036124ed576124ec612496565b5b50919050565b5f6020820190506125065f8301846120fc565b92915050565b61251581611e1d565b811461251f575f5ffd5b50565b5f815190506125308161250c565b92915050565b5f6020828403121561254b5761254a611cba565b5b5f61255884828501612522565b91505092915050565b5f61257361256e84611fc1565b611fa7565b90508281526020810184848401111561258f5761258e611f45565b5b61259a848285611d88565b509392505050565b5f82601f8301126125b6576125b5611cc2565b5b81516125c6848260208601612561565b91505092915050565b5f602082840312156125e4576125e3611cba565b5b5f82015167ffffffffffffffff81111561260157612600611cbe565b5b61260d848285016125a2565b91505092915050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026126727fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612637565b61267c8683612637565b95508019841693508086168417925050509392505050565b5f6126ae6126a96126a484612284565b611ed1565b612284565b9050919050565b5f819050919050565b6126c783612694565b6126db6126d3826126b5565b848454612643565b825550505050565b5f5f905090565b6126f26126e3565b6126fd8184846126be565b505050565b5b81811015612720576127155f826126ea565b600181019050612703565b5050565b601f8211156127655761273681612616565b61273f84612628565b8101602085101561274e578190505b61276261275a85612628565b830182612702565b50505b505050565b5f82821c905092915050565b5f6127855f198460080261276a565b1980831691505092915050565b5f61279d8383612776565b9150826002028217905092915050565b6127b682611d6e565b67ffffffffffffffff8111156127cf576127ce611f49565b5b6127d982546124c3565b6127e4828285612724565b5f60209050601f831160018114612815575f8415612803578287015190505b61280d8582612792565b865550612874565b601f19841661282386612616565b5f5b8281101561284a57848901518255600182019150602085019450602081019050612825565b868310156128675784890151612863601f891682612776565b8355505b6001600288020188555050505b505050505050565b5f82905092915050565b612890838361287c565b67ffffffffffffffff8111156128a9576128a8611f49565b5b6128b382546124c3565b6128be828285612724565b5f601f8311600181146128eb575f84156128d9578287013590505b6128e38582612792565b86555061294a565b601f1984166128f986612616565b5f5b82811015612920578489013582556001820191506020850194506020810190506128fb565b8683101561293d5784890135612939601f891682612776565b8355505b6001600288020188555050505b50505050505050565b5f61295d82611d6e565b6129678185612450565b9350612977818560208601611d88565b80840191505092915050565b5f61298e8284612953565b915081905092915050565b5f81905092915050565b5f6129ae8385612999565b93506129bb838584611ff1565b82840190509392505050565b5f6129d38284866129a3565b91508190509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f819050815f5260205f209050919050565b5f8154612a2a816124c3565b612a348186612999565b9450600182165f8114612a4e5760018114612a6357612a95565b60ff1983168652811515820286019350612a95565b612a6c85612a0c565b5f5b83811015612a8d57815481890152600182019150602081019050612a6e565b838801955050505b50505092915050565b5f612aa98284612a1e565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612aeb82612284565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612b1d57612b1c612ab4565b5b60018201905091905056fea26469706673582212208d473dba8e20ebb3573edaa9ee66d0678eaea359a1c3cb5527f723de51951fc364736f6c634300081c0033",
}

// VoterManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use VoterManagerMetaData.ABI instead.
var VoterManagerABI = VoterManagerMetaData.ABI

// VoterManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use VoterManagerMetaData.Bin instead.
var VoterManagerBin = VoterManagerMetaData.Bin

// DeployVoterManager deploys a new Ethereum contract, binding an instance of VoterManager to it.
func DeployVoterManager(auth *bind.TransactOpts, backend bind.ContractBackend, _baseAddress common.Address, _kpuManagerAddress common.Address) (common.Address, *types.Transaction, *VoterManager, error) {
	parsed, err := VoterManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(VoterManagerBin), backend, _baseAddress, _kpuManagerAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &VoterManager{VoterManagerCaller: VoterManagerCaller{contract: contract}, VoterManagerTransactor: VoterManagerTransactor{contract: contract}, VoterManagerFilterer: VoterManagerFilterer{contract: contract}}, nil
}

// VoterManager is an auto generated Go binding around an Ethereum contract.
type VoterManager struct {
	VoterManagerCaller     // Read-only binding to the contract
	VoterManagerTransactor // Write-only binding to the contract
	VoterManagerFilterer   // Log filterer for contract events
}

// VoterManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type VoterManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VoterManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VoterManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VoterManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VoterManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VoterManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VoterManagerSession struct {
	Contract     *VoterManager     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VoterManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VoterManagerCallerSession struct {
	Contract *VoterManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// VoterManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VoterManagerTransactorSession struct {
	Contract     *VoterManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// VoterManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type VoterManagerRaw struct {
	Contract *VoterManager // Generic contract binding to access the raw methods on
}

// VoterManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VoterManagerCallerRaw struct {
	Contract *VoterManagerCaller // Generic read-only contract binding to access the raw methods on
}

// VoterManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VoterManagerTransactorRaw struct {
	Contract *VoterManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVoterManager creates a new instance of VoterManager, bound to a specific deployed contract.
func NewVoterManager(address common.Address, backend bind.ContractBackend) (*VoterManager, error) {
	contract, err := bindVoterManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &VoterManager{VoterManagerCaller: VoterManagerCaller{contract: contract}, VoterManagerTransactor: VoterManagerTransactor{contract: contract}, VoterManagerFilterer: VoterManagerFilterer{contract: contract}}, nil
}

// NewVoterManagerCaller creates a new read-only instance of VoterManager, bound to a specific deployed contract.
func NewVoterManagerCaller(address common.Address, caller bind.ContractCaller) (*VoterManagerCaller, error) {
	contract, err := bindVoterManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VoterManagerCaller{contract: contract}, nil
}

// NewVoterManagerTransactor creates a new write-only instance of VoterManager, bound to a specific deployed contract.
func NewVoterManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*VoterManagerTransactor, error) {
	contract, err := bindVoterManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VoterManagerTransactor{contract: contract}, nil
}

// NewVoterManagerFilterer creates a new log filterer instance of VoterManager, bound to a specific deployed contract.
func NewVoterManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*VoterManagerFilterer, error) {
	contract, err := bindVoterManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VoterManagerFilterer{contract: contract}, nil
}

// bindVoterManager binds a generic wrapper to an already deployed contract.
func bindVoterManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := VoterManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_VoterManager *VoterManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VoterManager.Contract.VoterManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_VoterManager *VoterManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VoterManager.Contract.VoterManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_VoterManager *VoterManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VoterManager.Contract.VoterManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_VoterManager *VoterManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VoterManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_VoterManager *VoterManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VoterManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_VoterManager *VoterManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VoterManager.Contract.contract.Transact(opts, method, params...)
}

// VoterNIKByAddresses is a free data retrieval call binding the contract method 0x95016313.
//
// Solidity: function _voterNIKByAddresses(address ) view returns(string)
func (_VoterManager *VoterManagerCaller) VoterNIKByAddresses(opts *bind.CallOpts, arg0 common.Address) (string, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "_voterNIKByAddresses", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VoterNIKByAddresses is a free data retrieval call binding the contract method 0x95016313.
//
// Solidity: function _voterNIKByAddresses(address ) view returns(string)
func (_VoterManager *VoterManagerSession) VoterNIKByAddresses(arg0 common.Address) (string, error) {
	return _VoterManager.Contract.VoterNIKByAddresses(&_VoterManager.CallOpts, arg0)
}

// VoterNIKByAddresses is a free data retrieval call binding the contract method 0x95016313.
//
// Solidity: function _voterNIKByAddresses(address ) view returns(string)
func (_VoterManager *VoterManagerCallerSession) VoterNIKByAddresses(arg0 common.Address) (string, error) {
	return _VoterManager.Contract.VoterNIKByAddresses(&_VoterManager.CallOpts, arg0)
}

// Voterss is a free data retrieval call binding the contract method 0x40794792.
//
// Solidity: function _voterss(string ) view returns(string nik, address voterAddress, bool hasVoted, string region, bool isRegistered)
func (_VoterManager *VoterManagerCaller) Voterss(opts *bind.CallOpts, arg0 string) (struct {
	Nik          string
	VoterAddress common.Address
	HasVoted     bool
	Region       string
	IsRegistered bool
}, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "_voterss", arg0)

	outstruct := new(struct {
		Nik          string
		VoterAddress common.Address
		HasVoted     bool
		Region       string
		IsRegistered bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Nik = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.VoterAddress = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.HasVoted = *abi.ConvertType(out[2], new(bool)).(*bool)
	outstruct.Region = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.IsRegistered = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// Voterss is a free data retrieval call binding the contract method 0x40794792.
//
// Solidity: function _voterss(string ) view returns(string nik, address voterAddress, bool hasVoted, string region, bool isRegistered)
func (_VoterManager *VoterManagerSession) Voterss(arg0 string) (struct {
	Nik          string
	VoterAddress common.Address
	HasVoted     bool
	Region       string
	IsRegistered bool
}, error) {
	return _VoterManager.Contract.Voterss(&_VoterManager.CallOpts, arg0)
}

// Voterss is a free data retrieval call binding the contract method 0x40794792.
//
// Solidity: function _voterss(string ) view returns(string nik, address voterAddress, bool hasVoted, string region, bool isRegistered)
func (_VoterManager *VoterManagerCallerSession) Voterss(arg0 string) (struct {
	Nik          string
	VoterAddress common.Address
	HasVoted     bool
	Region       string
	IsRegistered bool
}, error) {
	return _VoterManager.Contract.Voterss(&_VoterManager.CallOpts, arg0)
}

// Base is a free data retrieval call binding the contract method 0x5001f3b5.
//
// Solidity: function base() view returns(address)
func (_VoterManager *VoterManagerCaller) Base(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "base")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Base is a free data retrieval call binding the contract method 0x5001f3b5.
//
// Solidity: function base() view returns(address)
func (_VoterManager *VoterManagerSession) Base() (common.Address, error) {
	return _VoterManager.Contract.Base(&_VoterManager.CallOpts)
}

// Base is a free data retrieval call binding the contract method 0x5001f3b5.
//
// Solidity: function base() view returns(address)
func (_VoterManager *VoterManagerCallerSession) Base() (common.Address, error) {
	return _VoterManager.Contract.Base(&_VoterManager.CallOpts)
}

// GetAllVoter is a free data retrieval call binding the contract method 0xf44f4e14.
//
// Solidity: function getAllVoter() view returns((string,address,bool,string,bool)[])
func (_VoterManager *VoterManagerCaller) GetAllVoter(opts *bind.CallOpts) ([]IVoterManagerVoter, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "getAllVoter")

	if err != nil {
		return *new([]IVoterManagerVoter), err
	}

	out0 := *abi.ConvertType(out[0], new([]IVoterManagerVoter)).(*[]IVoterManagerVoter)

	return out0, err

}

// GetAllVoter is a free data retrieval call binding the contract method 0xf44f4e14.
//
// Solidity: function getAllVoter() view returns((string,address,bool,string,bool)[])
func (_VoterManager *VoterManagerSession) GetAllVoter() ([]IVoterManagerVoter, error) {
	return _VoterManager.Contract.GetAllVoter(&_VoterManager.CallOpts)
}

// GetAllVoter is a free data retrieval call binding the contract method 0xf44f4e14.
//
// Solidity: function getAllVoter() view returns((string,address,bool,string,bool)[])
func (_VoterManager *VoterManagerCallerSession) GetAllVoter() ([]IVoterManagerVoter, error) {
	return _VoterManager.Contract.GetAllVoter(&_VoterManager.CallOpts)
}

// GetVoterByAddress is a free data retrieval call binding the contract method 0x4bdd7585.
//
// Solidity: function getVoterByAddress(address voterAddress) view returns((string,address,bool,string,bool))
func (_VoterManager *VoterManagerCaller) GetVoterByAddress(opts *bind.CallOpts, voterAddress common.Address) (IVoterManagerVoter, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "getVoterByAddress", voterAddress)

	if err != nil {
		return *new(IVoterManagerVoter), err
	}

	out0 := *abi.ConvertType(out[0], new(IVoterManagerVoter)).(*IVoterManagerVoter)

	return out0, err

}

// GetVoterByAddress is a free data retrieval call binding the contract method 0x4bdd7585.
//
// Solidity: function getVoterByAddress(address voterAddress) view returns((string,address,bool,string,bool))
func (_VoterManager *VoterManagerSession) GetVoterByAddress(voterAddress common.Address) (IVoterManagerVoter, error) {
	return _VoterManager.Contract.GetVoterByAddress(&_VoterManager.CallOpts, voterAddress)
}

// GetVoterByAddress is a free data retrieval call binding the contract method 0x4bdd7585.
//
// Solidity: function getVoterByAddress(address voterAddress) view returns((string,address,bool,string,bool))
func (_VoterManager *VoterManagerCallerSession) GetVoterByAddress(voterAddress common.Address) (IVoterManagerVoter, error) {
	return _VoterManager.Contract.GetVoterByAddress(&_VoterManager.CallOpts, voterAddress)
}

// GetVoterByNIK is a free data retrieval call binding the contract method 0x2a70ecca.
//
// Solidity: function getVoterByNIK(string nik) view returns((string,address,bool,string,bool))
func (_VoterManager *VoterManagerCaller) GetVoterByNIK(opts *bind.CallOpts, nik string) (IVoterManagerVoter, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "getVoterByNIK", nik)

	if err != nil {
		return *new(IVoterManagerVoter), err
	}

	out0 := *abi.ConvertType(out[0], new(IVoterManagerVoter)).(*IVoterManagerVoter)

	return out0, err

}

// GetVoterByNIK is a free data retrieval call binding the contract method 0x2a70ecca.
//
// Solidity: function getVoterByNIK(string nik) view returns((string,address,bool,string,bool))
func (_VoterManager *VoterManagerSession) GetVoterByNIK(nik string) (IVoterManagerVoter, error) {
	return _VoterManager.Contract.GetVoterByNIK(&_VoterManager.CallOpts, nik)
}

// GetVoterByNIK is a free data retrieval call binding the contract method 0x2a70ecca.
//
// Solidity: function getVoterByNIK(string nik) view returns((string,address,bool,string,bool))
func (_VoterManager *VoterManagerCallerSession) GetVoterByNIK(nik string) (IVoterManagerVoter, error) {
	return _VoterManager.Contract.GetVoterByNIK(&_VoterManager.CallOpts, nik)
}

// GetVoterByRegion is a free data retrieval call binding the contract method 0xe0d5343b.
//
// Solidity: function getVoterByRegion(string region) view returns((string,address,bool,string,bool)[])
func (_VoterManager *VoterManagerCaller) GetVoterByRegion(opts *bind.CallOpts, region string) ([]IVoterManagerVoter, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "getVoterByRegion", region)

	if err != nil {
		return *new([]IVoterManagerVoter), err
	}

	out0 := *abi.ConvertType(out[0], new([]IVoterManagerVoter)).(*[]IVoterManagerVoter)

	return out0, err

}

// GetVoterByRegion is a free data retrieval call binding the contract method 0xe0d5343b.
//
// Solidity: function getVoterByRegion(string region) view returns((string,address,bool,string,bool)[])
func (_VoterManager *VoterManagerSession) GetVoterByRegion(region string) ([]IVoterManagerVoter, error) {
	return _VoterManager.Contract.GetVoterByRegion(&_VoterManager.CallOpts, region)
}

// GetVoterByRegion is a free data retrieval call binding the contract method 0xe0d5343b.
//
// Solidity: function getVoterByRegion(string region) view returns((string,address,bool,string,bool)[])
func (_VoterManager *VoterManagerCallerSession) GetVoterByRegion(region string) ([]IVoterManagerVoter, error) {
	return _VoterManager.Contract.GetVoterByRegion(&_VoterManager.CallOpts, region)
}

// GetVoterNikByAddress is a free data retrieval call binding the contract method 0x5130298f.
//
// Solidity: function getVoterNikByAddress(address voterAddress) view returns(string)
func (_VoterManager *VoterManagerCaller) GetVoterNikByAddress(opts *bind.CallOpts, voterAddress common.Address) (string, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "getVoterNikByAddress", voterAddress)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetVoterNikByAddress is a free data retrieval call binding the contract method 0x5130298f.
//
// Solidity: function getVoterNikByAddress(address voterAddress) view returns(string)
func (_VoterManager *VoterManagerSession) GetVoterNikByAddress(voterAddress common.Address) (string, error) {
	return _VoterManager.Contract.GetVoterNikByAddress(&_VoterManager.CallOpts, voterAddress)
}

// GetVoterNikByAddress is a free data retrieval call binding the contract method 0x5130298f.
//
// Solidity: function getVoterNikByAddress(address voterAddress) view returns(string)
func (_VoterManager *VoterManagerCallerSession) GetVoterNikByAddress(voterAddress common.Address) (string, error) {
	return _VoterManager.Contract.GetVoterNikByAddress(&_VoterManager.CallOpts, voterAddress)
}

// KpuManager is a free data retrieval call binding the contract method 0x34d1d2f2.
//
// Solidity: function kpuManager() view returns(address)
func (_VoterManager *VoterManagerCaller) KpuManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "kpuManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// KpuManager is a free data retrieval call binding the contract method 0x34d1d2f2.
//
// Solidity: function kpuManager() view returns(address)
func (_VoterManager *VoterManagerSession) KpuManager() (common.Address, error) {
	return _VoterManager.Contract.KpuManager(&_VoterManager.CallOpts)
}

// KpuManager is a free data retrieval call binding the contract method 0x34d1d2f2.
//
// Solidity: function kpuManager() view returns(address)
func (_VoterManager *VoterManagerCallerSession) KpuManager() (common.Address, error) {
	return _VoterManager.Contract.KpuManager(&_VoterManager.CallOpts)
}

// VoterAddressesArray is a free data retrieval call binding the contract method 0x89c7e391.
//
// Solidity: function voterAddressesArray(uint256 ) view returns(string nik, address voterAddress, bool hasVoted, string region, bool isRegistered)
func (_VoterManager *VoterManagerCaller) VoterAddressesArray(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Nik          string
	VoterAddress common.Address
	HasVoted     bool
	Region       string
	IsRegistered bool
}, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "voterAddressesArray", arg0)

	outstruct := new(struct {
		Nik          string
		VoterAddress common.Address
		HasVoted     bool
		Region       string
		IsRegistered bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Nik = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.VoterAddress = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.HasVoted = *abi.ConvertType(out[2], new(bool)).(*bool)
	outstruct.Region = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.IsRegistered = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// VoterAddressesArray is a free data retrieval call binding the contract method 0x89c7e391.
//
// Solidity: function voterAddressesArray(uint256 ) view returns(string nik, address voterAddress, bool hasVoted, string region, bool isRegistered)
func (_VoterManager *VoterManagerSession) VoterAddressesArray(arg0 *big.Int) (struct {
	Nik          string
	VoterAddress common.Address
	HasVoted     bool
	Region       string
	IsRegistered bool
}, error) {
	return _VoterManager.Contract.VoterAddressesArray(&_VoterManager.CallOpts, arg0)
}

// VoterAddressesArray is a free data retrieval call binding the contract method 0x89c7e391.
//
// Solidity: function voterAddressesArray(uint256 ) view returns(string nik, address voterAddress, bool hasVoted, string region, bool isRegistered)
func (_VoterManager *VoterManagerCallerSession) VoterAddressesArray(arg0 *big.Int) (struct {
	Nik          string
	VoterAddress common.Address
	HasVoted     bool
	Region       string
	IsRegistered bool
}, error) {
	return _VoterManager.Contract.VoterAddressesArray(&_VoterManager.CallOpts, arg0)
}

// VoterNIKByAddress is a free data retrieval call binding the contract method 0xf0416e5f.
//
// Solidity: function voterNIKByAddress(address voter) view returns(string)
func (_VoterManager *VoterManagerCaller) VoterNIKByAddress(opts *bind.CallOpts, voter common.Address) (string, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "voterNIKByAddress", voter)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VoterNIKByAddress is a free data retrieval call binding the contract method 0xf0416e5f.
//
// Solidity: function voterNIKByAddress(address voter) view returns(string)
func (_VoterManager *VoterManagerSession) VoterNIKByAddress(voter common.Address) (string, error) {
	return _VoterManager.Contract.VoterNIKByAddress(&_VoterManager.CallOpts, voter)
}

// VoterNIKByAddress is a free data retrieval call binding the contract method 0xf0416e5f.
//
// Solidity: function voterNIKByAddress(address voter) view returns(string)
func (_VoterManager *VoterManagerCallerSession) VoterNIKByAddress(voter common.Address) (string, error) {
	return _VoterManager.Contract.VoterNIKByAddress(&_VoterManager.CallOpts, voter)
}

// Voters is a free data retrieval call binding the contract method 0x53fa2e64.
//
// Solidity: function voters(string nik) view returns((string,address,bool,string,bool))
func (_VoterManager *VoterManagerCaller) Voters(opts *bind.CallOpts, nik string) (IVoterManagerVoter, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "voters", nik)

	if err != nil {
		return *new(IVoterManagerVoter), err
	}

	out0 := *abi.ConvertType(out[0], new(IVoterManagerVoter)).(*IVoterManagerVoter)

	return out0, err

}

// Voters is a free data retrieval call binding the contract method 0x53fa2e64.
//
// Solidity: function voters(string nik) view returns((string,address,bool,string,bool))
func (_VoterManager *VoterManagerSession) Voters(nik string) (IVoterManagerVoter, error) {
	return _VoterManager.Contract.Voters(&_VoterManager.CallOpts, nik)
}

// Voters is a free data retrieval call binding the contract method 0x53fa2e64.
//
// Solidity: function voters(string nik) view returns((string,address,bool,string,bool))
func (_VoterManager *VoterManagerCallerSession) Voters(nik string) (IVoterManagerVoter, error) {
	return _VoterManager.Contract.Voters(&_VoterManager.CallOpts, nik)
}

// MarkVoted is a paid mutator transaction binding the contract method 0xa8fd0cfa.
//
// Solidity: function markVoted(address voterAddress) returns(bool)
func (_VoterManager *VoterManagerTransactor) MarkVoted(opts *bind.TransactOpts, voterAddress common.Address) (*types.Transaction, error) {
	return _VoterManager.contract.Transact(opts, "markVoted", voterAddress)
}

// MarkVoted is a paid mutator transaction binding the contract method 0xa8fd0cfa.
//
// Solidity: function markVoted(address voterAddress) returns(bool)
func (_VoterManager *VoterManagerSession) MarkVoted(voterAddress common.Address) (*types.Transaction, error) {
	return _VoterManager.Contract.MarkVoted(&_VoterManager.TransactOpts, voterAddress)
}

// MarkVoted is a paid mutator transaction binding the contract method 0xa8fd0cfa.
//
// Solidity: function markVoted(address voterAddress) returns(bool)
func (_VoterManager *VoterManagerTransactorSession) MarkVoted(voterAddress common.Address) (*types.Transaction, error) {
	return _VoterManager.Contract.MarkVoted(&_VoterManager.TransactOpts, voterAddress)
}

// RegisterVoter is a paid mutator transaction binding the contract method 0x4a075de2.
//
// Solidity: function registerVoter(string nik, address voterAddress) returns()
func (_VoterManager *VoterManagerTransactor) RegisterVoter(opts *bind.TransactOpts, nik string, voterAddress common.Address) (*types.Transaction, error) {
	return _VoterManager.contract.Transact(opts, "registerVoter", nik, voterAddress)
}

// RegisterVoter is a paid mutator transaction binding the contract method 0x4a075de2.
//
// Solidity: function registerVoter(string nik, address voterAddress) returns()
func (_VoterManager *VoterManagerSession) RegisterVoter(nik string, voterAddress common.Address) (*types.Transaction, error) {
	return _VoterManager.Contract.RegisterVoter(&_VoterManager.TransactOpts, nik, voterAddress)
}

// RegisterVoter is a paid mutator transaction binding the contract method 0x4a075de2.
//
// Solidity: function registerVoter(string nik, address voterAddress) returns()
func (_VoterManager *VoterManagerTransactorSession) RegisterVoter(nik string, voterAddress common.Address) (*types.Transaction, error) {
	return _VoterManager.Contract.RegisterVoter(&_VoterManager.TransactOpts, nik, voterAddress)
}

// VoterManagerVoterRegisteredIterator is returned from FilterVoterRegistered and is used to iterate over the raw logs and unpacked data for VoterRegistered events raised by the VoterManager contract.
type VoterManagerVoterRegisteredIterator struct {
	Event *VoterManagerVoterRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VoterManagerVoterRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VoterManagerVoterRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VoterManagerVoterRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VoterManagerVoterRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VoterManagerVoterRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VoterManagerVoterRegistered represents a VoterRegistered event raised by the VoterManager contract.
type VoterManagerVoterRegistered struct {
	Nik          common.Hash
	VoterAddress common.Address
	Region       string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVoterRegistered is a free log retrieval operation binding the contract event 0xe8bf381bec3899d7c4d98d7e52cfd45dfe7254b2ceafbb4d6dca1235ed10624d.
//
// Solidity: event VoterRegistered(string indexed nik, address indexed voterAddress, string region)
func (_VoterManager *VoterManagerFilterer) FilterVoterRegistered(opts *bind.FilterOpts, nik []string, voterAddress []common.Address) (*VoterManagerVoterRegisteredIterator, error) {

	var nikRule []interface{}
	for _, nikItem := range nik {
		nikRule = append(nikRule, nikItem)
	}
	var voterAddressRule []interface{}
	for _, voterAddressItem := range voterAddress {
		voterAddressRule = append(voterAddressRule, voterAddressItem)
	}

	logs, sub, err := _VoterManager.contract.FilterLogs(opts, "VoterRegistered", nikRule, voterAddressRule)
	if err != nil {
		return nil, err
	}
	return &VoterManagerVoterRegisteredIterator{contract: _VoterManager.contract, event: "VoterRegistered", logs: logs, sub: sub}, nil
}

// WatchVoterRegistered is a free log subscription operation binding the contract event 0xe8bf381bec3899d7c4d98d7e52cfd45dfe7254b2ceafbb4d6dca1235ed10624d.
//
// Solidity: event VoterRegistered(string indexed nik, address indexed voterAddress, string region)
func (_VoterManager *VoterManagerFilterer) WatchVoterRegistered(opts *bind.WatchOpts, sink chan<- *VoterManagerVoterRegistered, nik []string, voterAddress []common.Address) (event.Subscription, error) {

	var nikRule []interface{}
	for _, nikItem := range nik {
		nikRule = append(nikRule, nikItem)
	}
	var voterAddressRule []interface{}
	for _, voterAddressItem := range voterAddress {
		voterAddressRule = append(voterAddressRule, voterAddressItem)
	}

	logs, sub, err := _VoterManager.contract.WatchLogs(opts, "VoterRegistered", nikRule, voterAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VoterManagerVoterRegistered)
				if err := _VoterManager.contract.UnpackLog(event, "VoterRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVoterRegistered is a log parse operation binding the contract event 0xe8bf381bec3899d7c4d98d7e52cfd45dfe7254b2ceafbb4d6dca1235ed10624d.
//
// Solidity: event VoterRegistered(string indexed nik, address indexed voterAddress, string region)
func (_VoterManager *VoterManagerFilterer) ParseVoterRegistered(log types.Log) (*VoterManagerVoterRegistered, error) {
	event := new(VoterManagerVoterRegistered)
	if err := _VoterManager.contract.UnpackLog(event, "VoterRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
