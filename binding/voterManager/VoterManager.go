// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package voterManager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IVoterManagerVoter is an auto generated low-level Go binding around an user-defined struct.
type IVoterManagerVoter struct {
	Nik          string
	VoterAddress common.Address
	HasVoted     bool
	Region       string
	IsRegistered bool
}

// VoterManagerMetaData contains all meta data concerning the VoterManager contract.
var VoterManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_kpuManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"trustedForwarders\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyVoted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedKPU\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VoterAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VoterNotRegistered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"TrustedForwarderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"TrustedForwarderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"nik\",\"type\":\"string\"}],\"name\":\"VoterMarkedAsVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"nik\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"VoterRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_voterNIKByAddresses\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"_voterss\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"nik\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"addTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"contractIVotechainBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllVoter\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"nik\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"internalType\":\"structIVoterManager.Voter[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"getVoterByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"nik\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"internalType\":\"structIVoterManager.Voter\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nik\",\"type\":\"string\"}],\"name\":\"getVoterByNIK\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"nik\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"internalType\":\"structIVoterManager.Voter\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"getVoterByRegion\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"nik\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"internalType\":\"structIVoterManager.Voter[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"getVoterNikByAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kpuManager\",\"outputs\":[{\"internalType\":\"contractIKPUManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"markVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nik\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"registerVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"removeTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voterAddressesArray\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"nik\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"voterNIKByAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nik\",\"type\":\"string\"}],\"name\":\"voters\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"nik\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"internalType\":\"structIVoterManager.Voter\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f5ffd5b50604051613a35380380613a3583398181016040528101906100319190610403565b805f5f90505b8151811015610076576100698282815181106100565761005561046f565b5b602002602001015161010060201b60201c565b8080600101915050610037565b50508260025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505061049c565b5f5f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166102455760015f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550600181908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f3ef8564460ada92419608d823c014975d98f8104d7d1e68c222967ac6814cd9760405160405180910390a25b50565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61028282610259565b9050919050565b61029281610278565b811461029c575f5ffd5b50565b5f815190506102ad81610289565b92915050565b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6102fd826102b7565b810181811067ffffffffffffffff8211171561031c5761031b6102c7565b5b80604052505050565b5f61032e610248565b905061033a82826102f4565b919050565b5f67ffffffffffffffff821115610359576103586102c7565b5b602082029050602081019050919050565b5f5ffd5b5f61038061037b8461033f565b610325565b905080838252602082019050602084028301858111156103a3576103a261036a565b5b835b818110156103cc57806103b8888261029f565b8452602084019350506020810190506103a5565b5050509392505050565b5f82601f8301126103ea576103e96102b3565b5b81516103fa84826020860161036e565b91505092915050565b5f5f5f6060848603121561041a57610419610251565b5b5f6104278682870161029f565b93505060206104388682870161029f565b925050604084015167ffffffffffffffff81111561045957610458610255565b5b610465868287016103d6565b9150509250925092565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b61358c806104a95f395ff3fe608060405234801561000f575f5ffd5b5060043610610114575f3560e01c806353fa2e64116100a0578063a8fd0cfa1161006f578063a8fd0cfa14610330578063e0d5343b14610360578063f0416e5f14610390578063f44f4e14146103c0578063ff7196c8146103de57610114565b806353fa2e641461026c578063572b6c051461029c57806389c7e391146102cc578063950163131461030057610114565b806340794792116100e7578063407947921461019e5780634a075de2146101d25780634bdd7585146101ee5780635001f3b51461021e5780635130298f1461023c57610114565b806326d00668146101185780632a70ecca1461013457806334d1d2f2146101645780633751d89c14610182575b5f5ffd5b610132600480360381019061012d91906125e3565b6103fc565b005b61014e6004803603810190610149919061266f565b610501565b60405161015b91906127cd565b60405180910390f35b61016c61074b565b6040516101799190612848565b60405180910390f35b61019c600480360381019061019791906125e3565b610770565b005b6101b860048036038101906101b39190612989565b610875565b6040516101c9959493929190612a36565b60405180910390f35b6101ec60048036038101906101e79190612a95565b610a03565b005b610208600480360381019061020391906125e3565b610f57565b60405161021591906127cd565b60405180910390f35b61022661123a565b6040516102339190612b12565b60405180910390f35b610256600480360381019061025191906125e3565b61125f565b6040516102639190612b2b565b60405180910390f35b6102866004803603810190610281919061266f565b61136b565b60405161029391906127cd565b60405180910390f35b6102b660048036038101906102b191906125e3565b61154f565b6040516102c39190612b4b565b60405180910390f35b6102e660048036038101906102e19190612b97565b6115a0565b6040516102f7959493929190612a36565b60405180910390f35b61031a600480360381019061031591906125e3565b611725565b6040516103279190612b2b565b60405180910390f35b61034a600480360381019061034591906125e3565b6117c0565b6040516103579190612b4b565b60405180910390f35b61037a6004803603810190610375919061266f565b611a83565b6040516103879190612cf7565b60405180910390f35b6103aa60048036038101906103a591906125e3565b611de4565b6040516103b79190612b2b565b60405180910390f35b6103c8611eb1565b6040516103d59190612cf7565b60405180910390f35b6103e66120b6565b6040516103f39190612dbf565b60405180910390f35b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb4ab1646040518163ffffffff1660e01b8152600401602060405180830381865afa158015610466573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061048a9190612df3565b73ffffffffffffffffffffffffffffffffffffffff166104a8612141565b73ffffffffffffffffffffffffffffffffffffffff16146104f5576040517fd2b9347c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104fe8161214f565b50565b610509612532565b6005838360405161051b929190612e4c565b90815260200160405180910390206003015f9054906101000a900460ff1661056f576040517f6f08c58700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60058383604051610581929190612e4c565b90815260200160405180910390206040518060a00160405290815f820180546105a990612e91565b80601f01602080910402602001604051908101604052809291908181526020018280546105d590612e91565b80156106205780601f106105f757610100808354040283529160200191610620565b820191905f5260205f20905b81548152906001019060200180831161060357829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff161515151581526020016002820180546106a990612e91565b80601f01602080910402602001604051908101604052809291908181526020018280546106d590612e91565b80156107205780601f106106f757610100808354040283529160200191610720565b820191905f5260205f20905b81548152906001019060200180831161070357829003601f168201915b50505050508152602001600382015f9054906101000a900460ff161515151581525050905092915050565b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb4ab1646040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107da573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107fe9190612df3565b73ffffffffffffffffffffffffffffffffffffffff1661081c612141565b73ffffffffffffffffffffffffffffffffffffffff1614610869576040517fd2b9347c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61087281612297565b50565b6005818051602081018201805184825260208301602085012081835280955050505050505f91509050805f0180546108ac90612e91565b80601f01602080910402602001604051908101604052809291908181526020018280546108d890612e91565b80156109235780601f106108fa57610100808354040283529160200191610923565b820191905f5260205f20905b81548152906001019060200180831161090657829003601f168201915b505050505090806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff169080600201805461097090612e91565b80601f016020809104026020016040519081016040528092919081815260200182805461099c90612e91565b80156109e75780601f106109be576101008083540402835291602001916109e7565b820191905f5260205f20905b8154815290600101906020018083116109ca57829003601f168201915b505050505090806003015f9054906101000a900460ff16905085565b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375a4352f610a48612141565b6040518263ffffffff1660e01b8152600401610a649190612ec1565b602060405180830381865afa158015610a7f573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610aa39190612f04565b610ad9576040517fd2b9347c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60058383604051610aeb929190612e4c565b90815260200160405180910390206003015f9054906101000a900460ff1615610b40576040517f59a1ec4700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208054610b8990612e91565b905014610bc2576040517f2d42c77200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166374c80380610c08612141565b6040518263ffffffff1660e01b8152600401610c249190612ec1565b5f60405180830381865afa158015610c3e573d5f5f3e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190610c669190612f9d565b90505f6040518060a0016040528086868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081526020018473ffffffffffffffffffffffffffffffffffffffff1681526020015f151581526020018381526020016001151581525090508060058686604051610d03929190612e4c565b90815260200160405180910390205f820151815f019081610d24919061317b565b506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff0219169083151502179055506060820151816002019081610da0919061317b565b506080820151816003015f6101000a81548160ff021916908315150217905550905050848460045f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f209182610e0f929190613254565b50600681908060018154018082558091505060019003905f5260205f2090600402015f909190919091505f820151815f019081610e4c919061317b565b506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff0219169083151502179055506060820151816002019081610ec8919061317b565b506080820151816003015f6101000a81548160ff02191690831515021790555050508273ffffffffffffffffffffffffffffffffffffffff168585604051610f11929190612e4c565b60405180910390207fe8bf381bec3899d7c4d98d7e52cfd45dfe7254b2ceafbb4d6dca1235ed10624d84604051610f489190612b2b565b60405180910390a35050505050565b610f5f612532565b5f60045f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208054610fa890612e91565b80601f0160208091040260200160405190810160405280929190818152602001828054610fd490612e91565b801561101f5780601f10610ff65761010080835404028352916020019161101f565b820191905f5260205f20905b81548152906001019060200180831161100257829003601f168201915b505050505090505f815103611060576040517f6f08c58700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6005816040516110709190613351565b90815260200160405180910390206040518060a00160405290815f8201805461109890612e91565b80601f01602080910402602001604051908101604052809291908181526020018280546110c490612e91565b801561110f5780601f106110e65761010080835404028352916020019161110f565b820191905f5260205f20905b8154815290600101906020018083116110f257829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff1615151515815260200160028201805461119890612e91565b80601f01602080910402602001604051908101604052809291908181526020018280546111c490612e91565b801561120f5780601f106111e65761010080835404028352916020019161120f565b820191905f5260205f20905b8154815290600101906020018083116111f257829003601f168201915b50505050508152602001600382015f9054906101000a900460ff161515151581525050915050919050565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60605f60045f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2080546112aa90612e91565b80601f01602080910402602001604051908101604052809291908181526020018280546112d690612e91565b80156113215780601f106112f857610100808354040283529160200191611321565b820191905f5260205f20905b81548152906001019060200180831161130457829003601f168201915b505050505090505f815103611362576040517f6f08c58700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b611373612532565b60058383604051611385929190612e4c565b90815260200160405180910390206040518060a00160405290815f820180546113ad90612e91565b80601f01602080910402602001604051908101604052809291908181526020018280546113d990612e91565b80156114245780601f106113fb57610100808354040283529160200191611424565b820191905f5260205f20905b81548152906001019060200180831161140757829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff161515151581526020016002820180546114ad90612e91565b80601f01602080910402602001604051908101604052809291908181526020018280546114d990612e91565b80156115245780601f106114fb57610100808354040283529160200191611524565b820191905f5260205f20905b81548152906001019060200180831161150757829003601f168201915b50505050508152602001600382015f9054906101000a900460ff161515151581525050905092915050565b5f5f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff169050919050565b600681815481106115af575f80fd5b905f5260205f2090600402015f91509050805f0180546115ce90612e91565b80601f01602080910402602001604051908101604052809291908181526020018280546115fa90612e91565b80156116455780601f1061161c57610100808354040283529160200191611645565b820191905f5260205f20905b81548152906001019060200180831161162857829003601f168201915b505050505090806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff169080600201805461169290612e91565b80601f01602080910402602001604051908101604052809291908181526020018280546116be90612e91565b80156117095780601f106116e057610100808354040283529160200191611709565b820191905f5260205f20905b8154815290600101906020018083116116ec57829003601f168201915b505050505090806003015f9054906101000a900460ff16905085565b6004602052805f5260405f205f91509050805461174190612e91565b80601f016020809104026020016040519081016040528092919081815260200182805461176d90612e91565b80156117b85780601f1061178f576101008083540402835291602001916117b8565b820191905f5260205f20905b81548152906001019060200180831161179b57829003601f168201915b505050505081565b5f5f60045f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20805461180a90612e91565b80601f016020809104026020016040519081016040528092919081815260200182805461183690612e91565b80156118815780601f1061185857610100808354040283529160200191611881565b820191905f5260205f20905b81548152906001019060200180831161186457829003601f168201915b505050505090505f8151036118c2576040517f6f08c58700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6005826040516118d39190613351565b908152602001604051809103902090508060010160149054906101000a900460ff161561192c576040517f7c9a1cf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018160010160146101000a81548160ff0219169083151502179055505f5f90505b600680549050811015611a1e578473ffffffffffffffffffffffffffffffffffffffff166006828154811061198657611985613367565b5b905f5260205f2090600402016001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611a11576001600682815481106119e6576119e5613367565b5b905f5260205f20906004020160010160146101000a81548160ff021916908315150217905550611a1e565b808060010191505061194e565b5081604051611a2d9190613351565b60405180910390208473ffffffffffffffffffffffffffffffffffffffff167f0fb9ead1818c2619f3a46edf10c990f58864d0fbb5079852d10131189c66ead160405160405180910390a3600192505050919050565b60605f5f5f90505b600680549050811015611b09578484604051611aa89291906133c2565b604051809103902060068281548110611ac457611ac3613367565b5b905f5260205f209060040201600201604051611ae0919061346c565b604051809103902003611afc578180611af8906134af565b9250505b8080600101915050611a8b565b505f8167ffffffffffffffff811115611b2557611b24612865565b5b604051908082528060200260200182016040528015611b5e57816020015b611b4b612532565b815260200190600190039081611b435790505b5090505f5f5f90505b600680549050811015611dd7578686604051611b849291906133c2565b604051809103902060068281548110611ba057611b9f613367565b5b905f5260205f209060040201600201604051611bbc919061346c565b604051809103902003611dca5760068181548110611bdd57611bdc613367565b5b905f5260205f2090600402016040518060a00160405290815f82018054611c0390612e91565b80601f0160208091040260200160405190810160405280929190818152602001828054611c2f90612e91565b8015611c7a5780601f10611c5157610100808354040283529160200191611c7a565b820191905f5260205f20905b815481529060010190602001808311611c5d57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff16151515158152602001600282018054611d0390612e91565b80601f0160208091040260200160405190810160405280929190818152602001828054611d2f90612e91565b8015611d7a5780601f10611d5157610100808354040283529160200191611d7a565b820191905f5260205f20905b815481529060010190602001808311611d5d57829003601f168201915b50505050508152602001600382015f9054906101000a900460ff161515151581525050838381518110611db057611daf613367565b5b60200260200101819052508180611dc6906134af565b9250505b8080600101915050611b67565b5081935050505092915050565b606060045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208054611e2e90612e91565b80601f0160208091040260200160405190810160405280929190818152602001828054611e5a90612e91565b8015611ea55780601f10611e7c57610100808354040283529160200191611ea5565b820191905f5260205f20905b815481529060010190602001808311611e8857829003601f168201915b50505050509050919050565b60606006805480602002602001604051908101604052809291908181526020015f905b828210156120ad578382905f5260205f2090600402016040518060a00160405290815f82018054611f0490612e91565b80601f0160208091040260200160405190810160405280929190818152602001828054611f3090612e91565b8015611f7b5780601f10611f5257610100808354040283529160200191611f7b565b820191905f5260205f20905b815481529060010190602001808311611f5e57829003601f168201915b50505050508152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff1615151515815260200160028201805461200490612e91565b80601f016020809104026020016040519081016040528092919081815260200182805461203090612e91565b801561207b5780601f106120525761010080835404028352916020019161207b565b820191905f5260205f20905b81548152906001019060200180831161205e57829003601f168201915b50505050508152602001600382015f9054906101000a900460ff16151515158152505081526020019060010190611ed4565b50505050905090565b6060600180548060200260200160405190810160405280929190818152602001828054801561213757602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116120ee575b5050505050905090565b5f61214a6124fa565b905090565b5f5f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166122945760015f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550600181908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f3ef8564460ada92419608d823c014975d98f8104d7d1e68c222967ac6814cd9760405160405180910390a25b50565b5f5f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16156124f7575f5f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055505f5f90505b6001805490508110156124b2578173ffffffffffffffffffffffffffffffffffffffff166001828154811061237557612374613367565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036124a55760018080805490506123ca91906134f6565b815481106123db576123da613367565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001828154811061241757612416613367565b5b905f5260205f20015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600180548061246e5761246d613529565b5b600190038181905f5260205f20015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590556124b2565b808060010191505061233d565b508073ffffffffffffffffffffffffffffffffffffffff167fd2d636efcad0cea42e170256f4c5d8b1cd81e47b855557edaf44014e6cc4cee660405160405180910390a25b50565b5f6125043361154f565b1561251857601436033560601c9050612527565b61252061252b565b9050612528565b5b90565b5f33905090565b6040518060a00160405280606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f15158152602001606081526020015f151581525090565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6125b282612589565b9050919050565b6125c2816125a8565b81146125cc575f5ffd5b50565b5f813590506125dd816125b9565b92915050565b5f602082840312156125f8576125f7612581565b5b5f612605848285016125cf565b91505092915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f84011261262f5761262e61260e565b5b8235905067ffffffffffffffff81111561264c5761264b612612565b5b60208301915083600182028301111561266857612667612616565b5b9250929050565b5f5f6020838503121561268557612684612581565b5b5f83013567ffffffffffffffff8111156126a2576126a1612585565b5b6126ae8582860161261a565b92509250509250929050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6126fc826126ba565b61270681856126c4565b93506127168185602086016126d4565b61271f816126e2565b840191505092915050565b612733816125a8565b82525050565b5f8115159050919050565b61274d81612739565b82525050565b5f60a083015f8301518482035f86015261276d82826126f2565b9150506020830151612782602086018261272a565b5060408301516127956040860182612744565b50606083015184820360608601526127ad82826126f2565b91505060808301516127c26080860182612744565b508091505092915050565b5f6020820190508181035f8301526127e58184612753565b905092915050565b5f819050919050565b5f61281061280b61280684612589565b6127ed565b612589565b9050919050565b5f612821826127f6565b9050919050565b5f61283282612817565b9050919050565b61284281612828565b82525050565b5f60208201905061285b5f830184612839565b92915050565b5f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61289b826126e2565b810181811067ffffffffffffffff821117156128ba576128b9612865565b5b80604052505050565b5f6128cc612578565b90506128d88282612892565b919050565b5f67ffffffffffffffff8211156128f7576128f6612865565b5b612900826126e2565b9050602081019050919050565b828183375f83830152505050565b5f61292d612928846128dd565b6128c3565b90508281526020810184848401111561294957612948612861565b5b61295484828561290d565b509392505050565b5f82601f8301126129705761296f61260e565b5b813561298084826020860161291b565b91505092915050565b5f6020828403121561299e5761299d612581565b5b5f82013567ffffffffffffffff8111156129bb576129ba612585565b5b6129c78482850161295c565b91505092915050565b5f82825260208201905092915050565b5f6129ea826126ba565b6129f481856129d0565b9350612a048185602086016126d4565b612a0d816126e2565b840191505092915050565b612a21816125a8565b82525050565b612a3081612739565b82525050565b5f60a0820190508181035f830152612a4e81886129e0565b9050612a5d6020830187612a18565b612a6a6040830186612a27565b8181036060830152612a7c81856129e0565b9050612a8b6080830184612a27565b9695505050505050565b5f5f5f60408486031215612aac57612aab612581565b5b5f84013567ffffffffffffffff811115612ac957612ac8612585565b5b612ad58682870161261a565b93509350506020612ae8868287016125cf565b9150509250925092565b5f612afc82612817565b9050919050565b612b0c81612af2565b82525050565b5f602082019050612b255f830184612b03565b92915050565b5f6020820190508181035f830152612b4381846129e0565b905092915050565b5f602082019050612b5e5f830184612a27565b92915050565b5f819050919050565b612b7681612b64565b8114612b80575f5ffd5b50565b5f81359050612b9181612b6d565b92915050565b5f60208284031215612bac57612bab612581565b5b5f612bb984828501612b83565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f60a083015f8301518482035f860152612c0582826126f2565b9150506020830151612c1a602086018261272a565b506040830151612c2d6040860182612744565b5060608301518482036060860152612c4582826126f2565b9150506080830151612c5a6080860182612744565b508091505092915050565b5f612c708383612beb565b905092915050565b5f602082019050919050565b5f612c8e82612bc2565b612c988185612bcc565b935083602082028501612caa85612bdc565b805f5b85811015612ce55784840389528151612cc68582612c65565b9450612cd183612c78565b925060208a01995050600181019050612cad565b50829750879550505050505092915050565b5f6020820190508181035f830152612d0f8184612c84565b905092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f612d4b838361272a565b60208301905092915050565b5f602082019050919050565b5f612d6d82612d17565b612d778185612d21565b9350612d8283612d31565b805f5b83811015612db2578151612d998882612d40565b9750612da483612d57565b925050600181019050612d85565b5085935050505092915050565b5f6020820190508181035f830152612dd78184612d63565b905092915050565b5f81519050612ded816125b9565b92915050565b5f60208284031215612e0857612e07612581565b5b5f612e1584828501612ddf565b91505092915050565b5f81905092915050565b5f612e338385612e1e565b9350612e4083858461290d565b82840190509392505050565b5f612e58828486612e28565b91508190509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680612ea857607f821691505b602082108103612ebb57612eba612e64565b5b50919050565b5f602082019050612ed45f830184612a18565b92915050565b612ee381612739565b8114612eed575f5ffd5b50565b5f81519050612efe81612eda565b92915050565b5f60208284031215612f1957612f18612581565b5b5f612f2684828501612ef0565b91505092915050565b5f612f41612f3c846128dd565b6128c3565b905082815260208101848484011115612f5d57612f5c612861565b5b612f688482856126d4565b509392505050565b5f82601f830112612f8457612f8361260e565b5b8151612f94848260208601612f2f565b91505092915050565b5f60208284031215612fb257612fb1612581565b5b5f82015167ffffffffffffffff811115612fcf57612fce612585565b5b612fdb84828501612f70565b91505092915050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026130407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613005565b61304a8683613005565b95508019841693508086168417925050509392505050565b5f61307c61307761307284612b64565b6127ed565b612b64565b9050919050565b5f819050919050565b61309583613062565b6130a96130a182613083565b848454613011565b825550505050565b5f5f905090565b6130c06130b1565b6130cb81848461308c565b505050565b5b818110156130ee576130e35f826130b8565b6001810190506130d1565b5050565b601f8211156131335761310481612fe4565b61310d84612ff6565b8101602085101561311c578190505b61313061312885612ff6565b8301826130d0565b50505b505050565b5f82821c905092915050565b5f6131535f1984600802613138565b1980831691505092915050565b5f61316b8383613144565b9150826002028217905092915050565b613184826126ba565b67ffffffffffffffff81111561319d5761319c612865565b5b6131a78254612e91565b6131b28282856130f2565b5f60209050601f8311600181146131e3575f84156131d1578287015190505b6131db8582613160565b865550613242565b601f1984166131f186612fe4565b5f5b82811015613218578489015182556001820191506020850194506020810190506131f3565b868310156132355784890151613231601f891682613144565b8355505b6001600288020188555050505b505050505050565b5f82905092915050565b61325e838361324a565b67ffffffffffffffff81111561327757613276612865565b5b6132818254612e91565b61328c8282856130f2565b5f601f8311600181146132b9575f84156132a7578287013590505b6132b18582613160565b865550613318565b601f1984166132c786612fe4565b5f5b828110156132ee578489013582556001820191506020850194506020810190506132c9565b8683101561330b5784890135613307601f891682613144565b8355505b6001600288020188555050505b50505050505050565b5f61332b826126ba565b6133358185612e1e565b93506133458185602086016126d4565b80840191505092915050565b5f61335c8284613321565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f81905092915050565b5f6133a98385613394565b93506133b683858461290d565b82840190509392505050565b5f6133ce82848661339e565b91508190509392505050565b5f819050815f5260205f209050919050565b5f81546133f881612e91565b6134028186613394565b9450600182165f811461341c576001811461343157613463565b60ff1983168652811515820286019350613463565b61343a856133da565b5f5b8381101561345b5781548189015260018201915060208101905061343c565b838801955050505b50505092915050565b5f61347782846133ec565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6134b982612b64565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036134eb576134ea613482565b5b600182019050919050565b5f61350082612b64565b915061350b83612b64565b925082820390508181111561352357613522613482565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffdfea264697066735822122005f2fa6f6fb8a2bf1367335dd201b8ed0c7b7837f4399be389087a830efe82ac64736f6c634300081c0033",
}

// VoterManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use VoterManagerMetaData.ABI instead.
var VoterManagerABI = VoterManagerMetaData.ABI

// VoterManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use VoterManagerMetaData.Bin instead.
var VoterManagerBin = VoterManagerMetaData.Bin

// DeployVoterManager deploys a new Ethereum contract, binding an instance of VoterManager to it.
func DeployVoterManager(auth *bind.TransactOpts, backend bind.ContractBackend, _baseAddress common.Address, _kpuManagerAddress common.Address, trustedForwarders []common.Address) (common.Address, *types.Transaction, *VoterManager, error) {
	parsed, err := VoterManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(VoterManagerBin), backend, _baseAddress, _kpuManagerAddress, trustedForwarders)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &VoterManager{VoterManagerCaller: VoterManagerCaller{contract: contract}, VoterManagerTransactor: VoterManagerTransactor{contract: contract}, VoterManagerFilterer: VoterManagerFilterer{contract: contract}}, nil
}

// VoterManager is an auto generated Go binding around an Ethereum contract.
type VoterManager struct {
	VoterManagerCaller     // Read-only binding to the contract
	VoterManagerTransactor // Write-only binding to the contract
	VoterManagerFilterer   // Log filterer for contract events
}

// VoterManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type VoterManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VoterManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VoterManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VoterManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VoterManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VoterManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VoterManagerSession struct {
	Contract     *VoterManager     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VoterManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VoterManagerCallerSession struct {
	Contract *VoterManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// VoterManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VoterManagerTransactorSession struct {
	Contract     *VoterManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// VoterManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type VoterManagerRaw struct {
	Contract *VoterManager // Generic contract binding to access the raw methods on
}

// VoterManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VoterManagerCallerRaw struct {
	Contract *VoterManagerCaller // Generic read-only contract binding to access the raw methods on
}

// VoterManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VoterManagerTransactorRaw struct {
	Contract *VoterManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVoterManager creates a new instance of VoterManager, bound to a specific deployed contract.
func NewVoterManager(address common.Address, backend bind.ContractBackend) (*VoterManager, error) {
	contract, err := bindVoterManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &VoterManager{VoterManagerCaller: VoterManagerCaller{contract: contract}, VoterManagerTransactor: VoterManagerTransactor{contract: contract}, VoterManagerFilterer: VoterManagerFilterer{contract: contract}}, nil
}

// NewVoterManagerCaller creates a new read-only instance of VoterManager, bound to a specific deployed contract.
func NewVoterManagerCaller(address common.Address, caller bind.ContractCaller) (*VoterManagerCaller, error) {
	contract, err := bindVoterManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VoterManagerCaller{contract: contract}, nil
}

// NewVoterManagerTransactor creates a new write-only instance of VoterManager, bound to a specific deployed contract.
func NewVoterManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*VoterManagerTransactor, error) {
	contract, err := bindVoterManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VoterManagerTransactor{contract: contract}, nil
}

// NewVoterManagerFilterer creates a new log filterer instance of VoterManager, bound to a specific deployed contract.
func NewVoterManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*VoterManagerFilterer, error) {
	contract, err := bindVoterManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VoterManagerFilterer{contract: contract}, nil
}

// bindVoterManager binds a generic wrapper to an already deployed contract.
func bindVoterManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := VoterManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_VoterManager *VoterManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VoterManager.Contract.VoterManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_VoterManager *VoterManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VoterManager.Contract.VoterManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_VoterManager *VoterManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VoterManager.Contract.VoterManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_VoterManager *VoterManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VoterManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_VoterManager *VoterManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VoterManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_VoterManager *VoterManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VoterManager.Contract.contract.Transact(opts, method, params...)
}

// VoterNIKByAddresses is a free data retrieval call binding the contract method 0x95016313.
//
// Solidity: function _voterNIKByAddresses(address ) view returns(string)
func (_VoterManager *VoterManagerCaller) VoterNIKByAddresses(opts *bind.CallOpts, arg0 common.Address) (string, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "_voterNIKByAddresses", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VoterNIKByAddresses is a free data retrieval call binding the contract method 0x95016313.
//
// Solidity: function _voterNIKByAddresses(address ) view returns(string)
func (_VoterManager *VoterManagerSession) VoterNIKByAddresses(arg0 common.Address) (string, error) {
	return _VoterManager.Contract.VoterNIKByAddresses(&_VoterManager.CallOpts, arg0)
}

// VoterNIKByAddresses is a free data retrieval call binding the contract method 0x95016313.
//
// Solidity: function _voterNIKByAddresses(address ) view returns(string)
func (_VoterManager *VoterManagerCallerSession) VoterNIKByAddresses(arg0 common.Address) (string, error) {
	return _VoterManager.Contract.VoterNIKByAddresses(&_VoterManager.CallOpts, arg0)
}

// Voterss is a free data retrieval call binding the contract method 0x40794792.
//
// Solidity: function _voterss(string ) view returns(string nik, address voterAddress, bool hasVoted, string region, bool isRegistered)
func (_VoterManager *VoterManagerCaller) Voterss(opts *bind.CallOpts, arg0 string) (struct {
	Nik          string
	VoterAddress common.Address
	HasVoted     bool
	Region       string
	IsRegistered bool
}, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "_voterss", arg0)

	outstruct := new(struct {
		Nik          string
		VoterAddress common.Address
		HasVoted     bool
		Region       string
		IsRegistered bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Nik = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.VoterAddress = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.HasVoted = *abi.ConvertType(out[2], new(bool)).(*bool)
	outstruct.Region = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.IsRegistered = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// Voterss is a free data retrieval call binding the contract method 0x40794792.
//
// Solidity: function _voterss(string ) view returns(string nik, address voterAddress, bool hasVoted, string region, bool isRegistered)
func (_VoterManager *VoterManagerSession) Voterss(arg0 string) (struct {
	Nik          string
	VoterAddress common.Address
	HasVoted     bool
	Region       string
	IsRegistered bool
}, error) {
	return _VoterManager.Contract.Voterss(&_VoterManager.CallOpts, arg0)
}

// Voterss is a free data retrieval call binding the contract method 0x40794792.
//
// Solidity: function _voterss(string ) view returns(string nik, address voterAddress, bool hasVoted, string region, bool isRegistered)
func (_VoterManager *VoterManagerCallerSession) Voterss(arg0 string) (struct {
	Nik          string
	VoterAddress common.Address
	HasVoted     bool
	Region       string
	IsRegistered bool
}, error) {
	return _VoterManager.Contract.Voterss(&_VoterManager.CallOpts, arg0)
}

// Base is a free data retrieval call binding the contract method 0x5001f3b5.
//
// Solidity: function base() view returns(address)
func (_VoterManager *VoterManagerCaller) Base(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "base")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Base is a free data retrieval call binding the contract method 0x5001f3b5.
//
// Solidity: function base() view returns(address)
func (_VoterManager *VoterManagerSession) Base() (common.Address, error) {
	return _VoterManager.Contract.Base(&_VoterManager.CallOpts)
}

// Base is a free data retrieval call binding the contract method 0x5001f3b5.
//
// Solidity: function base() view returns(address)
func (_VoterManager *VoterManagerCallerSession) Base() (common.Address, error) {
	return _VoterManager.Contract.Base(&_VoterManager.CallOpts)
}

// GetAllVoter is a free data retrieval call binding the contract method 0xf44f4e14.
//
// Solidity: function getAllVoter() view returns((string,address,bool,string,bool)[])
func (_VoterManager *VoterManagerCaller) GetAllVoter(opts *bind.CallOpts) ([]IVoterManagerVoter, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "getAllVoter")

	if err != nil {
		return *new([]IVoterManagerVoter), err
	}

	out0 := *abi.ConvertType(out[0], new([]IVoterManagerVoter)).(*[]IVoterManagerVoter)

	return out0, err

}

// GetAllVoter is a free data retrieval call binding the contract method 0xf44f4e14.
//
// Solidity: function getAllVoter() view returns((string,address,bool,string,bool)[])
func (_VoterManager *VoterManagerSession) GetAllVoter() ([]IVoterManagerVoter, error) {
	return _VoterManager.Contract.GetAllVoter(&_VoterManager.CallOpts)
}

// GetAllVoter is a free data retrieval call binding the contract method 0xf44f4e14.
//
// Solidity: function getAllVoter() view returns((string,address,bool,string,bool)[])
func (_VoterManager *VoterManagerCallerSession) GetAllVoter() ([]IVoterManagerVoter, error) {
	return _VoterManager.Contract.GetAllVoter(&_VoterManager.CallOpts)
}

// GetTrustedForwarders is a free data retrieval call binding the contract method 0xff7196c8.
//
// Solidity: function getTrustedForwarders() view returns(address[])
func (_VoterManager *VoterManagerCaller) GetTrustedForwarders(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "getTrustedForwarders")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetTrustedForwarders is a free data retrieval call binding the contract method 0xff7196c8.
//
// Solidity: function getTrustedForwarders() view returns(address[])
func (_VoterManager *VoterManagerSession) GetTrustedForwarders() ([]common.Address, error) {
	return _VoterManager.Contract.GetTrustedForwarders(&_VoterManager.CallOpts)
}

// GetTrustedForwarders is a free data retrieval call binding the contract method 0xff7196c8.
//
// Solidity: function getTrustedForwarders() view returns(address[])
func (_VoterManager *VoterManagerCallerSession) GetTrustedForwarders() ([]common.Address, error) {
	return _VoterManager.Contract.GetTrustedForwarders(&_VoterManager.CallOpts)
}

// GetVoterByAddress is a free data retrieval call binding the contract method 0x4bdd7585.
//
// Solidity: function getVoterByAddress(address voterAddress) view returns((string,address,bool,string,bool))
func (_VoterManager *VoterManagerCaller) GetVoterByAddress(opts *bind.CallOpts, voterAddress common.Address) (IVoterManagerVoter, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "getVoterByAddress", voterAddress)

	if err != nil {
		return *new(IVoterManagerVoter), err
	}

	out0 := *abi.ConvertType(out[0], new(IVoterManagerVoter)).(*IVoterManagerVoter)

	return out0, err

}

// GetVoterByAddress is a free data retrieval call binding the contract method 0x4bdd7585.
//
// Solidity: function getVoterByAddress(address voterAddress) view returns((string,address,bool,string,bool))
func (_VoterManager *VoterManagerSession) GetVoterByAddress(voterAddress common.Address) (IVoterManagerVoter, error) {
	return _VoterManager.Contract.GetVoterByAddress(&_VoterManager.CallOpts, voterAddress)
}

// GetVoterByAddress is a free data retrieval call binding the contract method 0x4bdd7585.
//
// Solidity: function getVoterByAddress(address voterAddress) view returns((string,address,bool,string,bool))
func (_VoterManager *VoterManagerCallerSession) GetVoterByAddress(voterAddress common.Address) (IVoterManagerVoter, error) {
	return _VoterManager.Contract.GetVoterByAddress(&_VoterManager.CallOpts, voterAddress)
}

// GetVoterByNIK is a free data retrieval call binding the contract method 0x2a70ecca.
//
// Solidity: function getVoterByNIK(string nik) view returns((string,address,bool,string,bool))
func (_VoterManager *VoterManagerCaller) GetVoterByNIK(opts *bind.CallOpts, nik string) (IVoterManagerVoter, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "getVoterByNIK", nik)

	if err != nil {
		return *new(IVoterManagerVoter), err
	}

	out0 := *abi.ConvertType(out[0], new(IVoterManagerVoter)).(*IVoterManagerVoter)

	return out0, err

}

// GetVoterByNIK is a free data retrieval call binding the contract method 0x2a70ecca.
//
// Solidity: function getVoterByNIK(string nik) view returns((string,address,bool,string,bool))
func (_VoterManager *VoterManagerSession) GetVoterByNIK(nik string) (IVoterManagerVoter, error) {
	return _VoterManager.Contract.GetVoterByNIK(&_VoterManager.CallOpts, nik)
}

// GetVoterByNIK is a free data retrieval call binding the contract method 0x2a70ecca.
//
// Solidity: function getVoterByNIK(string nik) view returns((string,address,bool,string,bool))
func (_VoterManager *VoterManagerCallerSession) GetVoterByNIK(nik string) (IVoterManagerVoter, error) {
	return _VoterManager.Contract.GetVoterByNIK(&_VoterManager.CallOpts, nik)
}

// GetVoterByRegion is a free data retrieval call binding the contract method 0xe0d5343b.
//
// Solidity: function getVoterByRegion(string region) view returns((string,address,bool,string,bool)[])
func (_VoterManager *VoterManagerCaller) GetVoterByRegion(opts *bind.CallOpts, region string) ([]IVoterManagerVoter, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "getVoterByRegion", region)

	if err != nil {
		return *new([]IVoterManagerVoter), err
	}

	out0 := *abi.ConvertType(out[0], new([]IVoterManagerVoter)).(*[]IVoterManagerVoter)

	return out0, err

}

// GetVoterByRegion is a free data retrieval call binding the contract method 0xe0d5343b.
//
// Solidity: function getVoterByRegion(string region) view returns((string,address,bool,string,bool)[])
func (_VoterManager *VoterManagerSession) GetVoterByRegion(region string) ([]IVoterManagerVoter, error) {
	return _VoterManager.Contract.GetVoterByRegion(&_VoterManager.CallOpts, region)
}

// GetVoterByRegion is a free data retrieval call binding the contract method 0xe0d5343b.
//
// Solidity: function getVoterByRegion(string region) view returns((string,address,bool,string,bool)[])
func (_VoterManager *VoterManagerCallerSession) GetVoterByRegion(region string) ([]IVoterManagerVoter, error) {
	return _VoterManager.Contract.GetVoterByRegion(&_VoterManager.CallOpts, region)
}

// GetVoterNikByAddress is a free data retrieval call binding the contract method 0x5130298f.
//
// Solidity: function getVoterNikByAddress(address voterAddress) view returns(string)
func (_VoterManager *VoterManagerCaller) GetVoterNikByAddress(opts *bind.CallOpts, voterAddress common.Address) (string, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "getVoterNikByAddress", voterAddress)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetVoterNikByAddress is a free data retrieval call binding the contract method 0x5130298f.
//
// Solidity: function getVoterNikByAddress(address voterAddress) view returns(string)
func (_VoterManager *VoterManagerSession) GetVoterNikByAddress(voterAddress common.Address) (string, error) {
	return _VoterManager.Contract.GetVoterNikByAddress(&_VoterManager.CallOpts, voterAddress)
}

// GetVoterNikByAddress is a free data retrieval call binding the contract method 0x5130298f.
//
// Solidity: function getVoterNikByAddress(address voterAddress) view returns(string)
func (_VoterManager *VoterManagerCallerSession) GetVoterNikByAddress(voterAddress common.Address) (string, error) {
	return _VoterManager.Contract.GetVoterNikByAddress(&_VoterManager.CallOpts, voterAddress)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_VoterManager *VoterManagerCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_VoterManager *VoterManagerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _VoterManager.Contract.IsTrustedForwarder(&_VoterManager.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_VoterManager *VoterManagerCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _VoterManager.Contract.IsTrustedForwarder(&_VoterManager.CallOpts, forwarder)
}

// KpuManager is a free data retrieval call binding the contract method 0x34d1d2f2.
//
// Solidity: function kpuManager() view returns(address)
func (_VoterManager *VoterManagerCaller) KpuManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "kpuManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// KpuManager is a free data retrieval call binding the contract method 0x34d1d2f2.
//
// Solidity: function kpuManager() view returns(address)
func (_VoterManager *VoterManagerSession) KpuManager() (common.Address, error) {
	return _VoterManager.Contract.KpuManager(&_VoterManager.CallOpts)
}

// KpuManager is a free data retrieval call binding the contract method 0x34d1d2f2.
//
// Solidity: function kpuManager() view returns(address)
func (_VoterManager *VoterManagerCallerSession) KpuManager() (common.Address, error) {
	return _VoterManager.Contract.KpuManager(&_VoterManager.CallOpts)
}

// VoterAddressesArray is a free data retrieval call binding the contract method 0x89c7e391.
//
// Solidity: function voterAddressesArray(uint256 ) view returns(string nik, address voterAddress, bool hasVoted, string region, bool isRegistered)
func (_VoterManager *VoterManagerCaller) VoterAddressesArray(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Nik          string
	VoterAddress common.Address
	HasVoted     bool
	Region       string
	IsRegistered bool
}, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "voterAddressesArray", arg0)

	outstruct := new(struct {
		Nik          string
		VoterAddress common.Address
		HasVoted     bool
		Region       string
		IsRegistered bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Nik = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.VoterAddress = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.HasVoted = *abi.ConvertType(out[2], new(bool)).(*bool)
	outstruct.Region = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.IsRegistered = *abi.ConvertType(out[4], new(bool)).(*bool)

	return *outstruct, err

}

// VoterAddressesArray is a free data retrieval call binding the contract method 0x89c7e391.
//
// Solidity: function voterAddressesArray(uint256 ) view returns(string nik, address voterAddress, bool hasVoted, string region, bool isRegistered)
func (_VoterManager *VoterManagerSession) VoterAddressesArray(arg0 *big.Int) (struct {
	Nik          string
	VoterAddress common.Address
	HasVoted     bool
	Region       string
	IsRegistered bool
}, error) {
	return _VoterManager.Contract.VoterAddressesArray(&_VoterManager.CallOpts, arg0)
}

// VoterAddressesArray is a free data retrieval call binding the contract method 0x89c7e391.
//
// Solidity: function voterAddressesArray(uint256 ) view returns(string nik, address voterAddress, bool hasVoted, string region, bool isRegistered)
func (_VoterManager *VoterManagerCallerSession) VoterAddressesArray(arg0 *big.Int) (struct {
	Nik          string
	VoterAddress common.Address
	HasVoted     bool
	Region       string
	IsRegistered bool
}, error) {
	return _VoterManager.Contract.VoterAddressesArray(&_VoterManager.CallOpts, arg0)
}

// VoterNIKByAddress is a free data retrieval call binding the contract method 0xf0416e5f.
//
// Solidity: function voterNIKByAddress(address voter) view returns(string)
func (_VoterManager *VoterManagerCaller) VoterNIKByAddress(opts *bind.CallOpts, voter common.Address) (string, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "voterNIKByAddress", voter)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VoterNIKByAddress is a free data retrieval call binding the contract method 0xf0416e5f.
//
// Solidity: function voterNIKByAddress(address voter) view returns(string)
func (_VoterManager *VoterManagerSession) VoterNIKByAddress(voter common.Address) (string, error) {
	return _VoterManager.Contract.VoterNIKByAddress(&_VoterManager.CallOpts, voter)
}

// VoterNIKByAddress is a free data retrieval call binding the contract method 0xf0416e5f.
//
// Solidity: function voterNIKByAddress(address voter) view returns(string)
func (_VoterManager *VoterManagerCallerSession) VoterNIKByAddress(voter common.Address) (string, error) {
	return _VoterManager.Contract.VoterNIKByAddress(&_VoterManager.CallOpts, voter)
}

// Voters is a free data retrieval call binding the contract method 0x53fa2e64.
//
// Solidity: function voters(string nik) view returns((string,address,bool,string,bool))
func (_VoterManager *VoterManagerCaller) Voters(opts *bind.CallOpts, nik string) (IVoterManagerVoter, error) {
	var out []interface{}
	err := _VoterManager.contract.Call(opts, &out, "voters", nik)

	if err != nil {
		return *new(IVoterManagerVoter), err
	}

	out0 := *abi.ConvertType(out[0], new(IVoterManagerVoter)).(*IVoterManagerVoter)

	return out0, err

}

// Voters is a free data retrieval call binding the contract method 0x53fa2e64.
//
// Solidity: function voters(string nik) view returns((string,address,bool,string,bool))
func (_VoterManager *VoterManagerSession) Voters(nik string) (IVoterManagerVoter, error) {
	return _VoterManager.Contract.Voters(&_VoterManager.CallOpts, nik)
}

// Voters is a free data retrieval call binding the contract method 0x53fa2e64.
//
// Solidity: function voters(string nik) view returns((string,address,bool,string,bool))
func (_VoterManager *VoterManagerCallerSession) Voters(nik string) (IVoterManagerVoter, error) {
	return _VoterManager.Contract.Voters(&_VoterManager.CallOpts, nik)
}

// AddTrustedForwarder is a paid mutator transaction binding the contract method 0x26d00668.
//
// Solidity: function addTrustedForwarder(address forwarder) returns()
func (_VoterManager *VoterManagerTransactor) AddTrustedForwarder(opts *bind.TransactOpts, forwarder common.Address) (*types.Transaction, error) {
	return _VoterManager.contract.Transact(opts, "addTrustedForwarder", forwarder)
}

// AddTrustedForwarder is a paid mutator transaction binding the contract method 0x26d00668.
//
// Solidity: function addTrustedForwarder(address forwarder) returns()
func (_VoterManager *VoterManagerSession) AddTrustedForwarder(forwarder common.Address) (*types.Transaction, error) {
	return _VoterManager.Contract.AddTrustedForwarder(&_VoterManager.TransactOpts, forwarder)
}

// AddTrustedForwarder is a paid mutator transaction binding the contract method 0x26d00668.
//
// Solidity: function addTrustedForwarder(address forwarder) returns()
func (_VoterManager *VoterManagerTransactorSession) AddTrustedForwarder(forwarder common.Address) (*types.Transaction, error) {
	return _VoterManager.Contract.AddTrustedForwarder(&_VoterManager.TransactOpts, forwarder)
}

// MarkVoted is a paid mutator transaction binding the contract method 0xa8fd0cfa.
//
// Solidity: function markVoted(address voterAddress) returns(bool)
func (_VoterManager *VoterManagerTransactor) MarkVoted(opts *bind.TransactOpts, voterAddress common.Address) (*types.Transaction, error) {
	return _VoterManager.contract.Transact(opts, "markVoted", voterAddress)
}

// MarkVoted is a paid mutator transaction binding the contract method 0xa8fd0cfa.
//
// Solidity: function markVoted(address voterAddress) returns(bool)
func (_VoterManager *VoterManagerSession) MarkVoted(voterAddress common.Address) (*types.Transaction, error) {
	return _VoterManager.Contract.MarkVoted(&_VoterManager.TransactOpts, voterAddress)
}

// MarkVoted is a paid mutator transaction binding the contract method 0xa8fd0cfa.
//
// Solidity: function markVoted(address voterAddress) returns(bool)
func (_VoterManager *VoterManagerTransactorSession) MarkVoted(voterAddress common.Address) (*types.Transaction, error) {
	return _VoterManager.Contract.MarkVoted(&_VoterManager.TransactOpts, voterAddress)
}

// RegisterVoter is a paid mutator transaction binding the contract method 0x4a075de2.
//
// Solidity: function registerVoter(string nik, address voterAddress) returns()
func (_VoterManager *VoterManagerTransactor) RegisterVoter(opts *bind.TransactOpts, nik string, voterAddress common.Address) (*types.Transaction, error) {
	return _VoterManager.contract.Transact(opts, "registerVoter", nik, voterAddress)
}

// RegisterVoter is a paid mutator transaction binding the contract method 0x4a075de2.
//
// Solidity: function registerVoter(string nik, address voterAddress) returns()
func (_VoterManager *VoterManagerSession) RegisterVoter(nik string, voterAddress common.Address) (*types.Transaction, error) {
	return _VoterManager.Contract.RegisterVoter(&_VoterManager.TransactOpts, nik, voterAddress)
}

// RegisterVoter is a paid mutator transaction binding the contract method 0x4a075de2.
//
// Solidity: function registerVoter(string nik, address voterAddress) returns()
func (_VoterManager *VoterManagerTransactorSession) RegisterVoter(nik string, voterAddress common.Address) (*types.Transaction, error) {
	return _VoterManager.Contract.RegisterVoter(&_VoterManager.TransactOpts, nik, voterAddress)
}

// RemoveTrustedForwarder is a paid mutator transaction binding the contract method 0x3751d89c.
//
// Solidity: function removeTrustedForwarder(address forwarder) returns()
func (_VoterManager *VoterManagerTransactor) RemoveTrustedForwarder(opts *bind.TransactOpts, forwarder common.Address) (*types.Transaction, error) {
	return _VoterManager.contract.Transact(opts, "removeTrustedForwarder", forwarder)
}

// RemoveTrustedForwarder is a paid mutator transaction binding the contract method 0x3751d89c.
//
// Solidity: function removeTrustedForwarder(address forwarder) returns()
func (_VoterManager *VoterManagerSession) RemoveTrustedForwarder(forwarder common.Address) (*types.Transaction, error) {
	return _VoterManager.Contract.RemoveTrustedForwarder(&_VoterManager.TransactOpts, forwarder)
}

// RemoveTrustedForwarder is a paid mutator transaction binding the contract method 0x3751d89c.
//
// Solidity: function removeTrustedForwarder(address forwarder) returns()
func (_VoterManager *VoterManagerTransactorSession) RemoveTrustedForwarder(forwarder common.Address) (*types.Transaction, error) {
	return _VoterManager.Contract.RemoveTrustedForwarder(&_VoterManager.TransactOpts, forwarder)
}

// VoterManagerTrustedForwarderAddedIterator is returned from FilterTrustedForwarderAdded and is used to iterate over the raw logs and unpacked data for TrustedForwarderAdded events raised by the VoterManager contract.
type VoterManagerTrustedForwarderAddedIterator struct {
	Event *VoterManagerTrustedForwarderAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VoterManagerTrustedForwarderAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VoterManagerTrustedForwarderAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VoterManagerTrustedForwarderAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VoterManagerTrustedForwarderAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VoterManagerTrustedForwarderAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VoterManagerTrustedForwarderAdded represents a TrustedForwarderAdded event raised by the VoterManager contract.
type VoterManagerTrustedForwarderAdded struct {
	Forwarder common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterTrustedForwarderAdded is a free log retrieval operation binding the contract event 0x3ef8564460ada92419608d823c014975d98f8104d7d1e68c222967ac6814cd97.
//
// Solidity: event TrustedForwarderAdded(address indexed forwarder)
func (_VoterManager *VoterManagerFilterer) FilterTrustedForwarderAdded(opts *bind.FilterOpts, forwarder []common.Address) (*VoterManagerTrustedForwarderAddedIterator, error) {

	var forwarderRule []interface{}
	for _, forwarderItem := range forwarder {
		forwarderRule = append(forwarderRule, forwarderItem)
	}

	logs, sub, err := _VoterManager.contract.FilterLogs(opts, "TrustedForwarderAdded", forwarderRule)
	if err != nil {
		return nil, err
	}
	return &VoterManagerTrustedForwarderAddedIterator{contract: _VoterManager.contract, event: "TrustedForwarderAdded", logs: logs, sub: sub}, nil
}

// WatchTrustedForwarderAdded is a free log subscription operation binding the contract event 0x3ef8564460ada92419608d823c014975d98f8104d7d1e68c222967ac6814cd97.
//
// Solidity: event TrustedForwarderAdded(address indexed forwarder)
func (_VoterManager *VoterManagerFilterer) WatchTrustedForwarderAdded(opts *bind.WatchOpts, sink chan<- *VoterManagerTrustedForwarderAdded, forwarder []common.Address) (event.Subscription, error) {

	var forwarderRule []interface{}
	for _, forwarderItem := range forwarder {
		forwarderRule = append(forwarderRule, forwarderItem)
	}

	logs, sub, err := _VoterManager.contract.WatchLogs(opts, "TrustedForwarderAdded", forwarderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VoterManagerTrustedForwarderAdded)
				if err := _VoterManager.contract.UnpackLog(event, "TrustedForwarderAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTrustedForwarderAdded is a log parse operation binding the contract event 0x3ef8564460ada92419608d823c014975d98f8104d7d1e68c222967ac6814cd97.
//
// Solidity: event TrustedForwarderAdded(address indexed forwarder)
func (_VoterManager *VoterManagerFilterer) ParseTrustedForwarderAdded(log types.Log) (*VoterManagerTrustedForwarderAdded, error) {
	event := new(VoterManagerTrustedForwarderAdded)
	if err := _VoterManager.contract.UnpackLog(event, "TrustedForwarderAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VoterManagerTrustedForwarderRemovedIterator is returned from FilterTrustedForwarderRemoved and is used to iterate over the raw logs and unpacked data for TrustedForwarderRemoved events raised by the VoterManager contract.
type VoterManagerTrustedForwarderRemovedIterator struct {
	Event *VoterManagerTrustedForwarderRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VoterManagerTrustedForwarderRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VoterManagerTrustedForwarderRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VoterManagerTrustedForwarderRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VoterManagerTrustedForwarderRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VoterManagerTrustedForwarderRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VoterManagerTrustedForwarderRemoved represents a TrustedForwarderRemoved event raised by the VoterManager contract.
type VoterManagerTrustedForwarderRemoved struct {
	Forwarder common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterTrustedForwarderRemoved is a free log retrieval operation binding the contract event 0xd2d636efcad0cea42e170256f4c5d8b1cd81e47b855557edaf44014e6cc4cee6.
//
// Solidity: event TrustedForwarderRemoved(address indexed forwarder)
func (_VoterManager *VoterManagerFilterer) FilterTrustedForwarderRemoved(opts *bind.FilterOpts, forwarder []common.Address) (*VoterManagerTrustedForwarderRemovedIterator, error) {

	var forwarderRule []interface{}
	for _, forwarderItem := range forwarder {
		forwarderRule = append(forwarderRule, forwarderItem)
	}

	logs, sub, err := _VoterManager.contract.FilterLogs(opts, "TrustedForwarderRemoved", forwarderRule)
	if err != nil {
		return nil, err
	}
	return &VoterManagerTrustedForwarderRemovedIterator{contract: _VoterManager.contract, event: "TrustedForwarderRemoved", logs: logs, sub: sub}, nil
}

// WatchTrustedForwarderRemoved is a free log subscription operation binding the contract event 0xd2d636efcad0cea42e170256f4c5d8b1cd81e47b855557edaf44014e6cc4cee6.
//
// Solidity: event TrustedForwarderRemoved(address indexed forwarder)
func (_VoterManager *VoterManagerFilterer) WatchTrustedForwarderRemoved(opts *bind.WatchOpts, sink chan<- *VoterManagerTrustedForwarderRemoved, forwarder []common.Address) (event.Subscription, error) {

	var forwarderRule []interface{}
	for _, forwarderItem := range forwarder {
		forwarderRule = append(forwarderRule, forwarderItem)
	}

	logs, sub, err := _VoterManager.contract.WatchLogs(opts, "TrustedForwarderRemoved", forwarderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VoterManagerTrustedForwarderRemoved)
				if err := _VoterManager.contract.UnpackLog(event, "TrustedForwarderRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTrustedForwarderRemoved is a log parse operation binding the contract event 0xd2d636efcad0cea42e170256f4c5d8b1cd81e47b855557edaf44014e6cc4cee6.
//
// Solidity: event TrustedForwarderRemoved(address indexed forwarder)
func (_VoterManager *VoterManagerFilterer) ParseTrustedForwarderRemoved(log types.Log) (*VoterManagerTrustedForwarderRemoved, error) {
	event := new(VoterManagerTrustedForwarderRemoved)
	if err := _VoterManager.contract.UnpackLog(event, "TrustedForwarderRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VoterManagerVoterMarkedAsVotedIterator is returned from FilterVoterMarkedAsVoted and is used to iterate over the raw logs and unpacked data for VoterMarkedAsVoted events raised by the VoterManager contract.
type VoterManagerVoterMarkedAsVotedIterator struct {
	Event *VoterManagerVoterMarkedAsVoted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VoterManagerVoterMarkedAsVotedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VoterManagerVoterMarkedAsVoted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VoterManagerVoterMarkedAsVoted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VoterManagerVoterMarkedAsVotedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VoterManagerVoterMarkedAsVotedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VoterManagerVoterMarkedAsVoted represents a VoterMarkedAsVoted event raised by the VoterManager contract.
type VoterManagerVoterMarkedAsVoted struct {
	VoterAddress common.Address
	Nik          common.Hash
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVoterMarkedAsVoted is a free log retrieval operation binding the contract event 0x0fb9ead1818c2619f3a46edf10c990f58864d0fbb5079852d10131189c66ead1.
//
// Solidity: event VoterMarkedAsVoted(address indexed voterAddress, string indexed nik)
func (_VoterManager *VoterManagerFilterer) FilterVoterMarkedAsVoted(opts *bind.FilterOpts, voterAddress []common.Address, nik []string) (*VoterManagerVoterMarkedAsVotedIterator, error) {

	var voterAddressRule []interface{}
	for _, voterAddressItem := range voterAddress {
		voterAddressRule = append(voterAddressRule, voterAddressItem)
	}
	var nikRule []interface{}
	for _, nikItem := range nik {
		nikRule = append(nikRule, nikItem)
	}

	logs, sub, err := _VoterManager.contract.FilterLogs(opts, "VoterMarkedAsVoted", voterAddressRule, nikRule)
	if err != nil {
		return nil, err
	}
	return &VoterManagerVoterMarkedAsVotedIterator{contract: _VoterManager.contract, event: "VoterMarkedAsVoted", logs: logs, sub: sub}, nil
}

// WatchVoterMarkedAsVoted is a free log subscription operation binding the contract event 0x0fb9ead1818c2619f3a46edf10c990f58864d0fbb5079852d10131189c66ead1.
//
// Solidity: event VoterMarkedAsVoted(address indexed voterAddress, string indexed nik)
func (_VoterManager *VoterManagerFilterer) WatchVoterMarkedAsVoted(opts *bind.WatchOpts, sink chan<- *VoterManagerVoterMarkedAsVoted, voterAddress []common.Address, nik []string) (event.Subscription, error) {

	var voterAddressRule []interface{}
	for _, voterAddressItem := range voterAddress {
		voterAddressRule = append(voterAddressRule, voterAddressItem)
	}
	var nikRule []interface{}
	for _, nikItem := range nik {
		nikRule = append(nikRule, nikItem)
	}

	logs, sub, err := _VoterManager.contract.WatchLogs(opts, "VoterMarkedAsVoted", voterAddressRule, nikRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VoterManagerVoterMarkedAsVoted)
				if err := _VoterManager.contract.UnpackLog(event, "VoterMarkedAsVoted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVoterMarkedAsVoted is a log parse operation binding the contract event 0x0fb9ead1818c2619f3a46edf10c990f58864d0fbb5079852d10131189c66ead1.
//
// Solidity: event VoterMarkedAsVoted(address indexed voterAddress, string indexed nik)
func (_VoterManager *VoterManagerFilterer) ParseVoterMarkedAsVoted(log types.Log) (*VoterManagerVoterMarkedAsVoted, error) {
	event := new(VoterManagerVoterMarkedAsVoted)
	if err := _VoterManager.contract.UnpackLog(event, "VoterMarkedAsVoted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VoterManagerVoterRegisteredIterator is returned from FilterVoterRegistered and is used to iterate over the raw logs and unpacked data for VoterRegistered events raised by the VoterManager contract.
type VoterManagerVoterRegisteredIterator struct {
	Event *VoterManagerVoterRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VoterManagerVoterRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VoterManagerVoterRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VoterManagerVoterRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VoterManagerVoterRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VoterManagerVoterRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VoterManagerVoterRegistered represents a VoterRegistered event raised by the VoterManager contract.
type VoterManagerVoterRegistered struct {
	Nik          common.Hash
	VoterAddress common.Address
	Region       string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVoterRegistered is a free log retrieval operation binding the contract event 0xe8bf381bec3899d7c4d98d7e52cfd45dfe7254b2ceafbb4d6dca1235ed10624d.
//
// Solidity: event VoterRegistered(string indexed nik, address indexed voterAddress, string region)
func (_VoterManager *VoterManagerFilterer) FilterVoterRegistered(opts *bind.FilterOpts, nik []string, voterAddress []common.Address) (*VoterManagerVoterRegisteredIterator, error) {

	var nikRule []interface{}
	for _, nikItem := range nik {
		nikRule = append(nikRule, nikItem)
	}
	var voterAddressRule []interface{}
	for _, voterAddressItem := range voterAddress {
		voterAddressRule = append(voterAddressRule, voterAddressItem)
	}

	logs, sub, err := _VoterManager.contract.FilterLogs(opts, "VoterRegistered", nikRule, voterAddressRule)
	if err != nil {
		return nil, err
	}
	return &VoterManagerVoterRegisteredIterator{contract: _VoterManager.contract, event: "VoterRegistered", logs: logs, sub: sub}, nil
}

// WatchVoterRegistered is a free log subscription operation binding the contract event 0xe8bf381bec3899d7c4d98d7e52cfd45dfe7254b2ceafbb4d6dca1235ed10624d.
//
// Solidity: event VoterRegistered(string indexed nik, address indexed voterAddress, string region)
func (_VoterManager *VoterManagerFilterer) WatchVoterRegistered(opts *bind.WatchOpts, sink chan<- *VoterManagerVoterRegistered, nik []string, voterAddress []common.Address) (event.Subscription, error) {

	var nikRule []interface{}
	for _, nikItem := range nik {
		nikRule = append(nikRule, nikItem)
	}
	var voterAddressRule []interface{}
	for _, voterAddressItem := range voterAddress {
		voterAddressRule = append(voterAddressRule, voterAddressItem)
	}

	logs, sub, err := _VoterManager.contract.WatchLogs(opts, "VoterRegistered", nikRule, voterAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VoterManagerVoterRegistered)
				if err := _VoterManager.contract.UnpackLog(event, "VoterRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVoterRegistered is a log parse operation binding the contract event 0xe8bf381bec3899d7c4d98d7e52cfd45dfe7254b2ceafbb4d6dca1235ed10624d.
//
// Solidity: event VoterRegistered(string indexed nik, address indexed voterAddress, string region)
func (_VoterManager *VoterManagerFilterer) ParseVoterRegistered(log types.Log) (*VoterManagerVoterRegistered, error) {
	event := new(VoterManagerVoterRegistered)
	if err := _VoterManager.contract.UnpackLog(event, "VoterRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
