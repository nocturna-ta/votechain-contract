// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	big "math/big"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	binding "github.com/nocturna-ta/votechain-contract/binding"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"
)

// IVotechainCaller is an autogenerated mock type for the IVotechainCaller type
type IVotechainCaller struct {
	mock.Mock
}

// CandidateAddressesArray provides a mock function with given fields: opts, arg0
func (_m *IVotechainCaller) CandidateAddressesArray(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Id          string
	Name        string
	CandidateNo string
	VoteCount   *big.Int
	IsActive    bool
}, error) {
	ret := _m.Called(opts, arg0)

	if len(ret) == 0 {
		panic("no return value specified for CandidateAddressesArray")
	}

	var r0 struct {
		Id          string
		Name        string
		CandidateNo string
		VoteCount   *big.Int
		IsActive    bool
	}
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) (struct {
		Id          string
		Name        string
		CandidateNo string
		VoteCount   *big.Int
		IsActive    bool
	}, error)); ok {
		return rf(opts, arg0)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) struct {
		Id          string
		Name        string
		CandidateNo string
		VoteCount   *big.Int
		IsActive    bool
	}); ok {
		r0 = rf(opts, arg0)
	} else {
		r0 = ret.Get(0).(struct {
			Id          string
			Name        string
			CandidateNo string
			VoteCount   *big.Int
			IsActive    bool
		})
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, *big.Int) error); ok {
		r1 = rf(opts, arg0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Candidates provides a mock function with given fields: opts, arg0
func (_m *IVotechainCaller) Candidates(opts *bind.CallOpts, arg0 string) (struct {
	Id          string
	Name        string
	CandidateNo string
	VoteCount   *big.Int
	IsActive    bool
}, error) {
	ret := _m.Called(opts, arg0)

	if len(ret) == 0 {
		panic("no return value specified for Candidates")
	}

	var r0 struct {
		Id          string
		Name        string
		CandidateNo string
		VoteCount   *big.Int
		IsActive    bool
	}
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) (struct {
		Id          string
		Name        string
		CandidateNo string
		VoteCount   *big.Int
		IsActive    bool
	}, error)); ok {
		return rf(opts, arg0)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) struct {
		Id          string
		Name        string
		CandidateNo string
		VoteCount   *big.Int
		IsActive    bool
	}); ok {
		r0 = rf(opts, arg0)
	} else {
		r0 = ret.Get(0).(struct {
			Id          string
			Name        string
			CandidateNo string
			VoteCount   *big.Int
			IsActive    bool
		})
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, string) error); ok {
		r1 = rf(opts, arg0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCandidates provides a mock function with given fields: opts
func (_m *IVotechainCaller) GetAllCandidates(opts *bind.CallOpts) ([]binding.VotechainCandidate, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCandidates")
	}

	var r0 []binding.VotechainCandidate
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) ([]binding.VotechainCandidate, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) []binding.VotechainCandidate); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]binding.VotechainCandidate)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllKPUBranches provides a mock function with given fields: opts
func (_m *IVotechainCaller) GetAllKPUBranches(opts *bind.CallOpts) ([]binding.VotechainKPUBranch, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetAllKPUBranches")
	}

	var r0 []binding.VotechainKPUBranch
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) ([]binding.VotechainKPUBranch, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) []binding.VotechainKPUBranch); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]binding.VotechainKPUBranch)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllVoter provides a mock function with given fields: opts
func (_m *IVotechainCaller) GetAllVoter(opts *bind.CallOpts) ([]binding.VotechainVoter, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetAllVoter")
	}

	var r0 []binding.VotechainVoter
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) ([]binding.VotechainVoter, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) []binding.VotechainVoter); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]binding.VotechainVoter)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBranchByAddress provides a mock function with given fields: opts, branchAddress
func (_m *IVotechainCaller) GetBranchByAddress(opts *bind.CallOpts, branchAddress common.Address) (binding.VotechainKPUBranch, error) {
	ret := _m.Called(opts, branchAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetBranchByAddress")
	}

	var r0 binding.VotechainKPUBranch
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (binding.VotechainKPUBranch, error)); ok {
		return rf(opts, branchAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) binding.VotechainKPUBranch); ok {
		r0 = rf(opts, branchAddress)
	} else {
		r0 = ret.Get(0).(binding.VotechainKPUBranch)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, branchAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCandidate provides a mock function with given fields: opts, candidateId
func (_m *IVotechainCaller) GetCandidate(opts *bind.CallOpts, candidateId string) (binding.VotechainCandidate, error) {
	ret := _m.Called(opts, candidateId)

	if len(ret) == 0 {
		panic("no return value specified for GetCandidate")
	}

	var r0 binding.VotechainCandidate
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) (binding.VotechainCandidate, error)); ok {
		return rf(opts, candidateId)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) binding.VotechainCandidate); ok {
		r0 = rf(opts, candidateId)
	} else {
		r0 = ret.Get(0).(binding.VotechainCandidate)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, string) error); ok {
		r1 = rf(opts, candidateId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCandidateByNo provides a mock function with given fields: opts, candidateNo
func (_m *IVotechainCaller) GetCandidateByNo(opts *bind.CallOpts, candidateNo string) (binding.VotechainCandidate, error) {
	ret := _m.Called(opts, candidateNo)

	if len(ret) == 0 {
		panic("no return value specified for GetCandidateByNo")
	}

	var r0 binding.VotechainCandidate
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) (binding.VotechainCandidate, error)); ok {
		return rf(opts, candidateNo)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) binding.VotechainCandidate); ok {
		r0 = rf(opts, candidateNo)
	} else {
		r0 = ret.Get(0).(binding.VotechainCandidate)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, string) error); ok {
		r1 = rf(opts, candidateNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoterByAddress provides a mock function with given fields: opts, voterAddress
func (_m *IVotechainCaller) GetVoterByAddress(opts *bind.CallOpts, voterAddress common.Address) (binding.VotechainVoter, error) {
	ret := _m.Called(opts, voterAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetVoterByAddress")
	}

	var r0 binding.VotechainVoter
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (binding.VotechainVoter, error)); ok {
		return rf(opts, voterAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) binding.VotechainVoter); ok {
		r0 = rf(opts, voterAddress)
	} else {
		r0 = ret.Get(0).(binding.VotechainVoter)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, voterAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoterByNIK provides a mock function with given fields: opts, nik
func (_m *IVotechainCaller) GetVoterByNIK(opts *bind.CallOpts, nik string) (binding.VotechainVoter, error) {
	ret := _m.Called(opts, nik)

	if len(ret) == 0 {
		panic("no return value specified for GetVoterByNIK")
	}

	var r0 binding.VotechainVoter
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) (binding.VotechainVoter, error)); ok {
		return rf(opts, nik)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) binding.VotechainVoter); ok {
		r0 = rf(opts, nik)
	} else {
		r0 = ret.Get(0).(binding.VotechainVoter)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, string) error); ok {
		r1 = rf(opts, nik)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoterByRegion provides a mock function with given fields: opts, region
func (_m *IVotechainCaller) GetVoterByRegion(opts *bind.CallOpts, region string) ([]binding.VotechainVoter, error) {
	ret := _m.Called(opts, region)

	if len(ret) == 0 {
		panic("no return value specified for GetVoterByRegion")
	}

	var r0 []binding.VotechainVoter
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) ([]binding.VotechainVoter, error)); ok {
		return rf(opts, region)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) []binding.VotechainVoter); ok {
		r0 = rf(opts, region)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]binding.VotechainVoter)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, string) error); ok {
		r1 = rf(opts, region)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KpuAdmin provides a mock function with given fields: opts
func (_m *IVotechainCaller) KpuAdmin(opts *bind.CallOpts) (common.Address, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for KpuAdmin")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (common.Address, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) common.Address); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KpuBranchAddressesArray provides a mock function with given fields: opts, arg0
func (_m *IVotechainCaller) KpuBranchAddressesArray(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Name          string
	BranchAddress common.Address
	IsActive      bool
	Region        string
}, error) {
	ret := _m.Called(opts, arg0)

	if len(ret) == 0 {
		panic("no return value specified for KpuBranchAddressesArray")
	}

	var r0 struct {
		Name          string
		BranchAddress common.Address
		IsActive      bool
		Region        string
	}
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) (struct {
		Name          string
		BranchAddress common.Address
		IsActive      bool
		Region        string
	}, error)); ok {
		return rf(opts, arg0)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) struct {
		Name          string
		BranchAddress common.Address
		IsActive      bool
		Region        string
	}); ok {
		r0 = rf(opts, arg0)
	} else {
		r0 = ret.Get(0).(struct {
			Name          string
			BranchAddress common.Address
			IsActive      bool
			Region        string
		})
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, *big.Int) error); ok {
		r1 = rf(opts, arg0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KpuBranches provides a mock function with given fields: opts, arg0
func (_m *IVotechainCaller) KpuBranches(opts *bind.CallOpts, arg0 common.Address) (struct {
	Name          string
	BranchAddress common.Address
	IsActive      bool
	Region        string
}, error) {
	ret := _m.Called(opts, arg0)

	if len(ret) == 0 {
		panic("no return value specified for KpuBranches")
	}

	var r0 struct {
		Name          string
		BranchAddress common.Address
		IsActive      bool
		Region        string
	}
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (struct {
		Name          string
		BranchAddress common.Address
		IsActive      bool
		Region        string
	}, error)); ok {
		return rf(opts, arg0)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) struct {
		Name          string
		BranchAddress common.Address
		IsActive      bool
		Region        string
	}); ok {
		r0 = rf(opts, arg0)
	} else {
		r0 = ret.Get(0).(struct {
			Name          string
			BranchAddress common.Address
			IsActive      bool
			Region        string
		})
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, arg0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VoterAddressesArray provides a mock function with given fields: opts, arg0
func (_m *IVotechainCaller) VoterAddressesArray(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Nik          string
	VoterAddress common.Address
	HasVoted     bool
	Region       string
	IsRegistered bool
}, error) {
	ret := _m.Called(opts, arg0)

	if len(ret) == 0 {
		panic("no return value specified for VoterAddressesArray")
	}

	var r0 struct {
		Nik          string
		VoterAddress common.Address
		HasVoted     bool
		Region       string
		IsRegistered bool
	}
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) (struct {
		Nik          string
		VoterAddress common.Address
		HasVoted     bool
		Region       string
		IsRegistered bool
	}, error)); ok {
		return rf(opts, arg0)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) struct {
		Nik          string
		VoterAddress common.Address
		HasVoted     bool
		Region       string
		IsRegistered bool
	}); ok {
		r0 = rf(opts, arg0)
	} else {
		r0 = ret.Get(0).(struct {
			Nik          string
			VoterAddress common.Address
			HasVoted     bool
			Region       string
			IsRegistered bool
		})
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, *big.Int) error); ok {
		r1 = rf(opts, arg0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VoterNIKByAddress provides a mock function with given fields: opts, arg0
func (_m *IVotechainCaller) VoterNIKByAddress(opts *bind.CallOpts, arg0 common.Address) (string, error) {
	ret := _m.Called(opts, arg0)

	if len(ret) == 0 {
		panic("no return value specified for VoterNIKByAddress")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (string, error)); ok {
		return rf(opts, arg0)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) string); ok {
		r0 = rf(opts, arg0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, arg0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Voters provides a mock function with given fields: opts, arg0
func (_m *IVotechainCaller) Voters(opts *bind.CallOpts, arg0 string) (struct {
	Nik          string
	VoterAddress common.Address
	HasVoted     bool
	Region       string
	IsRegistered bool
}, error) {
	ret := _m.Called(opts, arg0)

	if len(ret) == 0 {
		panic("no return value specified for Voters")
	}

	var r0 struct {
		Nik          string
		VoterAddress common.Address
		HasVoted     bool
		Region       string
		IsRegistered bool
	}
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) (struct {
		Nik          string
		VoterAddress common.Address
		HasVoted     bool
		Region       string
		IsRegistered bool
	}, error)); ok {
		return rf(opts, arg0)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) struct {
		Nik          string
		VoterAddress common.Address
		HasVoted     bool
		Region       string
		IsRegistered bool
	}); ok {
		r0 = rf(opts, arg0)
	} else {
		r0 = ret.Get(0).(struct {
			Nik          string
			VoterAddress common.Address
			HasVoted     bool
			Region       string
			IsRegistered bool
		})
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, string) error); ok {
		r1 = rf(opts, arg0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VotingActive provides a mock function with given fields: opts
func (_m *IVotechainCaller) VotingActive(opts *bind.CallOpts) (bool, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for VotingActive")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (bool, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) bool); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIVotechainCaller creates a new instance of IVotechainCaller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIVotechainCaller(t interface {
	mock.TestingT
	Cleanup(func())
}) *IVotechainCaller {
	mock := &IVotechainCaller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
