// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"

	voterManager "github.com/nocturna-ta/votechain-contract/binding/voterManager"
)

// VoterManagerInterface is an autogenerated mock type for the VoterManagerInterface type
type VoterManagerInterface struct {
	mock.Mock
}

// GetVoterByAddress provides a mock function with given fields: opts, voterAddress
func (_m *VoterManagerInterface) GetVoterByAddress(opts *bind.CallOpts, voterAddress common.Address) (voterManager.IVoterManagerVoter, error) {
	ret := _m.Called(opts, voterAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetVoterByAddress")
	}

	var r0 voterManager.IVoterManagerVoter
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (voterManager.IVoterManagerVoter, error)); ok {
		return rf(opts, voterAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) voterManager.IVoterManagerVoter); ok {
		r0 = rf(opts, voterAddress)
	} else {
		r0 = ret.Get(0).(voterManager.IVoterManagerVoter)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, voterAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoterNikByAddress provides a mock function with given fields: opts, voterAddress
func (_m *VoterManagerInterface) GetVoterNikByAddress(opts *bind.CallOpts, voterAddress common.Address) (string, error) {
	ret := _m.Called(opts, voterAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetVoterNikByAddress")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (string, error)); ok {
		return rf(opts, voterAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) string); ok {
		r0 = rf(opts, voterAddress)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, voterAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkVoted provides a mock function with given fields: opts, voterAddress
func (_m *VoterManagerInterface) MarkVoted(opts *bind.TransactOpts, voterAddress common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, voterAddress)

	if len(ret) == 0 {
		panic("no return value specified for MarkVoted")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, voterAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) *types.Transaction); ok {
		r0 = rf(opts, voterAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address) error); ok {
		r1 = rf(opts, voterAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterVoter provides a mock function with given fields: opts, nik, voterAddress
func (_m *VoterManagerInterface) RegisterVoter(opts *bind.TransactOpts, nik string, voterAddress common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, nik, voterAddress)

	if len(ret) == 0 {
		panic("no return value specified for RegisterVoter")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, nik, voterAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string, common.Address) *types.Transaction); ok {
		r0 = rf(opts, nik, voterAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, string, common.Address) error); ok {
		r1 = rf(opts, nik, voterAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewVoterManagerInterface creates a new instance of VoterManagerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVoterManagerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *VoterManagerInterface {
	mock := &VoterManagerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
