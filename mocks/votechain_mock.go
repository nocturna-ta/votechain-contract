// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	big "math/big"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	binding "github.com/nocturna-ta/votechain-contract/binding"

	common "github.com/ethereum/go-ethereum/common"

	event "github.com/ethereum/go-ethereum/event"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// IVotechain is an autogenerated mock type for the IVotechain type
type IVotechain struct {
	mock.Mock
}

// AddCandidate provides a mock function with given fields: opts, candidateId, name, candidateNo
func (_m *IVotechain) AddCandidate(opts *bind.TransactOpts, candidateId string, name string, candidateNo string) (*types.Transaction, error) {
	ret := _m.Called(opts, candidateId, name, candidateNo)

	if len(ret) == 0 {
		panic("no return value specified for AddCandidate")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string, string, string) (*types.Transaction, error)); ok {
		return rf(opts, candidateId, name, candidateNo)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string, string, string) *types.Transaction); ok {
		r0 = rf(opts, candidateId, name, candidateNo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, string, string, string) error); ok {
		r1 = rf(opts, candidateId, name, candidateNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CandidateAddressesArray provides a mock function with given fields: opts, arg0
func (_m *IVotechain) CandidateAddressesArray(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Id          string
	Name        string
	CandidateNo string
	VoteCount   *big.Int
	IsActive    bool
}, error) {
	ret := _m.Called(opts, arg0)

	if len(ret) == 0 {
		panic("no return value specified for CandidateAddressesArray")
	}

	var r0 struct {
		Id          string
		Name        string
		CandidateNo string
		VoteCount   *big.Int
		IsActive    bool
	}
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) (struct {
		Id          string
		Name        string
		CandidateNo string
		VoteCount   *big.Int
		IsActive    bool
	}, error)); ok {
		return rf(opts, arg0)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) struct {
		Id          string
		Name        string
		CandidateNo string
		VoteCount   *big.Int
		IsActive    bool
	}); ok {
		r0 = rf(opts, arg0)
	} else {
		r0 = ret.Get(0).(struct {
			Id          string
			Name        string
			CandidateNo string
			VoteCount   *big.Int
			IsActive    bool
		})
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, *big.Int) error); ok {
		r1 = rf(opts, arg0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Candidates provides a mock function with given fields: opts, arg0
func (_m *IVotechain) Candidates(opts *bind.CallOpts, arg0 string) (struct {
	Id          string
	Name        string
	CandidateNo string
	VoteCount   *big.Int
	IsActive    bool
}, error) {
	ret := _m.Called(opts, arg0)

	if len(ret) == 0 {
		panic("no return value specified for Candidates")
	}

	var r0 struct {
		Id          string
		Name        string
		CandidateNo string
		VoteCount   *big.Int
		IsActive    bool
	}
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) (struct {
		Id          string
		Name        string
		CandidateNo string
		VoteCount   *big.Int
		IsActive    bool
	}, error)); ok {
		return rf(opts, arg0)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) struct {
		Id          string
		Name        string
		CandidateNo string
		VoteCount   *big.Int
		IsActive    bool
	}); ok {
		r0 = rf(opts, arg0)
	} else {
		r0 = ret.Get(0).(struct {
			Id          string
			Name        string
			CandidateNo string
			VoteCount   *big.Int
			IsActive    bool
		})
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, string) error); ok {
		r1 = rf(opts, arg0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateKPUBranch provides a mock function with given fields: opts, branchAddress
func (_m *IVotechain) DeactivateKPUBranch(opts *bind.TransactOpts, branchAddress common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, branchAddress)

	if len(ret) == 0 {
		panic("no return value specified for DeactivateKPUBranch")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, branchAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) *types.Transaction); ok {
		r0 = rf(opts, branchAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address) error); ok {
		r1 = rf(opts, branchAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterCandidateAdded provides a mock function with given fields: opts, candidateId
func (_m *IVotechain) FilterCandidateAdded(opts *bind.FilterOpts, candidateId []string) (*binding.VotechainCandidateAddedIterator, error) {
	ret := _m.Called(opts, candidateId)

	if len(ret) == 0 {
		panic("no return value specified for FilterCandidateAdded")
	}

	var r0 *binding.VotechainCandidateAddedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []string) (*binding.VotechainCandidateAddedIterator, error)); ok {
		return rf(opts, candidateId)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []string) *binding.VotechainCandidateAddedIterator); ok {
		r0 = rf(opts, candidateId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainCandidateAddedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []string) error); ok {
		r1 = rf(opts, candidateId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterCandidateStatusChanged provides a mock function with given fields: opts, candidateId
func (_m *IVotechain) FilterCandidateStatusChanged(opts *bind.FilterOpts, candidateId []string) (*binding.VotechainCandidateStatusChangedIterator, error) {
	ret := _m.Called(opts, candidateId)

	if len(ret) == 0 {
		panic("no return value specified for FilterCandidateStatusChanged")
	}

	var r0 *binding.VotechainCandidateStatusChangedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []string) (*binding.VotechainCandidateStatusChangedIterator, error)); ok {
		return rf(opts, candidateId)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []string) *binding.VotechainCandidateStatusChangedIterator); ok {
		r0 = rf(opts, candidateId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainCandidateStatusChangedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []string) error); ok {
		r1 = rf(opts, candidateId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterKPUBranchDeactivated provides a mock function with given fields: opts, branchAddress
func (_m *IVotechain) FilterKPUBranchDeactivated(opts *bind.FilterOpts, branchAddress []common.Address) (*binding.VotechainKPUBranchDeactivatedIterator, error) {
	ret := _m.Called(opts, branchAddress)

	if len(ret) == 0 {
		panic("no return value specified for FilterKPUBranchDeactivated")
	}

	var r0 *binding.VotechainKPUBranchDeactivatedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address) (*binding.VotechainKPUBranchDeactivatedIterator, error)); ok {
		return rf(opts, branchAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address) *binding.VotechainKPUBranchDeactivatedIterator); ok {
		r0 = rf(opts, branchAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainKPUBranchDeactivatedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address) error); ok {
		r1 = rf(opts, branchAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterKPUBranchRegistered provides a mock function with given fields: opts, branchAddress
func (_m *IVotechain) FilterKPUBranchRegistered(opts *bind.FilterOpts, branchAddress []common.Address) (*binding.VotechainKPUBranchRegisteredIterator, error) {
	ret := _m.Called(opts, branchAddress)

	if len(ret) == 0 {
		panic("no return value specified for FilterKPUBranchRegistered")
	}

	var r0 *binding.VotechainKPUBranchRegisteredIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address) (*binding.VotechainKPUBranchRegisteredIterator, error)); ok {
		return rf(opts, branchAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address) *binding.VotechainKPUBranchRegisteredIterator); ok {
		r0 = rf(opts, branchAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainKPUBranchRegisteredIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address) error); ok {
		r1 = rf(opts, branchAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterVoteCasted provides a mock function with given fields: opts, nik, candidateId
func (_m *IVotechain) FilterVoteCasted(opts *bind.FilterOpts, nik []string, candidateId []string) (*binding.VotechainVoteCastedIterator, error) {
	ret := _m.Called(opts, nik, candidateId)

	if len(ret) == 0 {
		panic("no return value specified for FilterVoteCasted")
	}

	var r0 *binding.VotechainVoteCastedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []string, []string) (*binding.VotechainVoteCastedIterator, error)); ok {
		return rf(opts, nik, candidateId)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []string, []string) *binding.VotechainVoteCastedIterator); ok {
		r0 = rf(opts, nik, candidateId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainVoteCastedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []string, []string) error); ok {
		r1 = rf(opts, nik, candidateId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterVoterRegistered provides a mock function with given fields: opts, nik, voterAddress
func (_m *IVotechain) FilterVoterRegistered(opts *bind.FilterOpts, nik []string, voterAddress []common.Address) (*binding.VotechainVoterRegisteredIterator, error) {
	ret := _m.Called(opts, nik, voterAddress)

	if len(ret) == 0 {
		panic("no return value specified for FilterVoterRegistered")
	}

	var r0 *binding.VotechainVoterRegisteredIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []string, []common.Address) (*binding.VotechainVoterRegisteredIterator, error)); ok {
		return rf(opts, nik, voterAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []string, []common.Address) *binding.VotechainVoterRegisteredIterator); ok {
		r0 = rf(opts, nik, voterAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainVoterRegisteredIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []string, []common.Address) error); ok {
		r1 = rf(opts, nik, voterAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterVotingStatusChanged provides a mock function with given fields: opts
func (_m *IVotechain) FilterVotingStatusChanged(opts *bind.FilterOpts) (*binding.VotechainVotingStatusChangedIterator, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for FilterVotingStatusChanged")
	}

	var r0 *binding.VotechainVotingStatusChangedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts) (*binding.VotechainVotingStatusChangedIterator, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts) *binding.VotechainVotingStatusChangedIterator); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainVotingStatusChangedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCandidates provides a mock function with given fields: opts
func (_m *IVotechain) GetAllCandidates(opts *bind.CallOpts) ([]binding.VotechainCandidate, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCandidates")
	}

	var r0 []binding.VotechainCandidate
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) ([]binding.VotechainCandidate, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) []binding.VotechainCandidate); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]binding.VotechainCandidate)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllKPUBranches provides a mock function with given fields: opts
func (_m *IVotechain) GetAllKPUBranches(opts *bind.CallOpts) ([]binding.VotechainKPUBranch, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetAllKPUBranches")
	}

	var r0 []binding.VotechainKPUBranch
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) ([]binding.VotechainKPUBranch, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) []binding.VotechainKPUBranch); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]binding.VotechainKPUBranch)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllVoter provides a mock function with given fields: opts
func (_m *IVotechain) GetAllVoter(opts *bind.CallOpts) ([]binding.VotechainVoter, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetAllVoter")
	}

	var r0 []binding.VotechainVoter
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) ([]binding.VotechainVoter, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) []binding.VotechainVoter); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]binding.VotechainVoter)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBranchByAddress provides a mock function with given fields: opts, branchAddress
func (_m *IVotechain) GetBranchByAddress(opts *bind.CallOpts, branchAddress common.Address) (binding.VotechainKPUBranch, error) {
	ret := _m.Called(opts, branchAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetBranchByAddress")
	}

	var r0 binding.VotechainKPUBranch
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (binding.VotechainKPUBranch, error)); ok {
		return rf(opts, branchAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) binding.VotechainKPUBranch); ok {
		r0 = rf(opts, branchAddress)
	} else {
		r0 = ret.Get(0).(binding.VotechainKPUBranch)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, branchAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCandidate provides a mock function with given fields: opts, candidateId
func (_m *IVotechain) GetCandidate(opts *bind.CallOpts, candidateId string) (binding.VotechainCandidate, error) {
	ret := _m.Called(opts, candidateId)

	if len(ret) == 0 {
		panic("no return value specified for GetCandidate")
	}

	var r0 binding.VotechainCandidate
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) (binding.VotechainCandidate, error)); ok {
		return rf(opts, candidateId)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) binding.VotechainCandidate); ok {
		r0 = rf(opts, candidateId)
	} else {
		r0 = ret.Get(0).(binding.VotechainCandidate)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, string) error); ok {
		r1 = rf(opts, candidateId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCandidateByNo provides a mock function with given fields: opts, candidateNo
func (_m *IVotechain) GetCandidateByNo(opts *bind.CallOpts, candidateNo string) (binding.VotechainCandidate, error) {
	ret := _m.Called(opts, candidateNo)

	if len(ret) == 0 {
		panic("no return value specified for GetCandidateByNo")
	}

	var r0 binding.VotechainCandidate
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) (binding.VotechainCandidate, error)); ok {
		return rf(opts, candidateNo)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) binding.VotechainCandidate); ok {
		r0 = rf(opts, candidateNo)
	} else {
		r0 = ret.Get(0).(binding.VotechainCandidate)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, string) error); ok {
		r1 = rf(opts, candidateNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoterByAddress provides a mock function with given fields: opts, voterAddress
func (_m *IVotechain) GetVoterByAddress(opts *bind.CallOpts, voterAddress common.Address) (binding.VotechainVoter, error) {
	ret := _m.Called(opts, voterAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetVoterByAddress")
	}

	var r0 binding.VotechainVoter
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (binding.VotechainVoter, error)); ok {
		return rf(opts, voterAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) binding.VotechainVoter); ok {
		r0 = rf(opts, voterAddress)
	} else {
		r0 = ret.Get(0).(binding.VotechainVoter)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, voterAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoterByNIK provides a mock function with given fields: opts, nik
func (_m *IVotechain) GetVoterByNIK(opts *bind.CallOpts, nik string) (binding.VotechainVoter, error) {
	ret := _m.Called(opts, nik)

	if len(ret) == 0 {
		panic("no return value specified for GetVoterByNIK")
	}

	var r0 binding.VotechainVoter
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) (binding.VotechainVoter, error)); ok {
		return rf(opts, nik)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) binding.VotechainVoter); ok {
		r0 = rf(opts, nik)
	} else {
		r0 = ret.Get(0).(binding.VotechainVoter)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, string) error); ok {
		r1 = rf(opts, nik)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoterByRegion provides a mock function with given fields: opts, region
func (_m *IVotechain) GetVoterByRegion(opts *bind.CallOpts, region string) ([]binding.VotechainVoter, error) {
	ret := _m.Called(opts, region)

	if len(ret) == 0 {
		panic("no return value specified for GetVoterByRegion")
	}

	var r0 []binding.VotechainVoter
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) ([]binding.VotechainVoter, error)); ok {
		return rf(opts, region)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) []binding.VotechainVoter); ok {
		r0 = rf(opts, region)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]binding.VotechainVoter)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, string) error); ok {
		r1 = rf(opts, region)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KpuAdmin provides a mock function with given fields: opts
func (_m *IVotechain) KpuAdmin(opts *bind.CallOpts) (common.Address, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for KpuAdmin")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (common.Address, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) common.Address); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KpuBranchAddressesArray provides a mock function with given fields: opts, arg0
func (_m *IVotechain) KpuBranchAddressesArray(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Name          string
	BranchAddress common.Address
	IsActive      bool
	Region        string
}, error) {
	ret := _m.Called(opts, arg0)

	if len(ret) == 0 {
		panic("no return value specified for KpuBranchAddressesArray")
	}

	var r0 struct {
		Name          string
		BranchAddress common.Address
		IsActive      bool
		Region        string
	}
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) (struct {
		Name          string
		BranchAddress common.Address
		IsActive      bool
		Region        string
	}, error)); ok {
		return rf(opts, arg0)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) struct {
		Name          string
		BranchAddress common.Address
		IsActive      bool
		Region        string
	}); ok {
		r0 = rf(opts, arg0)
	} else {
		r0 = ret.Get(0).(struct {
			Name          string
			BranchAddress common.Address
			IsActive      bool
			Region        string
		})
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, *big.Int) error); ok {
		r1 = rf(opts, arg0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KpuBranches provides a mock function with given fields: opts, arg0
func (_m *IVotechain) KpuBranches(opts *bind.CallOpts, arg0 common.Address) (struct {
	Name          string
	BranchAddress common.Address
	IsActive      bool
	Region        string
}, error) {
	ret := _m.Called(opts, arg0)

	if len(ret) == 0 {
		panic("no return value specified for KpuBranches")
	}

	var r0 struct {
		Name          string
		BranchAddress common.Address
		IsActive      bool
		Region        string
	}
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (struct {
		Name          string
		BranchAddress common.Address
		IsActive      bool
		Region        string
	}, error)); ok {
		return rf(opts, arg0)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) struct {
		Name          string
		BranchAddress common.Address
		IsActive      bool
		Region        string
	}); ok {
		r0 = rf(opts, arg0)
	} else {
		r0 = ret.Get(0).(struct {
			Name          string
			BranchAddress common.Address
			IsActive      bool
			Region        string
		})
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, arg0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseCandidateAdded provides a mock function with given fields: log
func (_m *IVotechain) ParseCandidateAdded(log types.Log) (*binding.VotechainCandidateAdded, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseCandidateAdded")
	}

	var r0 *binding.VotechainCandidateAdded
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*binding.VotechainCandidateAdded, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *binding.VotechainCandidateAdded); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainCandidateAdded)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseCandidateStatusChanged provides a mock function with given fields: log
func (_m *IVotechain) ParseCandidateStatusChanged(log types.Log) (*binding.VotechainCandidateStatusChanged, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseCandidateStatusChanged")
	}

	var r0 *binding.VotechainCandidateStatusChanged
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*binding.VotechainCandidateStatusChanged, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *binding.VotechainCandidateStatusChanged); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainCandidateStatusChanged)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseKPUBranchDeactivated provides a mock function with given fields: log
func (_m *IVotechain) ParseKPUBranchDeactivated(log types.Log) (*binding.VotechainKPUBranchDeactivated, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseKPUBranchDeactivated")
	}

	var r0 *binding.VotechainKPUBranchDeactivated
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*binding.VotechainKPUBranchDeactivated, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *binding.VotechainKPUBranchDeactivated); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainKPUBranchDeactivated)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseKPUBranchRegistered provides a mock function with given fields: log
func (_m *IVotechain) ParseKPUBranchRegistered(log types.Log) (*binding.VotechainKPUBranchRegistered, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseKPUBranchRegistered")
	}

	var r0 *binding.VotechainKPUBranchRegistered
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*binding.VotechainKPUBranchRegistered, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *binding.VotechainKPUBranchRegistered); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainKPUBranchRegistered)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseVoteCasted provides a mock function with given fields: log
func (_m *IVotechain) ParseVoteCasted(log types.Log) (*binding.VotechainVoteCasted, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseVoteCasted")
	}

	var r0 *binding.VotechainVoteCasted
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*binding.VotechainVoteCasted, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *binding.VotechainVoteCasted); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainVoteCasted)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseVoterRegistered provides a mock function with given fields: log
func (_m *IVotechain) ParseVoterRegistered(log types.Log) (*binding.VotechainVoterRegistered, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseVoterRegistered")
	}

	var r0 *binding.VotechainVoterRegistered
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*binding.VotechainVoterRegistered, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *binding.VotechainVoterRegistered); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainVoterRegistered)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseVotingStatusChanged provides a mock function with given fields: log
func (_m *IVotechain) ParseVotingStatusChanged(log types.Log) (*binding.VotechainVotingStatusChanged, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseVotingStatusChanged")
	}

	var r0 *binding.VotechainVotingStatusChanged
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*binding.VotechainVotingStatusChanged, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *binding.VotechainVotingStatusChanged); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainVotingStatusChanged)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterKPUBranch provides a mock function with given fields: opts, branchAddress, name, region
func (_m *IVotechain) RegisterKPUBranch(opts *bind.TransactOpts, branchAddress common.Address, name string, region string) (*types.Transaction, error) {
	ret := _m.Called(opts, branchAddress, name, region)

	if len(ret) == 0 {
		panic("no return value specified for RegisterKPUBranch")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, string, string) (*types.Transaction, error)); ok {
		return rf(opts, branchAddress, name, region)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, string, string) *types.Transaction); ok {
		r0 = rf(opts, branchAddress, name, region)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, string, string) error); ok {
		r1 = rf(opts, branchAddress, name, region)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterVoter provides a mock function with given fields: opts, nik, voterAddress
func (_m *IVotechain) RegisterVoter(opts *bind.TransactOpts, nik string, voterAddress common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, nik, voterAddress)

	if len(ret) == 0 {
		panic("no return value specified for RegisterVoter")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, nik, voterAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string, common.Address) *types.Transaction); ok {
		r0 = rf(opts, nik, voterAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, string, common.Address) error); ok {
		r1 = rf(opts, nik, voterAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetKpuAdmin provides a mock function with given fields: opts, newAdmin
func (_m *IVotechain) SetKpuAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, newAdmin)

	if len(ret) == 0 {
		panic("no return value specified for SetKpuAdmin")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, newAdmin)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) *types.Transaction); ok {
		r0 = rf(opts, newAdmin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address) error); ok {
		r1 = rf(opts, newAdmin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetVotingStatus provides a mock function with given fields: opts, status
func (_m *IVotechain) SetVotingStatus(opts *bind.TransactOpts, status bool) (*types.Transaction, error) {
	ret := _m.Called(opts, status)

	if len(ret) == 0 {
		panic("no return value specified for SetVotingStatus")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, bool) (*types.Transaction, error)); ok {
		return rf(opts, status)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, bool) *types.Transaction); ok {
		r0 = rf(opts, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, bool) error); ok {
		r1 = rf(opts, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleCandidateActive provides a mock function with given fields: opts, candidateId
func (_m *IVotechain) ToggleCandidateActive(opts *bind.TransactOpts, candidateId string) (*types.Transaction, error) {
	ret := _m.Called(opts, candidateId)

	if len(ret) == 0 {
		panic("no return value specified for ToggleCandidateActive")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string) (*types.Transaction, error)); ok {
		return rf(opts, candidateId)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string) *types.Transaction); ok {
		r0 = rf(opts, candidateId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, string) error); ok {
		r1 = rf(opts, candidateId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Vote provides a mock function with given fields: opts, candidateId
func (_m *IVotechain) Vote(opts *bind.TransactOpts, candidateId string) (*types.Transaction, error) {
	ret := _m.Called(opts, candidateId)

	if len(ret) == 0 {
		panic("no return value specified for Vote")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string) (*types.Transaction, error)); ok {
		return rf(opts, candidateId)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string) *types.Transaction); ok {
		r0 = rf(opts, candidateId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, string) error); ok {
		r1 = rf(opts, candidateId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VoterAddressesArray provides a mock function with given fields: opts, arg0
func (_m *IVotechain) VoterAddressesArray(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Nik          string
	VoterAddress common.Address
	HasVoted     bool
	Region       string
	IsRegistered bool
}, error) {
	ret := _m.Called(opts, arg0)

	if len(ret) == 0 {
		panic("no return value specified for VoterAddressesArray")
	}

	var r0 struct {
		Nik          string
		VoterAddress common.Address
		HasVoted     bool
		Region       string
		IsRegistered bool
	}
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) (struct {
		Nik          string
		VoterAddress common.Address
		HasVoted     bool
		Region       string
		IsRegistered bool
	}, error)); ok {
		return rf(opts, arg0)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) struct {
		Nik          string
		VoterAddress common.Address
		HasVoted     bool
		Region       string
		IsRegistered bool
	}); ok {
		r0 = rf(opts, arg0)
	} else {
		r0 = ret.Get(0).(struct {
			Nik          string
			VoterAddress common.Address
			HasVoted     bool
			Region       string
			IsRegistered bool
		})
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, *big.Int) error); ok {
		r1 = rf(opts, arg0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VoterNIKByAddress provides a mock function with given fields: opts, arg0
func (_m *IVotechain) VoterNIKByAddress(opts *bind.CallOpts, arg0 common.Address) (string, error) {
	ret := _m.Called(opts, arg0)

	if len(ret) == 0 {
		panic("no return value specified for VoterNIKByAddress")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (string, error)); ok {
		return rf(opts, arg0)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) string); ok {
		r0 = rf(opts, arg0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, arg0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Voters provides a mock function with given fields: opts, arg0
func (_m *IVotechain) Voters(opts *bind.CallOpts, arg0 string) (struct {
	Nik          string
	VoterAddress common.Address
	HasVoted     bool
	Region       string
	IsRegistered bool
}, error) {
	ret := _m.Called(opts, arg0)

	if len(ret) == 0 {
		panic("no return value specified for Voters")
	}

	var r0 struct {
		Nik          string
		VoterAddress common.Address
		HasVoted     bool
		Region       string
		IsRegistered bool
	}
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) (struct {
		Nik          string
		VoterAddress common.Address
		HasVoted     bool
		Region       string
		IsRegistered bool
	}, error)); ok {
		return rf(opts, arg0)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) struct {
		Nik          string
		VoterAddress common.Address
		HasVoted     bool
		Region       string
		IsRegistered bool
	}); ok {
		r0 = rf(opts, arg0)
	} else {
		r0 = ret.Get(0).(struct {
			Nik          string
			VoterAddress common.Address
			HasVoted     bool
			Region       string
			IsRegistered bool
		})
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, string) error); ok {
		r1 = rf(opts, arg0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VotingActive provides a mock function with given fields: opts
func (_m *IVotechain) VotingActive(opts *bind.CallOpts) (bool, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for VotingActive")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (bool, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) bool); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchCandidateAdded provides a mock function with given fields: opts, sink, candidateId
func (_m *IVotechain) WatchCandidateAdded(opts *bind.WatchOpts, sink chan<- *binding.VotechainCandidateAdded, candidateId []string) (event.Subscription, error) {
	ret := _m.Called(opts, sink, candidateId)

	if len(ret) == 0 {
		panic("no return value specified for WatchCandidateAdded")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainCandidateAdded, []string) (event.Subscription, error)); ok {
		return rf(opts, sink, candidateId)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainCandidateAdded, []string) event.Subscription); ok {
		r0 = rf(opts, sink, candidateId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *binding.VotechainCandidateAdded, []string) error); ok {
		r1 = rf(opts, sink, candidateId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchCandidateStatusChanged provides a mock function with given fields: opts, sink, candidateId
func (_m *IVotechain) WatchCandidateStatusChanged(opts *bind.WatchOpts, sink chan<- *binding.VotechainCandidateStatusChanged, candidateId []string) (event.Subscription, error) {
	ret := _m.Called(opts, sink, candidateId)

	if len(ret) == 0 {
		panic("no return value specified for WatchCandidateStatusChanged")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainCandidateStatusChanged, []string) (event.Subscription, error)); ok {
		return rf(opts, sink, candidateId)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainCandidateStatusChanged, []string) event.Subscription); ok {
		r0 = rf(opts, sink, candidateId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *binding.VotechainCandidateStatusChanged, []string) error); ok {
		r1 = rf(opts, sink, candidateId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchKPUBranchDeactivated provides a mock function with given fields: opts, sink, branchAddress
func (_m *IVotechain) WatchKPUBranchDeactivated(opts *bind.WatchOpts, sink chan<- *binding.VotechainKPUBranchDeactivated, branchAddress []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, branchAddress)

	if len(ret) == 0 {
		panic("no return value specified for WatchKPUBranchDeactivated")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainKPUBranchDeactivated, []common.Address) (event.Subscription, error)); ok {
		return rf(opts, sink, branchAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainKPUBranchDeactivated, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, branchAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *binding.VotechainKPUBranchDeactivated, []common.Address) error); ok {
		r1 = rf(opts, sink, branchAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchKPUBranchRegistered provides a mock function with given fields: opts, sink, branchAddress
func (_m *IVotechain) WatchKPUBranchRegistered(opts *bind.WatchOpts, sink chan<- *binding.VotechainKPUBranchRegistered, branchAddress []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, branchAddress)

	if len(ret) == 0 {
		panic("no return value specified for WatchKPUBranchRegistered")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainKPUBranchRegistered, []common.Address) (event.Subscription, error)); ok {
		return rf(opts, sink, branchAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainKPUBranchRegistered, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, branchAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *binding.VotechainKPUBranchRegistered, []common.Address) error); ok {
		r1 = rf(opts, sink, branchAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchVoteCasted provides a mock function with given fields: opts, sink, nik, candidateId
func (_m *IVotechain) WatchVoteCasted(opts *bind.WatchOpts, sink chan<- *binding.VotechainVoteCasted, nik []string, candidateId []string) (event.Subscription, error) {
	ret := _m.Called(opts, sink, nik, candidateId)

	if len(ret) == 0 {
		panic("no return value specified for WatchVoteCasted")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainVoteCasted, []string, []string) (event.Subscription, error)); ok {
		return rf(opts, sink, nik, candidateId)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainVoteCasted, []string, []string) event.Subscription); ok {
		r0 = rf(opts, sink, nik, candidateId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *binding.VotechainVoteCasted, []string, []string) error); ok {
		r1 = rf(opts, sink, nik, candidateId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchVoterRegistered provides a mock function with given fields: opts, sink, nik, voterAddress
func (_m *IVotechain) WatchVoterRegistered(opts *bind.WatchOpts, sink chan<- *binding.VotechainVoterRegistered, nik []string, voterAddress []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, nik, voterAddress)

	if len(ret) == 0 {
		panic("no return value specified for WatchVoterRegistered")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainVoterRegistered, []string, []common.Address) (event.Subscription, error)); ok {
		return rf(opts, sink, nik, voterAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainVoterRegistered, []string, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, nik, voterAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *binding.VotechainVoterRegistered, []string, []common.Address) error); ok {
		r1 = rf(opts, sink, nik, voterAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchVotingStatusChanged provides a mock function with given fields: opts, sink
func (_m *IVotechain) WatchVotingStatusChanged(opts *bind.WatchOpts, sink chan<- *binding.VotechainVotingStatusChanged) (event.Subscription, error) {
	ret := _m.Called(opts, sink)

	if len(ret) == 0 {
		panic("no return value specified for WatchVotingStatusChanged")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainVotingStatusChanged) (event.Subscription, error)); ok {
		return rf(opts, sink)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainVotingStatusChanged) event.Subscription); ok {
		r0 = rf(opts, sink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *binding.VotechainVotingStatusChanged) error); ok {
		r1 = rf(opts, sink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIVotechain creates a new instance of IVotechain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIVotechain(t interface {
	mock.TestingT
	Cleanup(func())
}) *IVotechain {
	mock := &IVotechain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
