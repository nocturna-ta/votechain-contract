// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	electionManager "github.com/nocturna-ta/votechain-contract/binding/electionManager"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// ElectionManagerInterface is an autogenerated mock type for the ElectionManagerInterface type
type ElectionManagerInterface struct {
	mock.Mock
}

// AddElection provides a mock function with given fields: opts, electionId, electionNo
func (_m *ElectionManagerInterface) AddElection(opts *bind.TransactOpts, electionId string, electionNo string) (*types.Transaction, error) {
	ret := _m.Called(opts, electionId, electionNo)

	if len(ret) == 0 {
		panic("no return value specified for AddElection")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string, string) (*types.Transaction, error)); ok {
		return rf(opts, electionId, electionNo)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string, string) *types.Transaction); ok {
		r0 = rf(opts, electionId, electionNo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, string, string) error); ok {
		r1 = rf(opts, electionId, electionNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Elections provides a mock function with given fields: opts, electionId
func (_m *ElectionManagerInterface) Elections(opts *bind.CallOpts, electionId string) (*electionManager.IElectionManagerElection, error) {
	ret := _m.Called(opts, electionId)

	if len(ret) == 0 {
		panic("no return value specified for Elections")
	}

	var r0 *electionManager.IElectionManagerElection
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) (*electionManager.IElectionManagerElection, error)); ok {
		return rf(opts, electionId)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) *electionManager.IElectionManagerElection); ok {
		r0 = rf(opts, electionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*electionManager.IElectionManagerElection)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, string) error); ok {
		r1 = rf(opts, electionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllElection provides a mock function with given fields: opts
func (_m *ElectionManagerInterface) GetAllElection(opts *bind.CallOpts) (*[]electionManager.IElectionManagerElection, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetAllElection")
	}

	var r0 *[]electionManager.IElectionManagerElection
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (*[]electionManager.IElectionManagerElection, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) *[]electionManager.IElectionManagerElection); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]electionManager.IElectionManagerElection)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetElection provides a mock function with given fields: opts, electionId
func (_m *ElectionManagerInterface) GetElection(opts *bind.CallOpts, electionId string) (*electionManager.IElectionManagerElection, error) {
	ret := _m.Called(opts, electionId)

	if len(ret) == 0 {
		panic("no return value specified for GetElection")
	}

	var r0 *electionManager.IElectionManagerElection
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) (*electionManager.IElectionManagerElection, error)); ok {
		return rf(opts, electionId)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) *electionManager.IElectionManagerElection); ok {
		r0 = rf(opts, electionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*electionManager.IElectionManagerElection)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, string) error); ok {
		r1 = rf(opts, electionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetElectionByNo provides a mock function with given fields: opts, electionNo
func (_m *ElectionManagerInterface) GetElectionByNo(opts *bind.CallOpts, electionNo string) (*electionManager.IElectionManagerElection, error) {
	ret := _m.Called(opts, electionNo)

	if len(ret) == 0 {
		panic("no return value specified for GetElectionByNo")
	}

	var r0 *electionManager.IElectionManagerElection
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) (*electionManager.IElectionManagerElection, error)); ok {
		return rf(opts, electionNo)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) *electionManager.IElectionManagerElection); ok {
		r0 = rf(opts, electionNo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*electionManager.IElectionManagerElection)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, string) error); ok {
		r1 = rf(opts, electionNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleElectionActive provides a mock function with given fields: opts, electionId, electionNo
func (_m *ElectionManagerInterface) ToggleElectionActive(opts *bind.TransactOpts, electionId string, electionNo string) (*types.Transaction, error) {
	ret := _m.Called(opts, electionId, electionNo)

	if len(ret) == 0 {
		panic("no return value specified for ToggleElectionActive")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string, string) (*types.Transaction, error)); ok {
		return rf(opts, electionId, electionNo)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string, string) *types.Transaction); ok {
		r0 = rf(opts, electionId, electionNo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, string, string) error); ok {
		r1 = rf(opts, electionId, electionNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Vote provides a mock function with given fields: opts, electionId, electionNo, voterNik
func (_m *ElectionManagerInterface) Vote(opts *bind.TransactOpts, electionId string, electionNo string, voterNik string) (*types.Transaction, error) {
	ret := _m.Called(opts, electionId, electionNo, voterNik)

	if len(ret) == 0 {
		panic("no return value specified for Vote")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string, string, string) (*types.Transaction, error)); ok {
		return rf(opts, electionId, electionNo, voterNik)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string, string, string) *types.Transaction); ok {
		r0 = rf(opts, electionId, electionNo, voterNik)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, string, string, string) error); ok {
		r1 = rf(opts, electionId, electionNo, voterNik)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewElectionManagerInterface creates a new instance of ElectionManagerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewElectionManagerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ElectionManagerInterface {
	mock := &ElectionManagerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
