// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// KpuManagerInterface is an autogenerated mock type for the KpuManagerInterface type
type KpuManagerInterface struct {
	mock.Mock
}

// GetKpuKotaRegion provides a mock function with given fields: opts, kpuAddress
func (_m *KpuManagerInterface) GetKpuKotaRegion(opts *bind.CallOpts, kpuAddress common.Address) (string, error) {
	ret := _m.Called(opts, kpuAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetKpuKotaRegion")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (string, error)); ok {
		return rf(opts, kpuAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) string); ok {
		r0 = rf(opts, kpuAddress)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, kpuAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsKPUKota provides a mock function with given fields: opts, kpuAddress
func (_m *KpuManagerInterface) IsKPUKota(opts *bind.CallOpts, kpuAddress common.Address) (bool, error) {
	ret := _m.Called(opts, kpuAddress)

	if len(ret) == 0 {
		panic("no return value specified for IsKPUKota")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (bool, error)); ok {
		return rf(opts, kpuAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) bool); ok {
		r0 = rf(opts, kpuAddress)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, kpuAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsKPUProvinsi provides a mock function with given fields: opts, kpuAddress
func (_m *KpuManagerInterface) IsKPUProvinsi(opts *bind.CallOpts, kpuAddress common.Address) (bool, error) {
	ret := _m.Called(opts, kpuAddress)

	if len(ret) == 0 {
		panic("no return value specified for IsKPUProvinsi")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (bool, error)); ok {
		return rf(opts, kpuAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) bool); ok {
		r0 = rf(opts, kpuAddress)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, kpuAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterKPUKota provides a mock function with given fields: opts, Address, name, region
func (_m *KpuManagerInterface) RegisterKPUKota(opts *bind.TransactOpts, Address common.Address, name string, region string) (*types.Transaction, error) {
	ret := _m.Called(opts, Address, name, region)

	if len(ret) == 0 {
		panic("no return value specified for RegisterKPUKota")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, string, string) (*types.Transaction, error)); ok {
		return rf(opts, Address, name, region)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, string, string) *types.Transaction); ok {
		r0 = rf(opts, Address, name, region)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, string, string) error); ok {
		r1 = rf(opts, Address, name, region)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterKPUProvinsi provides a mock function with given fields: opts, Address, name, region
func (_m *KpuManagerInterface) RegisterKPUProvinsi(opts *bind.TransactOpts, Address common.Address, name string, region string) (*types.Transaction, error) {
	ret := _m.Called(opts, Address, name, region)

	if len(ret) == 0 {
		panic("no return value specified for RegisterKPUProvinsi")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, string, string) (*types.Transaction, error)); ok {
		return rf(opts, Address, name, region)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, string, string) *types.Transaction); ok {
		r0 = rf(opts, Address, name, region)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, string, string) error); ok {
		r1 = rf(opts, Address, name, region)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewKpuManagerInterface creates a new instance of KpuManagerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKpuManagerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *KpuManagerInterface {
	mock := &KpuManagerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
