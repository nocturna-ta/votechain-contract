// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	binding "github.com/nocturna-ta/votechain-contract/binding"

	common "github.com/ethereum/go-ethereum/common"

	event "github.com/ethereum/go-ethereum/event"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// IVotechainFilterer is an autogenerated mock type for the IVotechainFilterer type
type IVotechainFilterer struct {
	mock.Mock
}

// FilterCandidateAdded provides a mock function with given fields: opts, candidateId
func (_m *IVotechainFilterer) FilterCandidateAdded(opts *bind.FilterOpts, candidateId []string) (*binding.VotechainCandidateAddedIterator, error) {
	ret := _m.Called(opts, candidateId)

	if len(ret) == 0 {
		panic("no return value specified for FilterCandidateAdded")
	}

	var r0 *binding.VotechainCandidateAddedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []string) (*binding.VotechainCandidateAddedIterator, error)); ok {
		return rf(opts, candidateId)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []string) *binding.VotechainCandidateAddedIterator); ok {
		r0 = rf(opts, candidateId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainCandidateAddedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []string) error); ok {
		r1 = rf(opts, candidateId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterCandidateStatusChanged provides a mock function with given fields: opts, candidateId
func (_m *IVotechainFilterer) FilterCandidateStatusChanged(opts *bind.FilterOpts, candidateId []string) (*binding.VotechainCandidateStatusChangedIterator, error) {
	ret := _m.Called(opts, candidateId)

	if len(ret) == 0 {
		panic("no return value specified for FilterCandidateStatusChanged")
	}

	var r0 *binding.VotechainCandidateStatusChangedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []string) (*binding.VotechainCandidateStatusChangedIterator, error)); ok {
		return rf(opts, candidateId)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []string) *binding.VotechainCandidateStatusChangedIterator); ok {
		r0 = rf(opts, candidateId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainCandidateStatusChangedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []string) error); ok {
		r1 = rf(opts, candidateId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterKPUBranchDeactivated provides a mock function with given fields: opts, branchAddress
func (_m *IVotechainFilterer) FilterKPUBranchDeactivated(opts *bind.FilterOpts, branchAddress []common.Address) (*binding.VotechainKPUBranchDeactivatedIterator, error) {
	ret := _m.Called(opts, branchAddress)

	if len(ret) == 0 {
		panic("no return value specified for FilterKPUBranchDeactivated")
	}

	var r0 *binding.VotechainKPUBranchDeactivatedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address) (*binding.VotechainKPUBranchDeactivatedIterator, error)); ok {
		return rf(opts, branchAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address) *binding.VotechainKPUBranchDeactivatedIterator); ok {
		r0 = rf(opts, branchAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainKPUBranchDeactivatedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address) error); ok {
		r1 = rf(opts, branchAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterKPUBranchRegistered provides a mock function with given fields: opts, branchAddress
func (_m *IVotechainFilterer) FilterKPUBranchRegistered(opts *bind.FilterOpts, branchAddress []common.Address) (*binding.VotechainKPUBranchRegisteredIterator, error) {
	ret := _m.Called(opts, branchAddress)

	if len(ret) == 0 {
		panic("no return value specified for FilterKPUBranchRegistered")
	}

	var r0 *binding.VotechainKPUBranchRegisteredIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address) (*binding.VotechainKPUBranchRegisteredIterator, error)); ok {
		return rf(opts, branchAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address) *binding.VotechainKPUBranchRegisteredIterator); ok {
		r0 = rf(opts, branchAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainKPUBranchRegisteredIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address) error); ok {
		r1 = rf(opts, branchAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterVoteCasted provides a mock function with given fields: opts, nik, candidateId
func (_m *IVotechainFilterer) FilterVoteCasted(opts *bind.FilterOpts, nik []string, candidateId []string) (*binding.VotechainVoteCastedIterator, error) {
	ret := _m.Called(opts, nik, candidateId)

	if len(ret) == 0 {
		panic("no return value specified for FilterVoteCasted")
	}

	var r0 *binding.VotechainVoteCastedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []string, []string) (*binding.VotechainVoteCastedIterator, error)); ok {
		return rf(opts, nik, candidateId)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []string, []string) *binding.VotechainVoteCastedIterator); ok {
		r0 = rf(opts, nik, candidateId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainVoteCastedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []string, []string) error); ok {
		r1 = rf(opts, nik, candidateId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterVoterRegistered provides a mock function with given fields: opts, nik, voterAddress
func (_m *IVotechainFilterer) FilterVoterRegistered(opts *bind.FilterOpts, nik []string, voterAddress []common.Address) (*binding.VotechainVoterRegisteredIterator, error) {
	ret := _m.Called(opts, nik, voterAddress)

	if len(ret) == 0 {
		panic("no return value specified for FilterVoterRegistered")
	}

	var r0 *binding.VotechainVoterRegisteredIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []string, []common.Address) (*binding.VotechainVoterRegisteredIterator, error)); ok {
		return rf(opts, nik, voterAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []string, []common.Address) *binding.VotechainVoterRegisteredIterator); ok {
		r0 = rf(opts, nik, voterAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainVoterRegisteredIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []string, []common.Address) error); ok {
		r1 = rf(opts, nik, voterAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterVotingStatusChanged provides a mock function with given fields: opts
func (_m *IVotechainFilterer) FilterVotingStatusChanged(opts *bind.FilterOpts) (*binding.VotechainVotingStatusChangedIterator, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for FilterVotingStatusChanged")
	}

	var r0 *binding.VotechainVotingStatusChangedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts) (*binding.VotechainVotingStatusChangedIterator, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts) *binding.VotechainVotingStatusChangedIterator); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainVotingStatusChangedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseCandidateAdded provides a mock function with given fields: log
func (_m *IVotechainFilterer) ParseCandidateAdded(log types.Log) (*binding.VotechainCandidateAdded, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseCandidateAdded")
	}

	var r0 *binding.VotechainCandidateAdded
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*binding.VotechainCandidateAdded, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *binding.VotechainCandidateAdded); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainCandidateAdded)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseCandidateStatusChanged provides a mock function with given fields: log
func (_m *IVotechainFilterer) ParseCandidateStatusChanged(log types.Log) (*binding.VotechainCandidateStatusChanged, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseCandidateStatusChanged")
	}

	var r0 *binding.VotechainCandidateStatusChanged
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*binding.VotechainCandidateStatusChanged, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *binding.VotechainCandidateStatusChanged); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainCandidateStatusChanged)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseKPUBranchDeactivated provides a mock function with given fields: log
func (_m *IVotechainFilterer) ParseKPUBranchDeactivated(log types.Log) (*binding.VotechainKPUBranchDeactivated, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseKPUBranchDeactivated")
	}

	var r0 *binding.VotechainKPUBranchDeactivated
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*binding.VotechainKPUBranchDeactivated, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *binding.VotechainKPUBranchDeactivated); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainKPUBranchDeactivated)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseKPUBranchRegistered provides a mock function with given fields: log
func (_m *IVotechainFilterer) ParseKPUBranchRegistered(log types.Log) (*binding.VotechainKPUBranchRegistered, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseKPUBranchRegistered")
	}

	var r0 *binding.VotechainKPUBranchRegistered
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*binding.VotechainKPUBranchRegistered, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *binding.VotechainKPUBranchRegistered); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainKPUBranchRegistered)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseVoteCasted provides a mock function with given fields: log
func (_m *IVotechainFilterer) ParseVoteCasted(log types.Log) (*binding.VotechainVoteCasted, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseVoteCasted")
	}

	var r0 *binding.VotechainVoteCasted
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*binding.VotechainVoteCasted, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *binding.VotechainVoteCasted); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainVoteCasted)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseVoterRegistered provides a mock function with given fields: log
func (_m *IVotechainFilterer) ParseVoterRegistered(log types.Log) (*binding.VotechainVoterRegistered, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseVoterRegistered")
	}

	var r0 *binding.VotechainVoterRegistered
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*binding.VotechainVoterRegistered, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *binding.VotechainVoterRegistered); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainVoterRegistered)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseVotingStatusChanged provides a mock function with given fields: log
func (_m *IVotechainFilterer) ParseVotingStatusChanged(log types.Log) (*binding.VotechainVotingStatusChanged, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseVotingStatusChanged")
	}

	var r0 *binding.VotechainVotingStatusChanged
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*binding.VotechainVotingStatusChanged, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *binding.VotechainVotingStatusChanged); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*binding.VotechainVotingStatusChanged)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchCandidateAdded provides a mock function with given fields: opts, sink, candidateId
func (_m *IVotechainFilterer) WatchCandidateAdded(opts *bind.WatchOpts, sink chan<- *binding.VotechainCandidateAdded, candidateId []string) (event.Subscription, error) {
	ret := _m.Called(opts, sink, candidateId)

	if len(ret) == 0 {
		panic("no return value specified for WatchCandidateAdded")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainCandidateAdded, []string) (event.Subscription, error)); ok {
		return rf(opts, sink, candidateId)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainCandidateAdded, []string) event.Subscription); ok {
		r0 = rf(opts, sink, candidateId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *binding.VotechainCandidateAdded, []string) error); ok {
		r1 = rf(opts, sink, candidateId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchCandidateStatusChanged provides a mock function with given fields: opts, sink, candidateId
func (_m *IVotechainFilterer) WatchCandidateStatusChanged(opts *bind.WatchOpts, sink chan<- *binding.VotechainCandidateStatusChanged, candidateId []string) (event.Subscription, error) {
	ret := _m.Called(opts, sink, candidateId)

	if len(ret) == 0 {
		panic("no return value specified for WatchCandidateStatusChanged")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainCandidateStatusChanged, []string) (event.Subscription, error)); ok {
		return rf(opts, sink, candidateId)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainCandidateStatusChanged, []string) event.Subscription); ok {
		r0 = rf(opts, sink, candidateId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *binding.VotechainCandidateStatusChanged, []string) error); ok {
		r1 = rf(opts, sink, candidateId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchKPUBranchDeactivated provides a mock function with given fields: opts, sink, branchAddress
func (_m *IVotechainFilterer) WatchKPUBranchDeactivated(opts *bind.WatchOpts, sink chan<- *binding.VotechainKPUBranchDeactivated, branchAddress []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, branchAddress)

	if len(ret) == 0 {
		panic("no return value specified for WatchKPUBranchDeactivated")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainKPUBranchDeactivated, []common.Address) (event.Subscription, error)); ok {
		return rf(opts, sink, branchAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainKPUBranchDeactivated, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, branchAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *binding.VotechainKPUBranchDeactivated, []common.Address) error); ok {
		r1 = rf(opts, sink, branchAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchKPUBranchRegistered provides a mock function with given fields: opts, sink, branchAddress
func (_m *IVotechainFilterer) WatchKPUBranchRegistered(opts *bind.WatchOpts, sink chan<- *binding.VotechainKPUBranchRegistered, branchAddress []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, branchAddress)

	if len(ret) == 0 {
		panic("no return value specified for WatchKPUBranchRegistered")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainKPUBranchRegistered, []common.Address) (event.Subscription, error)); ok {
		return rf(opts, sink, branchAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainKPUBranchRegistered, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, branchAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *binding.VotechainKPUBranchRegistered, []common.Address) error); ok {
		r1 = rf(opts, sink, branchAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchVoteCasted provides a mock function with given fields: opts, sink, nik, candidateId
func (_m *IVotechainFilterer) WatchVoteCasted(opts *bind.WatchOpts, sink chan<- *binding.VotechainVoteCasted, nik []string, candidateId []string) (event.Subscription, error) {
	ret := _m.Called(opts, sink, nik, candidateId)

	if len(ret) == 0 {
		panic("no return value specified for WatchVoteCasted")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainVoteCasted, []string, []string) (event.Subscription, error)); ok {
		return rf(opts, sink, nik, candidateId)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainVoteCasted, []string, []string) event.Subscription); ok {
		r0 = rf(opts, sink, nik, candidateId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *binding.VotechainVoteCasted, []string, []string) error); ok {
		r1 = rf(opts, sink, nik, candidateId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchVoterRegistered provides a mock function with given fields: opts, sink, nik, voterAddress
func (_m *IVotechainFilterer) WatchVoterRegistered(opts *bind.WatchOpts, sink chan<- *binding.VotechainVoterRegistered, nik []string, voterAddress []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, nik, voterAddress)

	if len(ret) == 0 {
		panic("no return value specified for WatchVoterRegistered")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainVoterRegistered, []string, []common.Address) (event.Subscription, error)); ok {
		return rf(opts, sink, nik, voterAddress)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainVoterRegistered, []string, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, nik, voterAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *binding.VotechainVoterRegistered, []string, []common.Address) error); ok {
		r1 = rf(opts, sink, nik, voterAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchVotingStatusChanged provides a mock function with given fields: opts, sink
func (_m *IVotechainFilterer) WatchVotingStatusChanged(opts *bind.WatchOpts, sink chan<- *binding.VotechainVotingStatusChanged) (event.Subscription, error) {
	ret := _m.Called(opts, sink)

	if len(ret) == 0 {
		panic("no return value specified for WatchVotingStatusChanged")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainVotingStatusChanged) (event.Subscription, error)); ok {
		return rf(opts, sink)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *binding.VotechainVotingStatusChanged) event.Subscription); ok {
		r0 = rf(opts, sink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *binding.VotechainVotingStatusChanged) error); ok {
		r1 = rf(opts, sink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIVotechainFilterer creates a new instance of IVotechainFilterer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIVotechainFilterer(t interface {
	mock.TestingT
	Cleanup(func())
}) *IVotechainFilterer {
	mock := &IVotechainFilterer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
